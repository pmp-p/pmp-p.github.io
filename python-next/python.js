var Module=typeof Module!=="undefined"?Module:{};if(!Module.expectedDataFileDownloads){Module.expectedDataFileDownloads=0;Module.finishedDataFileDownloads=0}Module.expectedDataFileDownloads++;(function(){var loadPackage=function(metadata){var PACKAGE_PATH;if(typeof window==="object"){PACKAGE_PATH=window["encodeURIComponent"](window.location.pathname.toString().substring(0,window.location.pathname.toString().lastIndexOf("/"))+"/")}else if(typeof location!=="undefined"){PACKAGE_PATH=encodeURIComponent(location.pathname.toString().substring(0,location.pathname.toString().lastIndexOf("/"))+"/")}else{throw"using preloaded data can only be done on a web page or in a web worker"}var PACKAGE_NAME="python.data";var REMOTE_PACKAGE_BASE="python.data";if(typeof Module["locateFilePackage"]==="function"&&!Module["locateFile"]){Module["locateFile"]=Module["locateFilePackage"];err("warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)")}var REMOTE_PACKAGE_NAME=Module["locateFile"]?Module["locateFile"](REMOTE_PACKAGE_BASE,""):REMOTE_PACKAGE_BASE;var REMOTE_PACKAGE_SIZE=metadata.remote_package_size;var PACKAGE_UUID=metadata.package_uuid;function fetchRemotePackage(packageName,packageSize,callback,errback){var xhr=new XMLHttpRequest;xhr.open("GET",packageName,true);xhr.responseType="arraybuffer";xhr.onprogress=function(event){var url=packageName;var size=packageSize;if(event.total)size=event.total;if(event.loaded){if(!xhr.addedTotal){xhr.addedTotal=true;if(!Module.dataFileDownloads)Module.dataFileDownloads={};Module.dataFileDownloads[url]={loaded:event.loaded,total:size}}else{Module.dataFileDownloads[url].loaded=event.loaded}var total=0;var loaded=0;var num=0;for(var download in Module.dataFileDownloads){var data=Module.dataFileDownloads[download];total+=data.total;loaded+=data.loaded;num++}total=Math.ceil(total*Module.expectedDataFileDownloads/num);if(Module["setStatus"])Module["setStatus"]("Downloading data... ("+loaded+"/"+total+")")}else if(!Module.dataFileDownloads){if(Module["setStatus"])Module["setStatus"]("Downloading data...")}};xhr.onerror=function(event){throw new Error("NetworkError for: "+packageName)};xhr.onload=function(event){if(xhr.status==200||xhr.status==304||xhr.status==206||xhr.status==0&&xhr.response){var packageData=xhr.response;callback(packageData)}else{throw new Error(xhr.statusText+" : "+xhr.responseURL)}};xhr.send(null)}function handleError(error){console.error("package error:",error)}var fetchedCallback=null;var fetched=Module["getPreloadedPackage"]?Module["getPreloadedPackage"](REMOTE_PACKAGE_NAME,REMOTE_PACKAGE_SIZE):null;if(!fetched)fetchRemotePackage(REMOTE_PACKAGE_NAME,REMOTE_PACKAGE_SIZE,function(data){if(fetchedCallback){fetchedCallback(data);fetchedCallback=null}else{fetched=data}},handleError);function runWithFS(){function assert(check,msg){if(!check)throw msg+(new Error).stack}Module["FS_createPath"]("/","lib",true,true);Module["FS_createPath"]("/lib","python3.8",true,true);Module["FS_createPath"]("/lib/python3.8","collections",true,true);Module["FS_createPath"]("/lib/python3.8","logging",true,true);Module["FS_createPath"]("/lib/python3.8","importlib",true,true);Module["FS_createPath"]("/lib/python3.8","unittest",true,true);Module["FS_createPath"]("/lib/python3.8/unittest","test",true,true);Module["FS_createPath"]("/lib/python3.8/unittest/test","testmock",true,true);Module["FS_createPath"]("/lib/python3.8","aioconsole",true,true);Module["FS_createPath"]("/lib/python3.8","ctypes",true,true);Module["FS_createPath"]("/lib/python3.8/ctypes","macholib",true,true);Module["FS_createPath"]("/lib/python3.8/ctypes","test",true,true);Module["FS_createPath"]("/lib/python3.8","multiprocessing",true,true);Module["FS_createPath"]("/lib/python3.8/multiprocessing","dummy",true,true);Module["FS_createPath"]("/lib/python3.8","urllib",true,true);Module["FS_createPath"]("/lib/python3.8","asyncio",true,true);Module["FS_createPath"]("/lib/python3.8","encodings",true,true);Module["FS_createPath"]("/lib/python3.8","concurrent",true,true);Module["FS_createPath"]("/lib/python3.8/concurrent","futures",true,true);Module["FS_createPath"]("/lib/python3.8","pydoc_data",true,true);Module["FS_createPath"]("/lib/python3.8","json",true,true);function DataRequest(start,end,audio){this.start=start;this.end=end;this.audio=audio}DataRequest.prototype={requests:{},open:function(mode,name){this.name=name;this.requests[name]=this;Module["addRunDependency"]("fp "+this.name)},send:function(){},onload:function(){var byteArray=this.byteArray.subarray(this.start,this.end);this.finish(byteArray)},finish:function(byteArray){var that=this;Module["FS_createDataFile"](this.name,null,byteArray,true,true,true);Module["removeRunDependency"]("fp "+that.name);this.requests[this.name]=null}};var files=metadata.files;for(var i=0;i<files.length;++i){new DataRequest(files[i].start,files[i].end,files[i].audio).open("GET",files[i].filename)}function processPackageData(arrayBuffer){Module.finishedDataFileDownloads++;assert(arrayBuffer,"Loading data file failed.");assert(arrayBuffer instanceof ArrayBuffer,"bad input to processPackageData");var byteArray=new Uint8Array(arrayBuffer);var ptr=Module["getMemory"](byteArray.length);Module["HEAPU8"].set(byteArray,ptr);DataRequest.prototype.byteArray=Module["HEAPU8"].subarray(ptr,ptr+byteArray.length);var files=metadata.files;for(var i=0;i<files.length;++i){DataRequest.prototype.requests[files[i].filename].onload()}Module["removeRunDependency"]("datafile_python.data")}Module["addRunDependency"]("datafile_python.data");if(!Module.preloadResults)Module.preloadResults={};Module.preloadResults[PACKAGE_NAME]={fromCache:false};if(fetched){processPackageData(fetched);fetched=null}else{fetchedCallback=processPackageData}}if(Module["calledRun"]){runWithFS()}else{if(!Module["preRun"])Module["preRun"]=[];Module["preRun"].push(runWithFS)}};loadPackage({"files":[{"start":0,"audio":0,"end":5101,"filename":"/lib/python3.8/__future__.py"},{"start":5101,"audio":0,"end":90982,"filename":"/lib/python3.8/zipfile.py"},{"start":90982,"audio":0,"end":123233,"filename":"/lib/python3.8/bdb.py"},{"start":123233,"audio":0,"end":159823,"filename":"/lib/python3.8/codecs.py"},{"start":159823,"audio":0,"end":175570,"filename":"/lib/python3.8/re.py"},{"start":175570,"audio":0,"end":271217,"filename":"/lib/python3.8/argparse.py"},{"start":271217,"audio":0,"end":274032,"filename":"/lib/python3.8/dummy_threading.py"},{"start":274032,"audio":0,"end":292593,"filename":"/lib/python3.8/selectors.py"},{"start":292593,"audio":0,"end":299728,"filename":"/lib/python3.8/copyreg.py"},{"start":299728,"audio":0,"end":323207,"filename":"/lib/python3.8/traceback.py"},{"start":323207,"audio":0,"end":416823,"filename":"/lib/python3.8/tarfile.py"},{"start":416823,"audio":0,"end":443518,"filename":"/lib/python3.8/sre_compile.py"},{"start":443518,"audio":0,"end":449253,"filename":"/lib/python3.8/_weakrefset.py"},{"start":449253,"audio":0,"end":455061,"filename":"/lib/python3.8/opcode.py"},{"start":455061,"audio":0,"end":470688,"filename":"/lib/python3.8/posixpath.py"},{"start":470688,"audio":0,"end":492149,"filename":"/lib/python3.8/pkgutil.py"},{"start":492149,"audio":0,"end":497461,"filename":"/lib/python3.8/linecache.py"},{"start":497461,"audio":0,"end":504615,"filename":"/lib/python3.8/sre_constants.py"},{"start":504615,"audio":0,"end":506983,"filename":"/lib/python3.8/token.py"},{"start":506983,"audio":0,"end":516662,"filename":"/lib/python3.8/hashlib.py"},{"start":516662,"audio":0,"end":541124,"filename":"/lib/python3.8/sysconfig.py"},{"start":541124,"audio":0,"end":564001,"filename":"/lib/python3.8/heapq.py"},{"start":564001,"audio":0,"end":570028,"filename":"/lib/python3.8/_dummy_thread.py"},{"start":570028,"audio":0,"end":658102,"filename":"/lib/python3.8/datetime.py"},{"start":658102,"audio":0,"end":666722,"filename":"/lib/python3.8/copy.py"},{"start":666722,"audio":0,"end":673942,"filename":"/lib/python3.8/_threading_local.py"},{"start":673942,"audio":0,"end":694036,"filename":"/lib/python3.8/asyncore.py"},{"start":694036,"audio":0,"end":712510,"filename":"/lib/python3.8/ast.py"},{"start":712510,"audio":0,"end":722223,"filename":"/lib/python3.8/types.py"},{"start":722223,"audio":0,"end":753772,"filename":"/lib/python3.8/socket.py"},{"start":753772,"audio":0,"end":861173,"filename":"/lib/python3.8/pydoc.py"},{"start":861173,"audio":0,"end":888095,"filename":"/lib/python3.8/socketserver.py"},{"start":888095,"audio":0,"end":899451,"filename":"/lib/python3.8/queue.py"},{"start":899451,"audio":0,"end":910162,"filename":"/lib/python3.8/operator.py"},{"start":910162,"audio":0,"end":923343,"filename":"/lib/python3.8/shlex.py"},{"start":923343,"audio":0,"end":935302,"filename":"/lib/python3.8/runpy.py"},{"start":935302,"audio":0,"end":937516,"filename":"/lib/python3.8/bisect.py"},{"start":937516,"audio":0,"end":948135,"filename":"/lib/python3.8/code.py"},{"start":948135,"audio":0,"end":982752,"filename":"/lib/python3.8/enum.py"},{"start":982752,"audio":0,"end":988746,"filename":"/lib/python3.8/codeop.py"},{"start":988746,"audio":0,"end":994086,"filename":"/lib/python3.8/_compression.py"},{"start":994086,"audio":0,"end":1034316,"filename":"/lib/python3.8/sre_parse.py"},{"start":1034316,"audio":0,"end":1084944,"filename":"/lib/python3.8/threading.py"},{"start":1084944,"audio":0,"end":1113746,"filename":"/lib/python3.8/random.py"},{"start":1113746,"audio":0,"end":1141278,"filename":"/lib/python3.8/tempfile.py"},{"start":1141278,"audio":0,"end":1162661,"filename":"/lib/python3.8/weakref.py"},{"start":1162661,"audio":0,"end":1183041,"filename":"/lib/python3.8/base64.py"},{"start":1183041,"audio":0,"end":1208036,"filename":"/lib/python3.8/contextlib.py"},{"start":1208036,"audio":0,"end":1326029,"filename":"/lib/python3.8/inspect.py"},{"start":1326029,"audio":0,"end":1330983,"filename":"/lib/python3.8/genericpath.py"},{"start":1330983,"audio":0,"end":1350390,"filename":"/lib/python3.8/textwrap.py"},{"start":1350390,"audio":0,"end":1365301,"filename":"/lib/python3.8/clink.py"},{"start":1365301,"audio":0,"end":1376629,"filename":"/lib/python3.8/asynchat.py"},{"start":1376629,"audio":0,"end":1396958,"filename":"/lib/python3.8/dis.py"},{"start":1396958,"audio":0,"end":1402090,"filename":"/lib/python3.8/stat.py"},{"start":1402090,"audio":0,"end":1466482,"filename":"/lib/python3.8/pickle.py"},{"start":1466482,"audio":0,"end":1477018,"filename":"/lib/python3.8/imp.py"},{"start":1477018,"audio":0,"end":1487553,"filename":"/lib/python3.8/string.py"},{"start":1487553,"audio":0,"end":1493742,"filename":"/lib/python3.8/_py_abc.py"},{"start":1493742,"audio":0,"end":1496857,"filename":"/lib/python3.8/_sitebuiltins.py"},{"start":1496857,"audio":0,"end":1501346,"filename":"/lib/python3.8/abc.py"},{"start":1501346,"audio":0,"end":1540196,"filename":"/lib/python3.8/os.py"},{"start":1540196,"audio":0,"end":1594570,"filename":"/lib/python3.8/configparser.py"},{"start":1594570,"audio":0,"end":1617099,"filename":"/lib/python3.8/_sysconfigdata__emscripten_x86_64-linux-gnu.py"},{"start":1617099,"audio":0,"end":1638583,"filename":"/lib/python3.8/pprint.py"},{"start":1638583,"audio":0,"end":1638840,"filename":"/lib/python3.8/struct.py"},{"start":1638840,"audio":0,"end":1684297,"filename":"/lib/python3.8/ssl.py"},{"start":1684297,"audio":0,"end":1689564,"filename":"/lib/python3.8/reprlib.py"},{"start":1689564,"audio":0,"end":1692383,"filename":"/lib/python3.8/site_em_cpy.py"},{"start":1692383,"audio":0,"end":1694656,"filename":"/lib/python3.8/signal.py"},{"start":1694656,"audio":0,"end":1695601,"filename":"/lib/python3.8/keyword.py"},{"start":1695601,"audio":0,"end":1745847,"filename":"/lib/python3.8/shutil.py"},{"start":1745847,"audio":0,"end":1749388,"filename":"/lib/python3.8/io.py"},{"start":1749388,"audio":0,"end":1775229,"filename":"/lib/python3.8/tokenize.py"},{"start":1775229,"audio":0,"end":1850830,"filename":"/lib/python3.8/subprocess.py"},{"start":1850830,"audio":0,"end":1877968,"filename":"/lib/python3.8/gettext.py"},{"start":1877968,"audio":0,"end":1956159,"filename":"/lib/python3.8/locale.py"},{"start":1956159,"audio":0,"end":1982259,"filename":"/lib/python3.8/_collections_abc.py"},{"start":1982259,"audio":0,"end":2066311,"filename":"/lib/python3.8/difflib.py"},{"start":2066311,"audio":0,"end":2072008,"filename":"/lib/python3.8/glob.py"},{"start":2072008,"audio":0,"end":2080757,"filename":"/lib/python3.8/_compat_pickle.py"},{"start":2080757,"audio":0,"end":2118117,"filename":"/lib/python3.8/functools.py"},{"start":2118117,"audio":0,"end":2118996,"filename":"/lib/python3.8/tty.py"},{"start":2118996,"audio":0,"end":2159302,"filename":"/lib/python3.8/platform.py"},{"start":2159302,"audio":0,"end":2163358,"filename":"/lib/python3.8/fnmatch.py"},{"start":2163358,"audio":0,"end":2184696,"filename":"/lib/python3.8/site.py"},{"start":2184696,"audio":0,"end":2204546,"filename":"/lib/python3.8/warnings.py"},{"start":2204546,"audio":0,"end":2252067,"filename":"/lib/python3.8/collections/__init__.py"},{"start":2252067,"audio":0,"end":2252135,"filename":"/lib/python3.8/collections/abc.py"},{"start":2252135,"audio":0,"end":2329672,"filename":"/lib/python3.8/logging/__init__.py"},{"start":2329672,"audio":0,"end":2387557,"filename":"/lib/python3.8/logging/handlers.py"},{"start":2387557,"audio":0,"end":2423806,"filename":"/lib/python3.8/logging/config.py"},{"start":2423806,"audio":0,"end":2424650,"filename":"/lib/python3.8/importlib/machinery.py"},{"start":2424650,"audio":0,"end":2430711,"filename":"/lib/python3.8/importlib/__init__.py"},{"start":2430711,"audio":0,"end":2494727,"filename":"/lib/python3.8/importlib/_bootstrap_external.py"},{"start":2494727,"audio":0,"end":2504164,"filename":"/lib/python3.8/importlib/resources.py"},{"start":2504164,"audio":0,"end":2515483,"filename":"/lib/python3.8/importlib/util.py"},{"start":2515483,"audio":0,"end":2555127,"filename":"/lib/python3.8/importlib/_bootstrap.py"},{"start":2555127,"audio":0,"end":2568e3,"filename":"/lib/python3.8/importlib/abc.py"},{"start":2568e3,"audio":0,"end":2571267,"filename":"/lib/python3.8/unittest/__init__.py"},{"start":2571267,"audio":0,"end":2582505,"filename":"/lib/python3.8/unittest/main.py"},{"start":2582505,"audio":0,"end":2641929,"filename":"/lib/python3.8/unittest/case.py"},{"start":2641929,"audio":0,"end":2647144,"filename":"/lib/python3.8/unittest/util.py"},{"start":2647144,"audio":0,"end":2649547,"filename":"/lib/python3.8/unittest/signals.py"},{"start":2649547,"audio":0,"end":2650019,"filename":"/lib/python3.8/unittest/__main__.py"},{"start":2650019,"audio":0,"end":2662834,"filename":"/lib/python3.8/unittest/suite.py"},{"start":2662834,"audio":0,"end":2670601,"filename":"/lib/python3.8/unittest/runner.py"},{"start":2670601,"audio":0,"end":2693303,"filename":"/lib/python3.8/unittest/loader.py"},{"start":2693303,"audio":0,"end":2791058,"filename":"/lib/python3.8/unittest/mock.py"},{"start":2791058,"audio":0,"end":2798500,"filename":"/lib/python3.8/unittest/result.py"},{"start":2798500,"audio":0,"end":2798550,"filename":"/lib/python3.8/unittest/test/dummy.py"},{"start":2798550,"audio":0,"end":2808043,"filename":"/lib/python3.8/unittest/test/test_break.py"},{"start":2808043,"audio":0,"end":2823227,"filename":"/lib/python3.8/unittest/test/test_suite.py"},{"start":2823227,"audio":0,"end":2848227,"filename":"/lib/python3.8/unittest/test/test_result.py"},{"start":2848227,"audio":0,"end":2848811,"filename":"/lib/python3.8/unittest/test/__init__.py"},{"start":2848811,"audio":0,"end":2858127,"filename":"/lib/python3.8/unittest/test/test_skipping.py"},{"start":2858127,"audio":0,"end":2861879,"filename":"/lib/python3.8/unittest/test/support.py"},{"start":2861879,"audio":0,"end":2924934,"filename":"/lib/python3.8/unittest/test/test_loader.py"},{"start":2924934,"audio":0,"end":2927238,"filename":"/lib/python3.8/unittest/test/_test_warnings.py"},{"start":2927238,"audio":0,"end":2964004,"filename":"/lib/python3.8/unittest/test/test_runner.py"},{"start":2964004,"audio":0,"end":2981082,"filename":"/lib/python3.8/unittest/test/test_assertions.py"},{"start":2981082,"audio":0,"end":2981678,"filename":"/lib/python3.8/unittest/test/__main__.py"},{"start":2981678,"audio":0,"end":2987218,"filename":"/lib/python3.8/unittest/test/test_functiontestcase.py"},{"start":2987218,"audio":0,"end":3059952,"filename":"/lib/python3.8/unittest/test/test_case.py"},{"start":3059952,"audio":0,"end":3076455,"filename":"/lib/python3.8/unittest/test/test_setups.py"},{"start":3076455,"audio":0,"end":3091504,"filename":"/lib/python3.8/unittest/test/test_program.py"},{"start":3091504,"audio":0,"end":3125512,"filename":"/lib/python3.8/unittest/test/test_discovery.py"},{"start":3125512,"audio":0,"end":3137771,"filename":"/lib/python3.8/unittest/test/testmock/testwith.py"},{"start":3137771,"audio":0,"end":3142038,"filename":"/lib/python3.8/unittest/test/testmock/testcallable.py"},{"start":3142038,"audio":0,"end":3142503,"filename":"/lib/python3.8/unittest/test/testmock/__init__.py"},{"start":3142503,"audio":0,"end":3142771,"filename":"/lib/python3.8/unittest/test/testmock/support.py"},{"start":3142771,"audio":0,"end":3147766,"filename":"/lib/python3.8/unittest/test/testmock/testsealable.py"},{"start":3147766,"audio":0,"end":3213751,"filename":"/lib/python3.8/unittest/test/testmock/testmock.py"},{"start":3213751,"audio":0,"end":3214374,"filename":"/lib/python3.8/unittest/test/testmock/__main__.py"},{"start":3214374,"audio":0,"end":3229254,"filename":"/lib/python3.8/unittest/test/testmock/testmagicmethods.py"},{"start":3229254,"audio":0,"end":3261664,"filename":"/lib/python3.8/unittest/test/testmock/testhelpers.py"},{"start":3261664,"audio":0,"end":3317999,"filename":"/lib/python3.8/unittest/test/testmock/testpatch.py"},{"start":3317999,"audio":0,"end":3319324,"filename":"/lib/python3.8/unittest/test/testmock/testsentinel.py"},{"start":3319324,"audio":0,"end":3321357,"filename":"/lib/python3.8/aioconsole/server.py"},{"start":3321357,"audio":0,"end":3322156,"filename":"/lib/python3.8/aioconsole/__init__.py"},{"start":3322156,"audio":0,"end":3326670,"filename":"/lib/python3.8/aioconsole/stream.py"},{"start":3326670,"audio":0,"end":3329672,"filename":"/lib/python3.8/aioconsole/execute.py"},{"start":3329672,"audio":0,"end":3337331,"filename":"/lib/python3.8/aioconsole/code.py"},{"start":3337331,"audio":0,"end":3339909,"filename":"/lib/python3.8/aioconsole/events.py"},{"start":3339909,"audio":0,"end":3339956,"filename":"/lib/python3.8/aioconsole/__main__.py"},{"start":3339956,"audio":0,"end":3342945,"filename":"/lib/python3.8/aioconsole/command.py"},{"start":3342945,"audio":0,"end":3347917,"filename":"/lib/python3.8/aioconsole/apython.py"},{"start":3347917,"audio":0,"end":3348061,"filename":"/lib/python3.8/aioconsole/compat.py"},{"start":3348061,"audio":0,"end":3365718,"filename":"/lib/python3.8/ctypes/__init__.py"},{"start":3365718,"audio":0,"end":3371346,"filename":"/lib/python3.8/ctypes/wintypes.py"},{"start":3371346,"audio":0,"end":3373346,"filename":"/lib/python3.8/ctypes/_endian.py"},{"start":3373346,"audio":0,"end":3385913,"filename":"/lib/python3.8/ctypes/_aix.py"},{"start":3385913,"audio":0,"end":3398992,"filename":"/lib/python3.8/ctypes/util.py"},{"start":3398992,"audio":0,"end":3403925,"filename":"/lib/python3.8/ctypes/macholib/dyld.py"},{"start":3403925,"audio":0,"end":3404009,"filename":"/lib/python3.8/ctypes/macholib/fetch_macholib"},{"start":3404009,"audio":0,"end":3404163,"filename":"/lib/python3.8/ctypes/macholib/__init__.py"},{"start":3404163,"audio":0,"end":3404238,"filename":"/lib/python3.8/ctypes/macholib/fetch_macholib.bat"},{"start":3404238,"audio":0,"end":3404534,"filename":"/lib/python3.8/ctypes/macholib/README.ctypes"},{"start":3404534,"audio":0,"end":3406735,"filename":"/lib/python3.8/ctypes/macholib/framework.py"},{"start":3406735,"audio":0,"end":3408563,"filename":"/lib/python3.8/ctypes/macholib/dylib.py"},{"start":3408563,"audio":0,"end":3410984,"filename":"/lib/python3.8/ctypes/test/test_struct_fields.py"},{"start":3410984,"audio":0,"end":3412007,"filename":"/lib/python3.8/ctypes/test/test_incomplete.py"},{"start":3412007,"audio":0,"end":3413046,"filename":"/lib/python3.8/ctypes/test/test_init.py"},{"start":3413046,"audio":0,"end":3420285,"filename":"/lib/python3.8/ctypes/test/test_pointers.py"},{"start":3420285,"audio":0,"end":3427588,"filename":"/lib/python3.8/ctypes/test/test_strings.py"},{"start":3427588,"audio":0,"end":3429806,"filename":"/lib/python3.8/ctypes/test/test_pickling.py"},{"start":3429806,"audio":0,"end":3431021,"filename":"/lib/python3.8/ctypes/test/test_unaligned_structures.py"},{"start":3431021,"audio":0,"end":3438701,"filename":"/lib/python3.8/ctypes/test/test_cfuncs.py"},{"start":3438701,"audio":0,"end":3439100,"filename":"/lib/python3.8/ctypes/test/__init__.py"},{"start":3439100,"audio":0,"end":3440861,"filename":"/lib/python3.8/ctypes/test/test_unicode.py"},{"start":3440861,"audio":0,"end":3442691,"filename":"/lib/python3.8/ctypes/test/test_macholib.py"},{"start":3442691,"audio":0,"end":3459843,"filename":"/lib/python3.8/ctypes/test/test_structures.py"},{"start":3459843,"audio":0,"end":3461685,"filename":"/lib/python3.8/ctypes/test/test_varsize_struct.py"},{"start":3461685,"audio":0,"end":3462974,"filename":"/lib/python3.8/ctypes/test/test_simplesubclasses.py"},{"start":3462974,"audio":0,"end":3465585,"filename":"/lib/python3.8/ctypes/test/test_buffers.py"},{"start":3465585,"audio":0,"end":3467756,"filename":"/lib/python3.8/ctypes/test/test_errno.py"},{"start":3467756,"audio":0,"end":3469494,"filename":"/lib/python3.8/ctypes/test/test_array_in_pointer.py"},{"start":3469494,"audio":0,"end":3475519,"filename":"/lib/python3.8/ctypes/test/test_slicing.py"},{"start":3475519,"audio":0,"end":3477196,"filename":"/lib/python3.8/ctypes/test/test_objects.py"},{"start":3477196,"audio":0,"end":3479183,"filename":"/lib/python3.8/ctypes/test/test_bytes.py"},{"start":3479183,"audio":0,"end":3486028,"filename":"/lib/python3.8/ctypes/test/test_prototypes.py"},{"start":3486028,"audio":0,"end":3495554,"filename":"/lib/python3.8/ctypes/test/test_numbers.py"},{"start":3495554,"audio":0,"end":3499502,"filename":"/lib/python3.8/ctypes/test/test_find.py"},{"start":3499502,"audio":0,"end":3506832,"filename":"/lib/python3.8/ctypes/test/test_parameters.py"},{"start":3506832,"audio":0,"end":3518243,"filename":"/lib/python3.8/ctypes/test/test_byteswap.py"},{"start":3518243,"audio":0,"end":3522301,"filename":"/lib/python3.8/ctypes/test/test_keeprefs.py"},{"start":3522301,"audio":0,"end":3522369,"filename":"/lib/python3.8/ctypes/test/__main__.py"},{"start":3522369,"audio":0,"end":3532591,"filename":"/lib/python3.8/ctypes/test/test_bitfields.py"},{"start":3532591,"audio":0,"end":3533433,"filename":"/lib/python3.8/ctypes/test/test_repr.py"},{"start":3533433,"audio":0,"end":3542969,"filename":"/lib/python3.8/ctypes/test/test_callbacks.py"},{"start":3542969,"audio":0,"end":3545505,"filename":"/lib/python3.8/ctypes/test/test_stringptr.py"},{"start":3545505,"audio":0,"end":3548136,"filename":"/lib/python3.8/ctypes/test/test_internals.py"},{"start":3548136,"audio":0,"end":3549104,"filename":"/lib/python3.8/ctypes/test/test_checkretval.py"},{"start":3549104,"audio":0,"end":3550570,"filename":"/lib/python3.8/ctypes/test/test_wintypes.py"},{"start":3550570,"audio":0,"end":3551103,"filename":"/lib/python3.8/ctypes/test/test_delattr.py"},{"start":3551103,"audio":0,"end":3558608,"filename":"/lib/python3.8/ctypes/test/test_arrays.py"},{"start":3558608,"audio":0,"end":3561501,"filename":"/lib/python3.8/ctypes/test/test_returnfuncptrs.py"},{"start":3561501,"audio":0,"end":3564328,"filename":"/lib/python3.8/ctypes/test/test_random_things.py"},{"start":3564328,"audio":0,"end":3566904,"filename":"/lib/python3.8/ctypes/test/test_refcounts.py"},{"start":3566904,"audio":0,"end":3567909,"filename":"/lib/python3.8/ctypes/test/test_libc.py"},{"start":3567909,"audio":0,"end":3574828,"filename":"/lib/python3.8/ctypes/test/test_as_parameter.py"},{"start":3574828,"audio":0,"end":3578556,"filename":"/lib/python3.8/ctypes/test/test_cast.py"},{"start":3578556,"audio":0,"end":3587072,"filename":"/lib/python3.8/ctypes/test/test_pep3118.py"},{"start":3587072,"audio":0,"end":3590365,"filename":"/lib/python3.8/ctypes/test/test_memfunctions.py"},{"start":3590365,"audio":0,"end":3593231,"filename":"/lib/python3.8/ctypes/test/test_python_api.py"},{"start":3593231,"audio":0,"end":3598258,"filename":"/lib/python3.8/ctypes/test/test_win32.py"},{"start":3598258,"audio":0,"end":3600798,"filename":"/lib/python3.8/ctypes/test/test_anon.py"},{"start":3600798,"audio":0,"end":3601602,"filename":"/lib/python3.8/ctypes/test/test_sizes.py"},{"start":3601602,"audio":0,"end":3605473,"filename":"/lib/python3.8/ctypes/test/test_values.py"},{"start":3605473,"audio":0,"end":3612433,"filename":"/lib/python3.8/ctypes/test/test_loading.py"},{"start":3612433,"audio":0,"end":3624988,"filename":"/lib/python3.8/ctypes/test/test_functions.py"},{"start":3624988,"audio":0,"end":3630203,"filename":"/lib/python3.8/ctypes/test/test_frombuffer.py"},{"start":3630203,"audio":0,"end":3634229,"filename":"/lib/python3.8/ctypes/test/test_funcptr.py"},{"start":3634229,"audio":0,"end":3645838,"filename":"/lib/python3.8/multiprocessing/synchronize.py"},{"start":3645838,"audio":0,"end":3658218,"filename":"/lib/python3.8/multiprocessing/forkserver.py"},{"start":3658218,"audio":0,"end":3659134,"filename":"/lib/python3.8/multiprocessing/__init__.py"},{"start":3659134,"audio":0,"end":3707866,"filename":"/lib/python3.8/multiprocessing/managers.py"},{"start":3707866,"audio":0,"end":3713218,"filename":"/lib/python3.8/multiprocessing/resource_sharer.py"},{"start":3713218,"audio":0,"end":3724425,"filename":"/lib/python3.8/multiprocessing/context.py"},{"start":3724425,"audio":0,"end":3737115,"filename":"/lib/python3.8/multiprocessing/util.py"},{"start":3737115,"audio":0,"end":3768618,"filename":"/lib/python3.8/multiprocessing/connection.py"},{"start":3768618,"audio":0,"end":3780244,"filename":"/lib/python3.8/multiprocessing/heap.py"},{"start":3780244,"audio":0,"end":3782474,"filename":"/lib/python3.8/multiprocessing/popen_forkserver.py"},{"start":3782474,"audio":0,"end":3784503,"filename":"/lib/python3.8/multiprocessing/popen_spawn_posix.py"},{"start":3784503,"audio":0,"end":3790809,"filename":"/lib/python3.8/multiprocessing/sharedctypes.py"},{"start":3790809,"audio":0,"end":3823169,"filename":"/lib/python3.8/multiprocessing/pool.py"},{"start":3823169,"audio":0,"end":3834859,"filename":"/lib/python3.8/multiprocessing/queues.py"},{"start":3834859,"audio":0,"end":3844371,"filename":"/lib/python3.8/multiprocessing/reduction.py"},{"start":3844371,"audio":0,"end":3846939,"filename":"/lib/python3.8/multiprocessing/popen_fork.py"},{"start":3846939,"audio":0,"end":3858838,"filename":"/lib/python3.8/multiprocessing/process.py"},{"start":3858838,"audio":0,"end":3862849,"filename":"/lib/python3.8/multiprocessing/popen_spawn_win32.py"},{"start":3862849,"audio":0,"end":3872145,"filename":"/lib/python3.8/multiprocessing/spawn.py"},{"start":3872145,"audio":0,"end":3875206,"filename":"/lib/python3.8/multiprocessing/dummy/__init__.py"},{"start":3875206,"audio":0,"end":3876804,"filename":"/lib/python3.8/multiprocessing/dummy/connection.py"},{"start":3876804,"audio":0,"end":3876804,"filename":"/lib/python3.8/urllib/__init__.py"},{"start":3876804,"audio":0,"end":3918384,"filename":"/lib/python3.8/urllib/parse.py"},{"start":3918384,"audio":0,"end":3927808,"filename":"/lib/python3.8/urllib/robotparser.py"},{"start":3927808,"audio":0,"end":4027891,"filename":"/lib/python3.8/urllib/request.py"},{"start":4027891,"audio":0,"end":4030523,"filename":"/lib/python3.8/urllib/error.py"},{"start":4030523,"audio":0,"end":4032822,"filename":"/lib/python3.8/urllib/response.py"},{"start":4032822,"audio":0,"end":4036295,"filename":"/lib/python3.8/asyncio/__init__.py"},{"start":4036295,"audio":0,"end":4040807,"filename":"/lib/python3.8/asyncio/protocols.py"},{"start":4040807,"audio":0,"end":4049666,"filename":"/lib/python3.8/asyncio/base_subprocess.py"},{"start":4049666,"audio":0,"end":4061222,"filename":"/lib/python3.8/asyncio/futures.py"},{"start":4061222,"audio":0,"end":4061595,"filename":"/lib/python3.8/asyncio/constants.py"},{"start":4061595,"audio":0,"end":4063781,"filename":"/lib/python3.8/asyncio/base_tasks.py"},{"start":4063781,"audio":0,"end":4087322,"filename":"/lib/python3.8/asyncio/events.py"},{"start":4087322,"audio":0,"end":4097343,"filename":"/lib/python3.8/asyncio/transports.py"},{"start":4097343,"audio":0,"end":4097467,"filename":"/lib/python3.8/asyncio/log.py"},{"start":4097467,"audio":0,"end":4154574,"filename":"/lib/python3.8/asyncio/base_events.py"},{"start":4154574,"audio":0,"end":4188958,"filename":"/lib/python3.8/asyncio/listactor_events.py"},{"start":4188958,"audio":0,"end":4217389,"filename":"/lib/python3.8/asyncio/windows_events.py"},{"start":4217389,"audio":0,"end":4237106,"filename":"/lib/python3.8/asyncio/proactor_events.py"},{"start":4237106,"audio":0,"end":4244920,"filename":"/lib/python3.8/asyncio/queues.py"},{"start":4244920,"audio":0,"end":4279038,"filename":"/lib/python3.8/asyncio/selector_events.py"},{"start":4279038,"audio":0,"end":4304270,"filename":"/lib/python3.8/asyncio/sslproto.py"},{"start":4304270,"audio":0,"end":4305407,"filename":"/lib/python3.8/asyncio/io.py"},{"start":4305407,"audio":0,"end":4320315,"filename":"/lib/python3.8/asyncio/locks.py"},{"start":4320315,"audio":0,"end":4344853,"filename":"/lib/python3.8/asyncio/tasks.py"},{"start":4344853,"audio":0,"end":4352479,"filename":"/lib/python3.8/asyncio/subprocess.py"},{"start":4352479,"audio":0,"end":4376675,"filename":"/lib/python3.8/asyncio/streams.py"},{"start":4376675,"audio":0,"end":4391086,"filename":"/lib/python3.8/asyncio/test_utils.py"},{"start":4391086,"audio":0,"end":4393160,"filename":"/lib/python3.8/asyncio/base_futures.py"},{"start":4393160,"audio":0,"end":4428504,"filename":"/lib/python3.8/asyncio/unix_events.py"},{"start":4428504,"audio":0,"end":4437304,"filename":"/lib/python3.8/asyncio/coroutines.py"},{"start":4437304,"audio":0,"end":4472853,"filename":"/lib/python3.8/asyncio/emscripten_events.py"},{"start":4472853,"audio":0,"end":4473904,"filename":"/lib/python3.8/encodings/euc_jisx0213.py"},{"start":4473904,"audio":0,"end":4508156,"filename":"/lib/python3.8/encodings/cp863.py"},{"start":4508156,"audio":0,"end":4521724,"filename":"/lib/python3.8/encodings/cp1006.py"},{"start":4521724,"audio":0,"end":4535226,"filename":"/lib/python3.8/encodings/cp1254.py"},{"start":4535226,"audio":0,"end":4569907,"filename":"/lib/python3.8/encodings/cp860.py"},{"start":4569907,"audio":0,"end":4570853,"filename":"/lib/python3.8/encodings/utf_7.py"},{"start":4570853,"audio":0,"end":4584364,"filename":"/lib/python3.8/encodings/cp1252.py"},{"start":4584364,"audio":0,"end":4597997,"filename":"/lib/python3.8/encodings/mac_croatian.py"},{"start":4597997,"audio":0,"end":4599016,"filename":"/lib/python3.8/encodings/big5.py"},{"start":4599016,"audio":0,"end":4612514,"filename":"/lib/python3.8/encodings/mac_iceland.py"},{"start":4612514,"audio":0,"end":4613813,"filename":"/lib/python3.8/encodings/undefined.py"},{"start":4613813,"audio":0,"end":4627945,"filename":"/lib/python3.8/encodings/cp273.py"},{"start":4627945,"audio":0,"end":4641121,"filename":"/lib/python3.8/encodings/iso8859_1.py"},{"start":4641121,"audio":0,"end":4642144,"filename":"/lib/python3.8/encodings/cp932.py"},{"start":4642144,"audio":0,"end":4647732,"filename":"/lib/python3.8/encodings/__init__.py"},{"start":4647732,"audio":0,"end":4661393,"filename":"/lib/python3.8/encodings/mac_romanian.py"},{"start":4661393,"audio":0,"end":4662323,"filename":"/lib/python3.8/encodings/utf_32_be.py"},{"start":4662323,"audio":0,"end":4663362,"filename":"/lib/python3.8/encodings/big5hkscs.py"},{"start":4663362,"audio":0,"end":4676633,"filename":"/lib/python3.8/encodings/iso8859_13.py"},{"start":4676633,"audio":0,"end":4681869,"filename":"/lib/python3.8/encodings/utf_16.py"},{"start":4681869,"audio":0,"end":4688750,"filename":"/lib/python3.8/encodings/punycode.py"},{"start":4688750,"audio":0,"end":4702471,"filename":"/lib/python3.8/encodings/mac_greek.py"},{"start":4702471,"audio":0,"end":4715565,"filename":"/lib/python3.8/encodings/cp1253.py"},{"start":4715565,"audio":0,"end":4750162,"filename":"/lib/python3.8/encodings/cp1125.py"},{"start":4750162,"audio":0,"end":4763924,"filename":"/lib/python3.8/encodings/koi8_u.py"},{"start":4763924,"audio":0,"end":4776347,"filename":"/lib/python3.8/encodings/cp856.py"},{"start":4776347,"audio":0,"end":4789503,"filename":"/lib/python3.8/encodings/iso8859_9.py"},{"start":4789503,"audio":0,"end":4802592,"filename":"/lib/python3.8/encodings/iso8859_3.py"},{"start":4802592,"audio":0,"end":4836988,"filename":"/lib/python3.8/encodings/cp866.py"},{"start":4836988,"audio":0,"end":4838049,"filename":"/lib/python3.8/encodings/iso2022_jp_2.py"},{"start":4838049,"audio":0,"end":4851638,"filename":"/lib/python3.8/encodings/iso8859_10.py"},{"start":4851638,"audio":0,"end":4852886,"filename":"/lib/python3.8/encodings/ascii.py"},{"start":4852886,"audio":0,"end":4862056,"filename":"/lib/python3.8/encodings/idna.py"},{"start":4862056,"audio":0,"end":4863079,"filename":"/lib/python3.8/encodings/cp950.py"},{"start":4863079,"audio":0,"end":4897712,"filename":"/lib/python3.8/encodings/cp861.py"},{"start":4897712,"audio":0,"end":4898773,"filename":"/lib/python3.8/encodings/iso2022_jp_1.py"},{"start":4898773,"audio":0,"end":4900298,"filename":"/lib/python3.8/encodings/quopri_codec.py"},{"start":4900298,"audio":0,"end":4915911,"filename":"/lib/python3.8/encodings/aliases.py"},{"start":4915911,"audio":0,"end":4929024,"filename":"/lib/python3.8/encodings/cp1026.py"},{"start":4929024,"audio":0,"end":4930063,"filename":"/lib/python3.8/encodings/shift_jis.py"},{"start":4930063,"audio":0,"end":4942917,"filename":"/lib/python3.8/encodings/cp875.py"},{"start":4942917,"audio":0,"end":4956569,"filename":"/lib/python3.8/encodings/iso8859_14.py"},{"start":4956569,"audio":0,"end":4969413,"filename":"/lib/python3.8/encodings/iso8859_7.py"},{"start":4969413,"audio":0,"end":4970436,"filename":"/lib/python3.8/encodings/cp949.py"},{"start":4970436,"audio":0,"end":4984538,"filename":"/lib/python3.8/encodings/mac_centeuro.py"},{"start":4984538,"audio":0,"end":4997899,"filename":"/lib/python3.8/encodings/cp1251.py"},{"start":4997899,"audio":0,"end":4998950,"filename":"/lib/python3.8/encodings/euc_jis_2004.py"},{"start":4998950,"audio":0,"end":5012314,"filename":"/lib/python3.8/encodings/cp1258.py"},{"start":5012314,"audio":0,"end":5024369,"filename":"/lib/python3.8/encodings/cp424.py"},{"start":5024369,"audio":0,"end":5025406,"filename":"/lib/python3.8/encodings/utf_16_be.py"},{"start":5025406,"audio":0,"end":5038782,"filename":"/lib/python3.8/encodings/iso8859_4.py"},{"start":5038782,"audio":0,"end":5039993,"filename":"/lib/python3.8/encodings/mbcs.py"},{"start":5039993,"audio":0,"end":5041054,"filename":"/lib/python3.8/encodings/iso2022_jp_3.py"},{"start":5041054,"audio":0,"end":5054159,"filename":"/lib/python3.8/encodings/cp1140.py"},{"start":5054159,"audio":0,"end":5066625,"filename":"/lib/python3.8/encodings/cp1255.py"},{"start":5066625,"audio":0,"end":5067656,"filename":"/lib/python3.8/encodings/gb18030.py"},{"start":5067656,"audio":0,"end":5104123,"filename":"/lib/python3.8/encodings/mac_arabic.py"},{"start":5104123,"audio":0,"end":5117335,"filename":"/lib/python3.8/encodings/iso8859_15.py"},{"start":5117335,"audio":0,"end":5150998,"filename":"/lib/python3.8/encodings/cp864.py"},{"start":5150998,"audio":0,"end":5156127,"filename":"/lib/python3.8/encodings/utf_32.py"},{"start":5156127,"audio":0,"end":5157391,"filename":"/lib/python3.8/encodings/latin_1.py"},{"start":5157391,"audio":0,"end":5158450,"filename":"/lib/python3.8/encodings/shift_jis_2004.py"},{"start":5158450,"audio":0,"end":5172568,"filename":"/lib/python3.8/encodings/mac_latin2.py"},{"start":5172568,"audio":0,"end":5174772,"filename":"/lib/python3.8/encodings/zlib_codec.py"},{"start":5174772,"audio":0,"end":5175831,"filename":"/lib/python3.8/encodings/shift_jisx0213.py"},{"start":5175831,"audio":0,"end":5189517,"filename":"/lib/python3.8/encodings/cp720.py"},{"start":5189517,"audio":0,"end":5190586,"filename":"/lib/python3.8/encodings/iso2022_jp_ext.py"},{"start":5190586,"audio":0,"end":5202886,"filename":"/lib/python3.8/encodings/tis_620.py"},{"start":5202886,"audio":0,"end":5204070,"filename":"/lib/python3.8/encodings/unicode_escape.py"},{"start":5204070,"audio":0,"end":5205e3,"filename":"/lib/python3.8/encodings/utf_32_le.py"},{"start":5205e3,"audio":0,"end":5218779,"filename":"/lib/python3.8/encodings/koi8_r.py"},{"start":5218779,"audio":0,"end":5222912,"filename":"/lib/python3.8/encodings/utf_8_sig.py"},{"start":5222912,"audio":0,"end":5236105,"filename":"/lib/python3.8/encodings/koi8_t.py"},{"start":5236105,"audio":0,"end":5251275,"filename":"/lib/python3.8/encodings/mac_farsi.py"},{"start":5251275,"audio":0,"end":5252348,"filename":"/lib/python3.8/encodings/iso2022_jp_2004.py"},{"start":5252348,"audio":0,"end":5286256,"filename":"/lib/python3.8/encodings/cp857.py"},{"start":5286256,"audio":0,"end":5299813,"filename":"/lib/python3.8/encodings/iso8859_16.py"},{"start":5299813,"audio":0,"end":5334494,"filename":"/lib/python3.8/encodings/cp737.py"},{"start":5334494,"audio":0,"end":5368509,"filename":"/lib/python3.8/encodings/cp858.py"},{"start":5368509,"audio":0,"end":5370758,"filename":"/lib/python3.8/encodings/bz2_codec.py"},{"start":5370758,"audio":0,"end":5403723,"filename":"/lib/python3.8/encodings/cp869.py"},{"start":5403723,"audio":0,"end":5404734,"filename":"/lib/python3.8/encodings/hz.py"},{"start":5404734,"audio":0,"end":5418138,"filename":"/lib/python3.8/encodings/iso8859_2.py"},{"start":5418138,"audio":0,"end":5431259,"filename":"/lib/python3.8/encodings/cp037.py"},{"start":5431259,"audio":0,"end":5444073,"filename":"/lib/python3.8/encodings/cp1256.py"},{"start":5444073,"audio":0,"end":5446794,"filename":"/lib/python3.8/encodings/uu_codec.py"},{"start":5446794,"audio":0,"end":5457830,"filename":"/lib/python3.8/encodings/iso8859_8.py"},{"start":5457830,"audio":0,"end":5458857,"filename":"/lib/python3.8/encodings/euc_jp.py"},{"start":5458857,"audio":0,"end":5472872,"filename":"/lib/python3.8/encodings/ptcp154.py"},{"start":5472872,"audio":0,"end":5475320,"filename":"/lib/python3.8/encodings/rot_13.py"},{"start":5475320,"audio":0,"end":5489043,"filename":"/lib/python3.8/encodings/kz1048.py"},{"start":5489043,"audio":0,"end":5501378,"filename":"/lib/python3.8/encodings/iso8859_11.py"},{"start":5501378,"audio":0,"end":5535854,"filename":"/lib/python3.8/encodings/cp775.py"},{"start":5535854,"audio":0,"end":5537387,"filename":"/lib/python3.8/encodings/base64_codec.py"},{"start":5537387,"audio":0,"end":5539471,"filename":"/lib/python3.8/encodings/charmap.py"},{"start":5539471,"audio":0,"end":5540498,"filename":"/lib/python3.8/encodings/gb2312.py"},{"start":5540498,"audio":0,"end":5553093,"filename":"/lib/python3.8/encodings/cp874.py"},{"start":5553093,"audio":0,"end":5587198,"filename":"/lib/python3.8/encodings/cp850.py"},{"start":5587198,"audio":0,"end":5621816,"filename":"/lib/python3.8/encodings/cp865.py"},{"start":5621816,"audio":0,"end":5656380,"filename":"/lib/python3.8/encodings/cp437.py"},{"start":5656380,"audio":0,"end":5657588,"filename":"/lib/python3.8/encodings/raw_unicode_escape.py"},{"start":5657588,"audio":0,"end":5670709,"filename":"/lib/python3.8/encodings/cp500.py"},{"start":5670709,"audio":0,"end":5684163,"filename":"/lib/python3.8/encodings/mac_cyrillic.py"},{"start":5684163,"audio":0,"end":5697682,"filename":"/lib/python3.8/encodings/palmos.py"},{"start":5697682,"audio":0,"end":5711157,"filename":"/lib/python3.8/encodings/hp_roman8.py"},{"start":5711157,"audio":0,"end":5721990,"filename":"/lib/python3.8/encodings/iso8859_6.py"},{"start":5721990,"audio":0,"end":5735470,"filename":"/lib/python3.8/encodings/mac_roman.py"},{"start":5735470,"audio":0,"end":5736523,"filename":"/lib/python3.8/encodings/iso2022_jp.py"},{"start":5736523,"audio":0,"end":5737550,"filename":"/lib/python3.8/encodings/euc_kr.py"},{"start":5737550,"audio":0,"end":5772552,"filename":"/lib/python3.8/encodings/cp852.py"},{"start":5772552,"audio":0,"end":5773557,"filename":"/lib/python3.8/encodings/utf_8.py"},{"start":5773557,"audio":0,"end":5775065,"filename":"/lib/python3.8/encodings/hex_codec.py"},{"start":5775065,"audio":0,"end":5788080,"filename":"/lib/python3.8/encodings/iso8859_5.py"},{"start":5788080,"audio":0,"end":5801454,"filename":"/lib/python3.8/encodings/cp1257.py"},{"start":5801454,"audio":0,"end":5802473,"filename":"/lib/python3.8/encodings/oem.py"},{"start":5802473,"audio":0,"end":5835843,"filename":"/lib/python3.8/encodings/cp862.py"},{"start":5835843,"audio":0,"end":5836866,"filename":"/lib/python3.8/encodings/johab.py"},{"start":5836866,"audio":0,"end":5837919,"filename":"/lib/python3.8/encodings/iso2022_kr.py"},{"start":5837919,"audio":0,"end":5851605,"filename":"/lib/python3.8/encodings/cp1250.py"},{"start":5851605,"audio":0,"end":5852642,"filename":"/lib/python3.8/encodings/utf_16_le.py"},{"start":5852642,"audio":0,"end":5853657,"filename":"/lib/python3.8/encodings/gbk.py"},{"start":5853657,"audio":0,"end":5887507,"filename":"/lib/python3.8/encodings/cp855.py"},{"start":5887507,"audio":0,"end":5901020,"filename":"/lib/python3.8/encodings/mac_turkish.py"},{"start":5901020,"audio":0,"end":5901058,"filename":"/lib/python3.8/concurrent/__init__.py"},{"start":5901058,"audio":0,"end":5902612,"filename":"/lib/python3.8/concurrent/futures/__init__.py"},{"start":5902612,"audio":0,"end":5925084,"filename":"/lib/python3.8/concurrent/futures/_base.py"},{"start":5925084,"audio":0,"end":5933852,"filename":"/lib/python3.8/concurrent/futures/thread.py"},{"start":5933852,"audio":0,"end":5962134,"filename":"/lib/python3.8/concurrent/futures/process.py"},{"start":5962134,"audio":0,"end":5962134,"filename":"/lib/python3.8/pydoc_data/__init__.py"},{"start":5962134,"audio":0,"end":5962230,"filename":"/lib/python3.8/pydoc_data/_pydoc.css"},{"start":5962230,"audio":0,"end":6629397,"filename":"/lib/python3.8/pydoc_data/topics.py"},{"start":6629397,"audio":0,"end":6643742,"filename":"/lib/python3.8/json/__init__.py"},{"start":6643742,"audio":0,"end":6659814,"filename":"/lib/python3.8/json/encoder.py"},{"start":6659814,"audio":0,"end":6661671,"filename":"/lib/python3.8/json/tool.py"},{"start":6661671,"audio":0,"end":6674143,"filename":"/lib/python3.8/json/decoder.py"},{"start":6674143,"audio":0,"end":6676568,"filename":"/lib/python3.8/json/scanner.py"}],"remote_package_size":6676568,"package_uuid":"cb542ec2-60f7-421f-8afc-e41bd61ab852"})})();var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram="./this.program";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=true;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;if(Module["ENVIRONMENT"]){throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)")}var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1)}else{scriptDirectory=""}if(!(typeof window==="object"||typeof importScripts==="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)};setWindowTitle=function(title){document.title=title}}else{throw new Error("environment detection error")}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(!Object.getOwnPropertyDescriptor(Module,"arguments"))Object.defineProperty(Module,"arguments",{get:function(){abort("Module.arguments has been replaced with plain arguments_")}});if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(!Object.getOwnPropertyDescriptor(Module,"thisProgram"))Object.defineProperty(Module,"thisProgram",{get:function(){abort("Module.thisProgram has been replaced with plain thisProgram")}});if(Module["quit"])quit_=Module["quit"];if(!Object.getOwnPropertyDescriptor(Module,"quit"))Object.defineProperty(Module,"quit",{get:function(){abort("Module.quit has been replaced with plain quit_")}});assert(typeof Module["memoryInitializerPrefixURL"]==="undefined","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["pthreadMainPrefixURL"]==="undefined","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["cdInitializerPrefixURL"]==="undefined","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["filePackagePrefixURL"]==="undefined","Module.filePackagePrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["read"]==="undefined","Module.read option was removed (modify read_ in JS)");assert(typeof Module["readAsync"]==="undefined","Module.readAsync option was removed (modify readAsync in JS)");assert(typeof Module["readBinary"]==="undefined","Module.readBinary option was removed (modify readBinary in JS)");assert(typeof Module["setWindowTitle"]==="undefined","Module.setWindowTitle option was removed (modify setWindowTitle in JS)");if(!Object.getOwnPropertyDescriptor(Module,"read"))Object.defineProperty(Module,"read",{get:function(){abort("Module.read has been replaced with plain read_")}});if(!Object.getOwnPropertyDescriptor(Module,"readAsync"))Object.defineProperty(Module,"readAsync",{get:function(){abort("Module.readAsync has been replaced with plain readAsync")}});if(!Object.getOwnPropertyDescriptor(Module,"readBinary"))Object.defineProperty(Module,"readBinary",{get:function(){abort("Module.readBinary has been replaced with plain readBinary")}});var STACK_ALIGN=16;stackSave=stackRestore=stackAlloc=function(){abort("cannot use the stack before compiled code is ready to run, and has provided stack access")};function dynamicAlloc(size){assert(DYNAMICTOP_PTR);var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=ret+size+15&-16;if(end>_emscripten_get_heap_size()){abort("failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly")}HEAP32[DYNAMICTOP_PTR>>2]=end;return ret}function getNativeTypeSize(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return 4}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0,"getNativeTypeSize invalid bits "+bits+", type "+type);return bits/8}else{return 0}}}}function warnOnce(text){if(!warnOnce.shown)warnOnce.shown={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}}function convertJsFunctionToWasm(func,sig){var typeSection=[1,0,1,96];var sigRet=sig.slice(0,1);var sigParam=sig.slice(1);var typeCodes={"i":127,"j":126,"f":125,"d":124};typeSection.push(sigParam.length);for(var i=0;i<sigParam.length;++i){typeSection.push(typeCodes[sigParam[i]])}if(sigRet=="v"){typeSection.push(0)}else{typeSection=typeSection.concat([1,typeCodes[sigRet]])}typeSection[1]=typeSection.length-2;var bytes=new Uint8Array([0,97,115,109,1,0,0,0].concat(typeSection,[2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0]));var module=new WebAssembly.Module(bytes);var instance=new WebAssembly.Instance(module,{e:{f:func}});var wrappedFunc=instance.exports.f;return wrappedFunc}function addFunctionWasm(func,sig){var table=wasmTable;var ret=table.length;try{table.grow(1)}catch(err){if(!err instanceof RangeError){throw err}throw"Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH."}try{table.set(ret,func)}catch(err){if(!err instanceof TypeError){throw err}assert(typeof sig!=="undefined","Missing signature argument to addFunction");var wrapped=convertJsFunctionToWasm(func,sig);table.set(ret,wrapped)}return ret}function removeFunctionWasm(index){}var funcWrappers={};function dynCall(sig,ptr,args){if(args&&args.length){assert(args.length==sig.length-1);assert("dynCall_"+sig in Module,"bad function pointer type - no table for sig '"+sig+"'");return Module["dynCall_"+sig].apply(null,[ptr].concat(args))}else{assert(sig.length==1);assert("dynCall_"+sig in Module,"bad function pointer type - no table for sig '"+sig+"'");return Module["dynCall_"+sig].call(null,ptr)}}var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];if(!Object.getOwnPropertyDescriptor(Module,"wasmBinary"))Object.defineProperty(Module,"wasmBinary",{get:function(){abort("Module.wasmBinary has been replaced with plain wasmBinary")}});var noExitRuntime;if(Module["noExitRuntime"])noExitRuntime=Module["noExitRuntime"];if(!Object.getOwnPropertyDescriptor(Module,"noExitRuntime"))Object.defineProperty(Module,"noExitRuntime",{get:function(){abort("Module.noExitRuntime has been replaced with plain noExitRuntime")}});if(typeof WebAssembly!=="object"){abort("No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.")}function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for getValue: "+type)}return null}var wasmMemory;var wasmTable;var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function getCFunc(ident){var func=Module["_"+ident];assert(func,"Cannot call unknown function "+ident+", make sure it is exported");return func}function ccall(ident,returnType,argTypes,args,opts){var toC={"string":function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret},"array":function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType==="string")return UTF8ToString(ret);if(returnType==="boolean")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;assert(returnType!=="array",'Return type should not be "array".');if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);ret=convertReturnValue(ret);if(stack!==0)stackRestore(stack);return ret}function cwrap(ident,returnType,argTypes,opts){return function(){return ccall(ident,returnType,argTypes,arguments,opts)}}var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_NONE=3;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[_malloc,stackAlloc,dynamicAlloc][allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var stop;ptr=ret;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];type=singleType||types[i];if(type===0){i++;continue}assert(type,"Must know what type to store in allocate!");if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}function getMemory(size){if(!runtimeInitialized)return dynamicAlloc(size);return _malloc(size)}function AsciiToString(ptr){var str="";while(1){var ch=HEAPU8[ptr++>>0];if(!ch)return str;str+=String.fromCharCode(ch)}}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(u8Array,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(u8Array[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var str="";while(idx<endPtr){var u0=u8Array[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{if((u0&248)!=240)warnOnce("Invalid UTF-8 leading byte 0x"+u0.toString(16)+" encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!");u0=(u0&7)<<18|u1<<12|u2<<6|u8Array[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;if(u>=2097152)warnOnce("Invalid Unicode code point 0x"+u.toString(16)+" encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).");outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){assert(typeof maxBytesToWrite=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function allocateUTF8OnStack(str){var size=lengthBytesUTF8(str)+1;var ret=stackAlloc(size);stringToUTF8Array(str,HEAP8,ret,size);return ret}function writeArrayToMemory(array,buffer){assert(array.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)");HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){assert(str.charCodeAt(i)===str.charCodeAt(i)&255);HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}var PAGE_SIZE=16384;var WASM_PAGE_SIZE=65536;var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf)}var STACK_BASE=16625120,STACK_MAX=1945056,DYNAMIC_BASE=16625120,DYNAMICTOP_PTR=1945040;assert(STACK_BASE%16===0,"stack must start aligned");assert(DYNAMIC_BASE%16===0,"heap must start aligned");var TOTAL_STACK=14680064;if(Module["TOTAL_STACK"])assert(TOTAL_STACK===Module["TOTAL_STACK"],"the stack size can no longer be determined at runtime");var INITIAL_TOTAL_MEMORY=Module["TOTAL_MEMORY"]||536870912;if(!Object.getOwnPropertyDescriptor(Module,"TOTAL_MEMORY"))Object.defineProperty(Module,"TOTAL_MEMORY",{get:function(){abort("Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY")}});assert(INITIAL_TOTAL_MEMORY>=TOTAL_STACK,"TOTAL_MEMORY should be larger than TOTAL_STACK, was "+INITIAL_TOTAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")");assert(typeof Int32Array!=="undefined"&&typeof Float64Array!=="undefined"&&Int32Array.prototype.subarray!==undefined&&Int32Array.prototype.set!==undefined,"JS engine does not provide full typed array support");if(Module["wasmMemory"]){wasmMemory=Module["wasmMemory"]}else{wasmMemory=new WebAssembly.Memory({"initial":INITIAL_TOTAL_MEMORY/WASM_PAGE_SIZE,"maximum":INITIAL_TOTAL_MEMORY/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_TOTAL_MEMORY=buffer.byteLength;assert(INITIAL_TOTAL_MEMORY%WASM_PAGE_SIZE===0);updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function writeStackCookie(){assert((STACK_MAX&3)==0);HEAPU32[(STACK_MAX>>2)+1]=34821223;HEAPU32[(STACK_MAX>>2)+2]=2310721022}function checkStackCookie(){var cookie1=HEAPU32[(STACK_MAX>>2)+1];var cookie2=HEAPU32[(STACK_MAX>>2)+2];if(cookie1!=34821223||cookie2!=2310721022){abort("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x"+cookie2.toString(16)+" "+cookie1.toString(16))}if(HEAP32[0]!==1668509029)abort("Runtime error: The application has corrupted its heap memory area (address zero)!")}HEAP32[0]=1668509029;HEAP16[1]=25459;if(HEAPU8[2]!==115||HEAPU8[3]!==99)throw"Runtime error: expected the system to be little-endian!";function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func)}else{Module["dynCall_vi"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){checkStackCookie();assert(!runtimeInitialized);runtimeInitialized=true;if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();TTY.init();SOCKFS.root=FS.mount(SOCKFS,{},null);PIPEFS.root=FS.mount(PIPEFS,{},null);callRuntimeCallbacks(__ATINIT__)}function preMain(){checkStackCookie();FS.ignorePermissions=false;callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){checkStackCookie();runtimeExited=true}function postRun(){checkStackCookie();if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}assert(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");assert(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");assert(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");assert(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;var runDependencyTracking={};function getUniqueRunDependency(id){var orig=id;while(1){if(!runDependencyTracking[id])return id;id=orig+Math.random()}return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(id){assert(!runDependencyTracking[id]);runDependencyTracking[id]=1;if(runDependencyWatcher===null&&typeof setInterval!=="undefined"){runDependencyWatcher=setInterval(function(){if(ABORT){clearInterval(runDependencyWatcher);runDependencyWatcher=null;return}var shown=false;for(var dep in runDependencyTracking){if(!shown){shown=true;err("still waiting on run dependencies:")}err("dependency: "+dep)}if(shown){err("(end of list)")}},1e4)}}else{err("warning: run dependency added without ID")}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(id){assert(runDependencyTracking[id]);delete runDependencyTracking[id]}else{err("warning: run dependency removed without ID")}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}var wasmBinaryFile="python.wasm";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw"both async and sync fetching of the wasm failed"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(env){var info={"env":env,"wasi_unstable":env};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");var trueModule=Module;function receiveInstantiatedSource(output){assert(Module===trueModule,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");trueModule=null;receiveInstance(output["instance"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&typeof fetch==="function"){fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}instantiateAsync();return{}}Module["asm"]=function(global,env,providedBuffer){env["memory"]=wasmMemory;env["table"]=wasmTable=new WebAssembly.Table({"initial":3085,"maximum":3085+0,"element":"anyfunc"});var exports=createWasm(env);assert(exports,"binaryen setup failed (no wasm support?)");return exports};var tempDouble;var tempI64;var ASM_CONSTS=[function($0,$1,$2){window.plink.shm=$0;window.plink.io_port_kbd=$1;window.PyRun_SimpleString_MAXSIZE=$2;console.log("window.plink.shm="+window.plink.shm);console.log("window.plink.io_port_kbd="+window.plink.io_port_kbd)},function($0,$1){dyld_lzma(UTF8ToString($0)+".js.lzma",UTF8ToString($0),$1)},function($0){return undef(UTF8ToString($0))},function(){if(window.plink)console.log("js support already included");else{console.log("include(begin)");var fileref=document.createElement("script");fileref.setAttribute("type","text/javascript");fileref.setAttribute("src","./pp/pythons.js");fileref.setAttribute("async",false);fileref.defer=false;document.getElementsByTagName("head")[0].appendChild(fileref);console.log("include(end)")}},function(){console.log("clockpatch(begin)");console.log("clockpatch(end)")},function($0){return Module.printErr(UTF8ToString($0))},function($0){return kbd_getch_i($0)},function($0){return Module.kbd_has_io($0)}];function _emscripten_asm_const_iii(code,sig_ptr,argbuf){var sig=AsciiToString(sig_ptr);var args=[];var align_to=function(ptr,align){return ptr+align-1&~(align-1)};var buf=argbuf;for(var i=0;i<sig.length;i++){var c=sig[i];if(c=="d"||c=="f"){buf=align_to(buf,8);args.push(HEAPF64[buf>>3]);buf+=8}else if(c=="i"){buf=align_to(buf,4);args.push(HEAP32[buf>>2]);buf+=4}}return ASM_CONSTS[code].apply(null,args)}__ATINIT__.push({func:function(){___wasm_call_ctors()}});function demangle(func){var __cxa_demangle_func=Module["___cxa_demangle"]||Module["__cxa_demangle"];assert(__cxa_demangle_func);try{var s=func;if(s.startsWith("__Z"))s=s.substr(1);var len=lengthBytesUTF8(s)+1;var buf=_malloc(len);stringToUTF8(s,buf,len);var status=_malloc(4);var ret=__cxa_demangle_func(buf,0,0,status);if(HEAP32[status>>2]===0&&ret){return UTF8ToString(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}return func}Module["demangle"]=demangle;function demangleAll(text){var regex=/\b_Z[\w\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+" ["+x+"]"})}Module["demangleAll"]=demangleAll;function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}Module["jsStackTrace"]=jsStackTrace;function stackTrace(){var js=jsStackTrace();if(Module["extraStackTrace"])js+="\n"+Module["extraStackTrace"]();return demangleAll(js)}Module["stackTrace"]=stackTrace;var ENV={};Module["ENV"]=ENV;function ___buildEnvironment(environ){var MAX_ENV_VALUES=64;var TOTAL_ENV_SIZE=1024;var poolPtr;var envPtr;if(!___buildEnvironment.called){___buildEnvironment.called=true;ENV["USER"]=ENV["LOGNAME"]="web_user";ENV["PATH"]="/";ENV["PWD"]="/";ENV["HOME"]="/home/web_user";ENV["LANG"]=(typeof navigator==="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8";ENV["_"]=thisProgram;poolPtr=getMemory(TOTAL_ENV_SIZE);envPtr=getMemory(MAX_ENV_VALUES*4);HEAP32[envPtr>>2]=poolPtr;HEAP32[environ>>2]=envPtr}else{envPtr=HEAP32[environ>>2];poolPtr=HEAP32[envPtr>>2]}var strings=[];var totalSize=0;for(var key in ENV){if(typeof ENV[key]==="string"){var line=key+"="+ENV[key];strings.push(line);totalSize+=line.length}}if(totalSize>TOTAL_ENV_SIZE){throw new Error("Environment size exceeded TOTAL_ENV_SIZE!")}var ptrSize=4;for(var i=0;i<strings.length;i++){var line=strings[i];writeAsciiToMemory(line,poolPtr);HEAP32[envPtr+i*ptrSize>>2]=poolPtr;poolPtr+=line.length+1}HEAP32[envPtr+strings.length*ptrSize>>2]=0}Module["___buildEnvironment"]=___buildEnvironment;function ___cxa_allocate_exception(size){return _malloc(size)}Module["___cxa_allocate_exception"]=___cxa_allocate_exception;var ___exception_infos={};Module["___exception_infos"]=___exception_infos;var ___exception_caught=[];Module["___exception_caught"]=___exception_caught;function ___exception_addRef(ptr){if(!ptr)return;var info=___exception_infos[ptr];info.refcount++}Module["___exception_addRef"]=___exception_addRef;function ___exception_deAdjust(adjusted){if(!adjusted||___exception_infos[adjusted])return adjusted;for(var key in ___exception_infos){var ptr=+key;var adj=___exception_infos[ptr].adjusted;var len=adj.length;for(var i=0;i<len;i++){if(adj[i]===adjusted){return ptr}}}return adjusted}Module["___exception_deAdjust"]=___exception_deAdjust;function __ZSt18uncaught_exceptionv(){return __ZSt18uncaught_exceptionv.uncaught_exceptions>0}Module["__ZSt18uncaught_exceptionv"]=__ZSt18uncaught_exceptionv;function ___cxa_begin_catch(ptr){var info=___exception_infos[ptr];if(info&&!info.caught){info.caught=true;__ZSt18uncaught_exceptionv.uncaught_exceptions--}if(info)info.rethrown=false;___exception_caught.push(ptr);___exception_addRef(___exception_deAdjust(ptr));return ptr}Module["___cxa_begin_catch"]=___cxa_begin_catch;function ___cxa_pure_virtual(){ABORT=true;throw"Pure virtual function called!"}Module["___cxa_pure_virtual"]=___cxa_pure_virtual;var ___exception_last=0;Module["___exception_last"]=___exception_last;function ___cxa_throw(ptr,type,destructor){___exception_infos[ptr]={ptr:ptr,adjusted:[ptr],type:type,destructor:destructor,refcount:0,caught:false,rethrown:false};___exception_last=ptr;if(!("uncaught_exception"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exceptions=1}else{__ZSt18uncaught_exceptionv.uncaught_exceptions++}throw ptr+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}Module["___cxa_throw"]=___cxa_throw;function ___libc_current_sigrtmax(){err("Calling stub instead of __libc_current_sigrtmax");return 0}Module["___libc_current_sigrtmax"]=___libc_current_sigrtmax;function ___libc_current_sigrtmin(){err("Calling stub instead of __libc_current_sigrtmin");return 0}Module["___libc_current_sigrtmin"]=___libc_current_sigrtmin;function ___lock(){}Module["___lock"]=___lock;function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;else err("failed to set errno from JS");return value}Module["___setErrNo"]=___setErrNo;function ___map_file(pathname,size){___setErrNo(1);return-1}Module["___map_file"]=___map_file;var PATH={splitPath:function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path==="/")return"/";var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)}};Module["PATH"]=PATH;var PATH_FS={resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(function(p){return!!p}),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."},relative:function(from,to){from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};Module["PATH_FS"]=PATH_FS;var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(19)}stream.tty=tty;stream.seekable=false},close:function(stream){stream.tty.ops.flush(stream.tty)},flush:function(stream){stream.tty.ops.flush(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(6)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(5)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(11)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(6)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(5)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};Module["TTY"]=TTY;var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(1)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node}return node},getFileDataAsRegularArray:function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array;if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)|0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(new ArrayBuffer(newSize));if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup:function(parent,name){throw FS.genericErrors[2]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(39)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir},unlink:function(parent,name){delete parent.contents[name]},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(39)}delete parent.contents[name]},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(22)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);assert(size>=0);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write:function(stream,buffer,offset,length,position,canOwn){if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){assert(position===0,"canOwn must imply no weird position inside the file");node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=new Uint8Array(buffer.subarray(offset,offset+length));node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(22)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap:function(stream,buffer,offset,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(19)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&(contents.buffer===buffer||contents.buffer===buffer.buffer)){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<stream.node.usedBytes){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;var fromHeap=buffer.buffer==HEAP8.buffer;ptr=_malloc(length);if(!ptr){throw new FS.ErrnoError(12)}(fromHeap?HEAP8:buffer).set(contents,ptr)}return{ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(19)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};Module["MEMFS"]=MEMFS;var IDBFS={dbs:{},indexedDB:function(){if(typeof indexedDB!=="undefined")return indexedDB;var ret=null;if(typeof window==="object")ret=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;assert(ret,"IDBFS used, but indexedDB not supported");return ret},DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function(mount){return MEMFS.mount.apply(null,arguments)},syncfs:function(mount,populate,callback){IDBFS.getLocalSet(mount,function(err,local){if(err)return callback(err);IDBFS.getRemoteSet(mount,function(err,remote){if(err)return callback(err);var src=populate?remote:local;var dst=populate?local:remote;IDBFS.reconcile(src,dst,callback)})})},getDB:function(name,callback){var db=IDBFS.dbs[name];if(db){return callback(null,db)}var req;try{req=IDBFS.indexedDB().open(name,IDBFS.DB_VERSION)}catch(e){return callback(e)}if(!req){return callback("Unable to connect to IndexedDB")}req.onupgradeneeded=function(e){var db=e.target.result;var transaction=e.target.transaction;var fileStore;if(db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)){fileStore=transaction.objectStore(IDBFS.DB_STORE_NAME)}else{fileStore=db.createObjectStore(IDBFS.DB_STORE_NAME)}if(!fileStore.indexNames.contains("timestamp")){fileStore.createIndex("timestamp","timestamp",{unique:false})}};req.onsuccess=function(){db=req.result;IDBFS.dbs[name]=db;callback(null,db)};req.onerror=function(e){callback(this.error);e.preventDefault()}},getLocalSet:function(mount,callback){var entries={};function isRealDir(p){return p!=="."&&p!==".."}function toAbsolute(root){return function(p){return PATH.join2(root,p)}}var check=FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));while(check.length){var path=check.pop();var stat;try{stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){check.push.apply(check,FS.readdir(path).filter(isRealDir).map(toAbsolute(path)))}entries[path]={timestamp:stat.mtime}}return callback(null,{type:"local",entries:entries})},getRemoteSet:function(mount,callback){var entries={};IDBFS.getDB(mount.mountpoint,function(err,db){if(err)return callback(err);try{var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readonly");transaction.onerror=function(e){callback(this.error);e.preventDefault()};var store=transaction.objectStore(IDBFS.DB_STORE_NAME);var index=store.index("timestamp");index.openKeyCursor().onsuccess=function(event){var cursor=event.target.result;if(!cursor){return callback(null,{type:"remote",db:db,entries:entries})}entries[cursor.primaryKey]={timestamp:cursor.key};cursor.continue()}}catch(e){return callback(e)}})},loadLocalEntry:function(path,callback){var stat,node;try{var lookup=FS.lookupPath(path);node=lookup.node;stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){return callback(null,{timestamp:stat.mtime,mode:stat.mode})}else if(FS.isFile(stat.mode)){node.contents=MEMFS.getFileDataAsTypedArray(node);return callback(null,{timestamp:stat.mtime,mode:stat.mode,contents:node.contents})}else{return callback(new Error("node type not supported"))}},storeLocalEntry:function(path,entry,callback){try{if(FS.isDir(entry.mode)){FS.mkdir(path,entry.mode)}else if(FS.isFile(entry.mode)){FS.writeFile(path,entry.contents,{canOwn:true})}else{return callback(new Error("node type not supported"))}FS.chmod(path,entry.mode);FS.utime(path,entry.timestamp,entry.timestamp)}catch(e){return callback(e)}callback(null)},removeLocalEntry:function(path,callback){try{var lookup=FS.lookupPath(path);var stat=FS.stat(path);if(FS.isDir(stat.mode)){FS.rmdir(path)}else if(FS.isFile(stat.mode)){FS.unlink(path)}}catch(e){return callback(e)}callback(null)},loadRemoteEntry:function(store,path,callback){var req=store.get(path);req.onsuccess=function(event){callback(null,event.target.result)};req.onerror=function(e){callback(this.error);e.preventDefault()}},storeRemoteEntry:function(store,path,entry,callback){var req=store.put(entry,path);req.onsuccess=function(){callback(null)};req.onerror=function(e){callback(this.error);e.preventDefault()}},removeRemoteEntry:function(store,path,callback){var req=store.delete(path);req.onsuccess=function(){callback(null)};req.onerror=function(e){callback(this.error);e.preventDefault()}},reconcile:function(src,dst,callback){var total=0;var create=[];Object.keys(src.entries).forEach(function(key){var e=src.entries[key];var e2=dst.entries[key];if(!e2||e.timestamp>e2.timestamp){create.push(key);total++}});var remove=[];Object.keys(dst.entries).forEach(function(key){var e=dst.entries[key];var e2=src.entries[key];if(!e2){remove.push(key);total++}});if(!total){return callback(null)}var errored=false;var db=src.type==="remote"?src.db:dst.db;var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readwrite");var store=transaction.objectStore(IDBFS.DB_STORE_NAME);function done(err){if(err&&!errored){errored=true;return callback(err)}}transaction.onerror=function(e){done(this.error);e.preventDefault()};transaction.oncomplete=function(e){if(!errored){callback(null)}};create.sort().forEach(function(path){if(dst.type==="local"){IDBFS.loadRemoteEntry(store,path,function(err,entry){if(err)return done(err);IDBFS.storeLocalEntry(path,entry,done)})}else{IDBFS.loadLocalEntry(path,function(err,entry){if(err)return done(err);IDBFS.storeRemoteEntry(store,path,entry,done)})}});remove.sort().reverse().forEach(function(path){if(dst.type==="local"){IDBFS.removeLocalEntry(path,done)}else{IDBFS.removeRemoteEntry(store,path,done)}})}};Module["IDBFS"]=IDBFS;var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function(mount){assert(ENVIRONMENT_IS_WORKER);if(!WORKERFS.reader)WORKERFS.reader=new FileReaderSync;var root=WORKERFS.createNode(null,"/",WORKERFS.DIR_MODE,0);var createdParents={};function ensureParent(path){var parts=path.split("/");var parent=root;for(var i=0;i<parts.length-1;i++){var curr=parts.slice(0,i+1).join("/");if(!createdParents[curr]){createdParents[curr]=WORKERFS.createNode(parent,parts[i],WORKERFS.DIR_MODE,0)}parent=createdParents[curr]}return parent}function base(path){var parts=path.split("/");return parts[parts.length-1]}Array.prototype.forEach.call(mount.opts["files"]||[],function(file){WORKERFS.createNode(ensureParent(file.name),base(file.name),WORKERFS.FILE_MODE,0,file,file.lastModifiedDate)});(mount.opts["blobs"]||[]).forEach(function(obj){WORKERFS.createNode(ensureParent(obj["name"]),base(obj["name"]),WORKERFS.FILE_MODE,0,obj["data"])});(mount.opts["packages"]||[]).forEach(function(pack){pack["metadata"].files.forEach(function(file){var name=file.filename.substr(1);WORKERFS.createNode(ensureParent(name),base(name),WORKERFS.FILE_MODE,0,pack["blob"].slice(file.start,file.end))})});return root},createNode:function(parent,name,mode,dev,contents,mtime){var node=FS.createNode(parent,name,mode);node.mode=mode;node.node_ops=WORKERFS.node_ops;node.stream_ops=WORKERFS.stream_ops;node.timestamp=(mtime||new Date).getTime();assert(WORKERFS.FILE_MODE!==WORKERFS.DIR_MODE);if(mode===WORKERFS.FILE_MODE){node.size=contents.size;node.contents=contents}else{node.size=4096;node.contents={}}if(parent){parent.contents[name]=node}return node},node_ops:{getattr:function(node){return{dev:1,ino:undefined,mode:node.mode,nlink:1,uid:0,gid:0,rdev:undefined,size:node.size,atime:new Date(node.timestamp),mtime:new Date(node.timestamp),ctime:new Date(node.timestamp),blksize:4096,blocks:Math.ceil(node.size/4096)}},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}},lookup:function(parent,name){throw new FS.ErrnoError(2)},mknod:function(parent,name,mode,dev){throw new FS.ErrnoError(1)},rename:function(oldNode,newDir,newName){throw new FS.ErrnoError(1)},unlink:function(parent,name){throw new FS.ErrnoError(1)},rmdir:function(parent,name){throw new FS.ErrnoError(1)},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink:function(parent,newName,oldPath){throw new FS.ErrnoError(1)},readlink:function(node){throw new FS.ErrnoError(1)}},stream_ops:{read:function(stream,buffer,offset,length,position){if(position>=stream.node.size)return 0;var chunk=stream.node.contents.slice(position,position+length);var ab=WORKERFS.reader.readAsArrayBuffer(chunk);buffer.set(new Uint8Array(ab),offset);return chunk.size},write:function(stream,buffer,offset,length,position){throw new FS.ErrnoError(5)},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.size}}if(position<0){throw new FS.ErrnoError(22)}return position}}};Module["WORKERFS"]=WORKERFS;var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};Module["ERRNO_MESSAGES"]=ERRNO_MESSAGES;var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};Module["ERRNO_CODES"]=ERRNO_CODES;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e){if(!(e instanceof FS.ErrnoError))throw e+" : "+stackTrace();return ___setErrNo(e.errno)},lookupPath:function(path,opts){path=PATH_FS.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key]}}if(opts.recurse_count>8){throw new FS.ErrnoError(40)}var parts=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(40)}}}}return{path:current_path,node:current}},getPath:function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}},hashName:function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode:function(parent,name){var err=FS.mayLookup(parent);if(err){throw new FS.ErrnoError(err,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:function(parent,name,mode,rdev){if(!FS.FSNode){FS.FSNode=function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev};FS.FSNode.prototype={};var readMode=292|73;var writeMode=146;Object.defineProperties(FS.FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}})}var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:function(node){FS.hashRemoveNode(node)},isRoot:function(node){return node===node.parent},isMountpoint:function(node){return!!node.mounted},isFile:function(mode){return(mode&61440)===32768},isDir:function(mode){return(mode&61440)===16384},isLink:function(mode){return(mode&61440)===40960},isChrdev:function(mode){return(mode&61440)===8192},isBlkdev:function(mode){return(mode&61440)===24576},isFIFO:function(mode){return(mode&61440)===4096},isSocket:function(mode){return(mode&49152)===49152},flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags},flagsToPermissionString:function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms},nodePermissions:function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return 13}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return 13}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return 13}return 0},mayLookup:function(dir){var err=FS.nodePermissions(dir,"x");if(err)return err;if(!dir.node_ops.lookup)return 13;return 0},mayCreate:function(dir,name){try{var node=FS.lookupNode(dir,name);return 17}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var err=FS.nodePermissions(dir,"wx");if(err){return err}if(isdir){if(!FS.isDir(node.mode)){return 20}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 16}}else{if(FS.isDir(node.mode)){return 21}}return 0},mayOpen:function(node,flags){if(!node){return 2}if(FS.isLink(node.mode)){return 40}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 21}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(24)},getStream:function(fd){return FS.streams[fd]},createStream:function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={};Object.defineProperties(FS.FSStream.prototype,{object:{get:function(){return this.node},set:function(val){this.node=val}},isRead:{get:function(){return(this.flags&2097155)!==1}},isWrite:{get:function(){return(this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}}})}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p]}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:function(fd){FS.streams[fd]=null},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}},llseek:function(){throw new FS.ErrnoError(29)}},major:function(dev){return dev>>8},minor:function(dev){return dev&255},makedev:function(ma,mi){return ma<<8|mi},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:function(dev){return FS.devices[dev]},getMounts:function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts},syncfs:function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){console.log("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(err){assert(FS.syncFSRequests>0);FS.syncFSRequests--;return callback(err)}function done(err){if(err){if(!done.errored){done.errored=true;return doCallback(err)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount:function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(16)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(16)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(20)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(22)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);assert(idx!==-1);node.mount.mounts.splice(idx,1)},lookup:function(parent,name){return parent.node_ops.lookup(parent,name)},mknod:function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(22)}var err=FS.mayCreate(parent,name);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(1)}return parent.node_ops.mknod(parent,name,mode,dev)},create:function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:function(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=17)throw e}}},mkdev:function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink:function(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(2)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(2)}var newname=PATH.basename(newpath);var err=FS.mayCreate(parent,newname);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(1)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;try{lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node}catch(e){throw new FS.ErrnoError(16)}if(!old_dir||!new_dir)throw new FS.ErrnoError(2);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(18)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(22)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(39)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var err=FS.mayDelete(old_dir,old_name,isdir);if(err){throw new FS.ErrnoError(err)}err=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(err){throw new FS.ErrnoError(err)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(1)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(16)}if(new_dir!==old_dir){err=FS.nodePermissions(old_dir,"w");if(err){throw new FS.ErrnoError(err)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path)}}catch(e){console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path)}catch(e){console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}},rmdir:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,true);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(1)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(16)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readdir:function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(20)}return node.node_ops.readdir(node)},unlink:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,false);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(1)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(16)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readlink:function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(2)}if(!link.node_ops.readlink){throw new FS.ErrnoError(22)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(2)}if(!node.node_ops.getattr){throw new FS.ErrnoError(1)}return node.node_ops.getattr(node)},lstat:function(path){return FS.stat(path,true)},chmod:function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(1)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod:function(path,mode){FS.chmod(path,mode,true)},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(9)}FS.chmod(stream.node,mode)},chown:function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(1)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown:function(path,uid,gid){FS.chown(path,uid,gid,true)},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(9)}FS.chown(stream.node,uid,gid)},truncate:function(path,len){if(len<0){throw new FS.ErrnoError(22)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(1)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(21)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(22)}var err=FS.nodePermissions(node,"w");if(err){throw new FS.ErrnoError(err)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(9)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(22)}FS.truncate(stream.node,len)},utime:function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open:function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(2)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path==="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(17)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(2)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(20)}if(!created){var err=FS.mayOpen(node,flags);if(err){throw new FS.ErrnoError(err)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;console.log("FS.trackingDelegate error on read file: "+path)}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE}FS.trackingDelegate["onOpenFile"](path,trackingFlags)}}catch(e){console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream},close:function(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(9)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:function(stream){return stream.fd===null},llseek:function(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(9)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(29)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(22)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(22)}if(FS.isClosed(stream)){throw new FS.ErrnoError(9)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(9)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(21)}if(!stream.stream_ops.read){throw new FS.ErrnoError(22)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(29)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(22)}if(FS.isClosed(stream)){throw new FS.ErrnoError(9)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(9)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(21)}if(!stream.stream_ops.write){throw new FS.ErrnoError(22)}if(stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(29)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path)}catch(e){console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: "+e.message)}return bytesWritten},allocate:function(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(9)}if(offset<0||length<=0){throw new FS.ErrnoError(22)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(9)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(19)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(95)}stream.stream_ops.allocate(stream,offset,length)},mmap:function(stream,buffer,offset,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(13)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(13)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(19)}return stream.stream_ops.mmap(stream,buffer,offset,length,position,prot,flags)},msync:function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:function(stream){return 0},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(25)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:function(path,opts){opts=opts||{};opts.flags=opts.flags||"r";opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret},writeFile:function(path,data,opts){opts=opts||{};opts.flags=opts.flags||"w";var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)},cwd:function(){return FS.currentPath},chdir:function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(2)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(20)}var err=FS.nodePermissions(lookup.node,"x");if(err){throw new FS.ErrnoError(err)}FS.currentPath=lookup.path},createDefaultDirectories:function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")},createDefaultDevices:function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(stream,buffer,offset,length,pos){return length}});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device;if(typeof crypto==="object"&&typeof crypto["getRandomValues"]==="function"){var randomBuffer=new Uint8Array(1);random_device=function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]}}else{}if(!random_device){random_device=function(){abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}}FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){FS.mkdir("/proc");FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:function(){var node=FS.createNode("/proc/self","fd",16384|511,73);node.node_ops={lookup:function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(9);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return stream.path}}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd")},createStandardStreams:function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin","r");var stdout=FS.open("/dev/stdout","w");var stderr=FS.open("/dev/stderr","w");assert(stdin.fd===0,"invalid handle for stdin ("+stdin.fd+")");assert(stdout.fd===1,"invalid handle for stdout ("+stdout.fd+")");assert(stderr.fd===2,"invalid handle for stderr ("+stderr.fd+")")},ensureErrnoError:function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno;for(var key in ERRNO_CODES){if(ERRNO_CODES[key]===errno){this.code=key;break}}};this.setErrno(errno);this.message=ERRNO_MESSAGES[errno];if(this.stack){Object.defineProperty(this,"stack",{value:(new Error).stack,writable:true});this.stack=demangleAll(this.stack)}};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[2].forEach(function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"})},staticInit:function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS,"IDBFS":IDBFS,"WORKERFS":WORKERFS}},init:function(input,output,error){assert(!FS.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()},quit:function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},getMode:function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},joinPath:function(parts,forceRelative){var path=PATH.join.apply(null,parts);if(forceRelative&&path[0]=="/")path=path.substr(1);return path},absolutePath:function(relative,base){return PATH_FS.resolve(base,relative)},standardizePath:function(path){return PATH.normalize(path)},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{___setErrNo(ret.error);return null}},analyzePath:function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret},createFolder:function(parent,name,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.mkdir(path,mode)},createPath:function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile:function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,"w");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node},createDevice:function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:function(stream){stream.seekable=false},close:function(stream){if(output&&output.buffer&&output.buffer.length){output(10)}},read:function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(5)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(11)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(5)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},createLink:function(parent,name,target,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);return FS.symlink(target,path)},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length}catch(e){success=false}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}if(!success)___setErrNo(5);return success},createLazyFile:function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}};var lazyArray=this;lazyArray.setDataGetter(function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;console.log("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._length}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(5)}return fn.apply(null,arguments)}});stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(5)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);assert(size>=0);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size};node.stream_ops=stream_ops;return node},createPreloadedFile:function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}var handled=false;Module["preloadPlugins"].forEach(function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,function(){if(onerror)onerror();removeRunDependency(dep)});handled=true}});if(!handled)finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){Browser.asyncLoad(url,function(byteArray){processData(byteArray)},onerror)}else{processData(url)}},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){console.log("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish()};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror}};Module["FS"]=FS;var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd,path){if(path[0]!=="/"){var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(9);dir=dirstream.path}path=PATH.join2(dir,path)}return path},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-20}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;HEAP32[buf+56>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>2]=tempI64[0],HEAP32[buf+84>>2]=tempI64[1];return 0},doMsync:function(addr,stream,len,flags){var buffer=new Uint8Array(HEAPU8.subarray(addr,addr+len));FS.msync(stream,buffer,0,len,flags)},doMkdir:function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-22}FS.mknod(path,mode,dev);return 0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return-22;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len},doAccess:function(path,amode){if(amode&~7){return-22}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;if(!node){return-2}var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-13}return 0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret},varargs:0,get:function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(){var ret=UTF8ToString(SYSCALLS.get());return ret},getStreamFromFD:function(){var stream=FS.getStream(SYSCALLS.get());if(!stream)throw new FS.ErrnoError(9);return stream},get64:function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low},getZero:function(){assert(SYSCALLS.get()===0)}};Module["SYSCALLS"]=SYSCALLS;function ___syscall10(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr();FS.unlink(path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall10"]=___syscall10;var SOCKFS={mount:function(mount){Module["websocket"]=Module["websocket"]&&"object"===typeof Module["websocket"]?Module["websocket"]:{};Module["websocket"]._callbacks={};Module["websocket"]["on"]=function(event,callback){if("function"===typeof callback){this._callbacks[event]=callback}return this};Module["websocket"].emit=function(event,param){if("function"===typeof this._callbacks[event]){this._callbacks[event].call(this,param)}};Module["websocket"]["on"]("error",function(error){err("Socket error "+error)});Module["websocket"]["on"]("open",function(fd){out("Socket open fd = "+fd)});Module["websocket"]["on"]("listen",function(fd){out("Socket listen fd = "+fd)});Module["websocket"]["on"]("connection",function(fd){out("Socket connection fd = "+fd)});Module["websocket"]["on"]("message",function(fd){out("Socket message fd = "+fd)});Module["websocket"]["on"]("close",function(fd){out("Socket close fd = "+fd)});return FS.createNode(null,"/",16384|511,0)},createSocket:function(family,type,protocol){var streaming=type==1;if(protocol){assert(streaming==(protocol==6))}var sock={family:family,type:type,protocol:protocol,server:null,error:null,peers:{},pending:[],recv_queue:[],sock_ops:SOCKFS.websocket_sock_ops};var name=SOCKFS.nextname();var node=FS.createNode(SOCKFS.root,name,49152,0);node.sock=sock;var stream=FS.createStream({path:name,node:node,flags:FS.modeStringToFlags("r+"),seekable:false,stream_ops:SOCKFS.stream_ops});sock.stream=stream;return sock},getSocket:function(fd){var stream=FS.getStream(fd);if(!stream||!FS.isSocket(stream.node.mode)){return null}return stream.node.sock},stream_ops:{poll:function(stream){var sock=stream.node.sock;return sock.sock_ops.poll(sock)},ioctl:function(stream,request,varargs){var sock=stream.node.sock;return sock.sock_ops.ioctl(sock,request,varargs)},read:function(stream,buffer,offset,length,position){var sock=stream.node.sock;var msg=sock.sock_ops.recvmsg(sock,length);if(!msg){return 0}buffer.set(msg.buffer,offset);return msg.buffer.length},write:function(stream,buffer,offset,length,position){var sock=stream.node.sock;return sock.sock_ops.sendmsg(sock,buffer,offset,length)},close:function(stream){var sock=stream.node.sock;sock.sock_ops.close(sock)}},nextname:function(){if(!SOCKFS.nextname.current){SOCKFS.nextname.current=0}return"socket["+SOCKFS.nextname.current+++"]"},websocket_sock_ops:{createPeer:function(sock,addr,port){var ws;if(typeof addr==="object"){ws=addr;addr=null;port=null}if(ws){if(ws._socket){addr=ws._socket.remoteAddress;port=ws._socket.remotePort}else{var result=/ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);if(!result){throw new Error("WebSocket URL must be in the format ws(s)://address:port")}addr=result[1];port=parseInt(result[2],10)}}else{try{var runtimeConfig=Module["websocket"]&&"object"===typeof Module["websocket"];var url="ws:#".replace("#","//");if(runtimeConfig){if("string"===typeof Module["websocket"]["url"]){url=Module["websocket"]["url"]}}if(url==="ws://"||url==="wss://"){var parts=addr.split("/");url=url+parts[0]+":"+port+"/"+parts.slice(1).join("/")}var subProtocols="binary";if(runtimeConfig){if("string"===typeof Module["websocket"]["subprotocol"]){subProtocols=Module["websocket"]["subprotocol"]}}var opts=undefined;if(subProtocols!=="null"){subProtocols=subProtocols.replace(/^ +| +$/g,"").split(/ *, */);opts=ENVIRONMENT_IS_NODE?{"protocol":subProtocols.toString()}:subProtocols}if(runtimeConfig&&null===Module["websocket"]["subprotocol"]){subProtocols="null";opts=undefined}out("connect: "+url+", "+subProtocols.toString());var WebSocketConstructor;if(ENVIRONMENT_IS_WEB){WebSocketConstructor=window["WebSocket"]}else{WebSocketConstructor=WebSocket}ws=new WebSocketConstructor(url,opts);ws.binaryType="arraybuffer"}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH)}}out("websocket adding peer: "+addr+":"+port);var peer={addr:addr,port:port,socket:ws,dgram_send_queue:[]};SOCKFS.websocket_sock_ops.addPeer(sock,peer);SOCKFS.websocket_sock_ops.handlePeerEvents(sock,peer);if(sock.type===2&&typeof sock.sport!=="undefined"){out("websocket queuing port message (port "+sock.sport+")");peer.dgram_send_queue.push(new Uint8Array([255,255,255,255,"p".charCodeAt(0),"o".charCodeAt(0),"r".charCodeAt(0),"t".charCodeAt(0),(sock.sport&65280)>>8,sock.sport&255]))}return peer},getPeer:function(sock,addr,port){return sock.peers[addr+":"+port]},addPeer:function(sock,peer){sock.peers[peer.addr+":"+peer.port]=peer},removePeer:function(sock,peer){delete sock.peers[peer.addr+":"+peer.port]},handlePeerEvents:function(sock,peer){var first=true;var handleOpen=function(){out("websocket handle open");Module["websocket"].emit("open",sock.stream.fd);try{var queued=peer.dgram_send_queue.shift();while(queued){out("websocket sending queued data ("+queued.byteLength+" bytes): "+[Array.prototype.slice.call(new Uint8Array(queued))]);peer.socket.send(queued);queued=peer.dgram_send_queue.shift()}}catch(e){peer.socket.close()}};function handleMessage(data){if(typeof data==="string"){var encoder=new TextEncoder;data=encoder.encode(data)}else{assert(data.byteLength!==undefined);if(data.byteLength==0){return}else{data=new Uint8Array(data)}}out("websocket handle message ("+data.byteLength+" bytes): "+[Array.prototype.slice.call(data)]);var wasfirst=first;first=false;if(wasfirst&&data.length===10&&data[0]===255&&data[1]===255&&data[2]===255&&data[3]===255&&data[4]==="p".charCodeAt(0)&&data[5]==="o".charCodeAt(0)&&data[6]==="r".charCodeAt(0)&&data[7]==="t".charCodeAt(0)){var newport=data[8]<<8|data[9];SOCKFS.websocket_sock_ops.removePeer(sock,peer);peer.port=newport;SOCKFS.websocket_sock_ops.addPeer(sock,peer);return}sock.recv_queue.push({addr:peer.addr,port:peer.port,data:data});Module["websocket"].emit("message",sock.stream.fd)}if(ENVIRONMENT_IS_NODE){peer.socket.on("open",handleOpen);peer.socket.on("message",function(data,flags){if(!flags.binary){return}handleMessage(new Uint8Array(data).buffer)});peer.socket.on("close",function(){Module["websocket"].emit("close",sock.stream.fd)});peer.socket.on("error",function(error){sock.error=ERRNO_CODES.ECONNREFUSED;Module["websocket"].emit("error",[sock.stream.fd,sock.error,"ECONNREFUSED: Connection refused"])})}else{peer.socket.onopen=handleOpen;peer.socket.onclose=function(){Module["websocket"].emit("close",sock.stream.fd)};peer.socket.onmessage=function peer_socket_onmessage(event){handleMessage(event.data)};peer.socket.onerror=function(error){sock.error=ERRNO_CODES.ECONNREFUSED;Module["websocket"].emit("error",[sock.stream.fd,sock.error,"ECONNREFUSED: Connection refused"])}}},poll:function(sock){if(sock.type===1&&sock.server){return sock.pending.length?64|1:0}var mask=0;var dest=sock.type===1?SOCKFS.websocket_sock_ops.getPeer(sock,sock.daddr,sock.dport):null;if(sock.recv_queue.length||!dest||dest&&dest.socket.readyState===dest.socket.CLOSING||dest&&dest.socket.readyState===dest.socket.CLOSED){mask|=64|1}if(!dest||dest&&dest.socket.readyState===dest.socket.OPEN){mask|=4}if(dest&&dest.socket.readyState===dest.socket.CLOSING||dest&&dest.socket.readyState===dest.socket.CLOSED){mask|=16}return mask},ioctl:function(sock,request,arg){switch(request){case 21531:var bytes=0;if(sock.recv_queue.length){bytes=sock.recv_queue[0].data.length}HEAP32[arg>>2]=bytes;return 0;default:return ERRNO_CODES.EINVAL}},close:function(sock){if(sock.server){try{sock.server.close()}catch(e){}sock.server=null}var peers=Object.keys(sock.peers);for(var i=0;i<peers.length;i++){var peer=sock.peers[peers[i]];try{peer.socket.close()}catch(e){}SOCKFS.websocket_sock_ops.removePeer(sock,peer)}return 0},bind:function(sock,addr,port){if(typeof sock.saddr!=="undefined"||typeof sock.sport!=="undefined"){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}sock.saddr=addr;sock.sport=port;if(sock.type===2){if(sock.server){sock.server.close();sock.server=null}try{sock.sock_ops.listen(sock,0)}catch(e){if(!(e instanceof FS.ErrnoError))throw e;if(e.errno!==ERRNO_CODES.EOPNOTSUPP)throw e}}},connect:function(sock,addr,port){if(sock.server){throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)}if(typeof sock.daddr!=="undefined"&&typeof sock.dport!=="undefined"){var dest=SOCKFS.websocket_sock_ops.getPeer(sock,sock.daddr,sock.dport);if(dest){if(dest.socket.readyState===dest.socket.CONNECTING){throw new FS.ErrnoError(ERRNO_CODES.EALREADY)}else{throw new FS.ErrnoError(ERRNO_CODES.EISCONN)}}}var peer=SOCKFS.websocket_sock_ops.createPeer(sock,addr,port);sock.daddr=peer.addr;sock.dport=peer.port;throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS)},listen:function(sock,backlog){if(!ENVIRONMENT_IS_NODE){throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)}},accept:function(listensock){if(!listensock.server){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var newsock=listensock.pending.shift();newsock.stream.flags=listensock.stream.flags;return newsock},getname:function(sock,peer){var addr,port;if(peer){if(sock.daddr===undefined||sock.dport===undefined){throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)}addr=sock.daddr;port=sock.dport}else{addr=sock.saddr||0;port=sock.sport||0}return{addr:addr,port:port}},sendmsg:function(sock,buffer,offset,length,addr,port){if(sock.type===2){if(addr===undefined||port===undefined){addr=sock.daddr;port=sock.dport}if(addr===undefined||port===undefined){throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ)}}else{addr=sock.daddr;port=sock.dport}var dest=SOCKFS.websocket_sock_ops.getPeer(sock,addr,port);if(sock.type===1){if(!dest||dest.socket.readyState===dest.socket.CLOSING||dest.socket.readyState===dest.socket.CLOSED){throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)}else if(dest.socket.readyState===dest.socket.CONNECTING){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}}if(ArrayBuffer.isView(buffer)){offset+=buffer.byteOffset;buffer=buffer.buffer}var data;data=buffer.slice(offset,offset+length);if(sock.type===2){if(!dest||dest.socket.readyState!==dest.socket.OPEN){if(!dest||dest.socket.readyState===dest.socket.CLOSING||dest.socket.readyState===dest.socket.CLOSED){dest=SOCKFS.websocket_sock_ops.createPeer(sock,addr,port)}out("websocket queuing ("+length+" bytes): "+[Array.prototype.slice.call(new Uint8Array(data))]);dest.dgram_send_queue.push(data);return length}}try{out("websocket send ("+length+" bytes): "+[Array.prototype.slice.call(new Uint8Array(data))]);dest.socket.send(data);return length}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}},recvmsg:function(sock,length){if(sock.type===1&&sock.server){throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)}var queued=sock.recv_queue.shift();if(!queued){if(sock.type===1){var dest=SOCKFS.websocket_sock_ops.getPeer(sock,sock.daddr,sock.dport);if(!dest){throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)}else if(dest.socket.readyState===dest.socket.CLOSING||dest.socket.readyState===dest.socket.CLOSED){return null}else{throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}}else{throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}}var queuedLength=queued.data.byteLength||queued.data.length;var queuedOffset=queued.data.byteOffset||0;var queuedBuffer=queued.data.buffer||queued.data;var bytesRead=Math.min(length,queuedLength);var res={buffer:new Uint8Array(queuedBuffer,queuedOffset,bytesRead),addr:queued.addr,port:queued.port};out("websocket read ("+bytesRead+" bytes): "+[Array.prototype.slice.call(res.buffer)]);if(sock.type===1&&bytesRead<queuedLength){var bytesRemaining=queuedLength-bytesRead;out("websocket read: put back "+bytesRemaining+" bytes");queued.data=new Uint8Array(queuedBuffer,queuedOffset+bytesRead,bytesRemaining);sock.recv_queue.unshift(queued)}return res}}};Module["SOCKFS"]=SOCKFS;function __inet_pton4_raw(str){var b=str.split(".");for(var i=0;i<4;i++){var tmp=Number(b[i]);if(isNaN(tmp))return null;b[i]=tmp}return(b[0]|b[1]<<8|b[2]<<16|b[3]<<24)>>>0}Module["__inet_pton4_raw"]=__inet_pton4_raw;function __inet_pton6_raw(str){var words;var w,offset,z;var valid6regx=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i;var parts=[];if(!valid6regx.test(str)){return null}if(str==="::"){return[0,0,0,0,0,0,0,0]}if(str.indexOf("::")===0){str=str.replace("::","Z:")}else{str=str.replace("::",":Z:")}if(str.indexOf(".")>0){str=str.replace(new RegExp("[.]","g"),":");words=str.split(":");words[words.length-4]=parseInt(words[words.length-4])+parseInt(words[words.length-3])*256;words[words.length-3]=parseInt(words[words.length-2])+parseInt(words[words.length-1])*256;words=words.slice(0,words.length-2)}else{words=str.split(":")}offset=0;z=0;for(w=0;w<words.length;w++){if(typeof words[w]==="string"){if(words[w]==="Z"){for(z=0;z<8-words.length+1;z++){parts[w+z]=0}offset=z-1}else{parts[w+offset]=_htons(parseInt(words[w],16))}}else{parts[w+offset]=words[w]}}return[parts[1]<<16|parts[0],parts[3]<<16|parts[2],parts[5]<<16|parts[4],parts[7]<<16|parts[6]]}Module["__inet_pton6_raw"]=__inet_pton6_raw;var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function(name){var res=__inet_pton4_raw(name);if(res!==null){return name}res=__inet_pton6_raw(name);if(res!==null){return name}var addr;if(DNS.address_map.addrs[name]){addr=DNS.address_map.addrs[name]}else{var id=DNS.address_map.id++;assert(id<65535,"exceeded max address mappings of 65535");addr="172.29."+(id&255)+"."+(id&65280);DNS.address_map.names[addr]=name;DNS.address_map.addrs[name]=addr}return addr},lookup_addr:function(addr){if(DNS.address_map.names[addr]){return DNS.address_map.names[addr]}return null}};Module["DNS"]=DNS;var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};Module["Sockets"]=Sockets;function __inet_ntop4_raw(addr){return(addr&255)+"."+(addr>>8&255)+"."+(addr>>16&255)+"."+(addr>>24&255)}Module["__inet_ntop4_raw"]=__inet_ntop4_raw;function __inet_ntop6_raw(ints){var str="";var word=0;var longest=0;var lastzero=0;var zstart=0;var len=0;var i=0;var parts=[ints[0]&65535,ints[0]>>16,ints[1]&65535,ints[1]>>16,ints[2]&65535,ints[2]>>16,ints[3]&65535,ints[3]>>16];var hasipv4=true;var v4part="";for(i=0;i<5;i++){if(parts[i]!==0){hasipv4=false;break}}if(hasipv4){v4part=__inet_ntop4_raw(parts[6]|parts[7]<<16);if(parts[5]===-1){str="::ffff:";str+=v4part;return str}if(parts[5]===0){str="::";if(v4part==="0.0.0.0")v4part="";if(v4part==="0.0.0.1")v4part="1";str+=v4part;return str}}for(word=0;word<8;word++){if(parts[word]===0){if(word-lastzero>1){len=0}lastzero=word;len++}if(len>longest){longest=len;zstart=word-longest+1}}for(word=0;word<8;word++){if(longest>1){if(parts[word]===0&&word>=zstart&&word<zstart+longest){if(word===zstart){str+=":";if(zstart===0)str+=":"}continue}}str+=Number(_ntohs(parts[word]&65535)).toString(16);str+=word<7?":":""}return str}Module["__inet_ntop6_raw"]=__inet_ntop6_raw;function __read_sockaddr(sa,salen){var family=HEAP16[sa>>1];var port=_ntohs(HEAPU16[sa+2>>1]);var addr;switch(family){case 2:if(salen!==16){return{errno:22}}addr=HEAP32[sa+4>>2];addr=__inet_ntop4_raw(addr);break;case 10:if(salen!==28){return{errno:22}}addr=[HEAP32[sa+8>>2],HEAP32[sa+12>>2],HEAP32[sa+16>>2],HEAP32[sa+20>>2]];addr=__inet_ntop6_raw(addr);break;default:return{errno:97}}return{family:family,addr:addr,port:port}}Module["__read_sockaddr"]=__read_sockaddr;function __write_sockaddr(sa,family,addr,port){switch(family){case 2:addr=__inet_pton4_raw(addr);HEAP16[sa>>1]=family;HEAP32[sa+4>>2]=addr;HEAP16[sa+2>>1]=_htons(port);break;case 10:addr=__inet_pton6_raw(addr);HEAP32[sa>>2]=family;HEAP32[sa+8>>2]=addr[0];HEAP32[sa+12>>2]=addr[1];HEAP32[sa+16>>2]=addr[2];HEAP32[sa+20>>2]=addr[3];HEAP16[sa+2>>1]=_htons(port);HEAP32[sa+4>>2]=0;HEAP32[sa+24>>2]=0;break;default:return{errno:97}}return{}}Module["__write_sockaddr"]=__write_sockaddr;function ___syscall102(which,varargs){SYSCALLS.varargs=varargs;try{var call=SYSCALLS.get(),socketvararg=SYSCALLS.get();SYSCALLS.varargs=socketvararg;var getSocketFromFD=function(){var socket=SOCKFS.getSocket(SYSCALLS.get());if(!socket)throw new FS.ErrnoError(9);return socket};var getSocketAddress=function(allowNull){var addrp=SYSCALLS.get(),addrlen=SYSCALLS.get();if(allowNull&&addrp===0)return null;var info=__read_sockaddr(addrp,addrlen);if(info.errno)throw new FS.ErrnoError(info.errno);info.addr=DNS.lookup_addr(info.addr)||info.addr;return info};switch(call){case 1:{var domain=SYSCALLS.get(),type=SYSCALLS.get(),protocol=SYSCALLS.get();var sock=SOCKFS.createSocket(domain,type,protocol);assert(sock.stream.fd<64);return sock.stream.fd}case 2:{var sock=getSocketFromFD(),info=getSocketAddress();sock.sock_ops.bind(sock,info.addr,info.port);return 0}case 3:{var sock=getSocketFromFD(),info=getSocketAddress();sock.sock_ops.connect(sock,info.addr,info.port);return 0}case 4:{var sock=getSocketFromFD(),backlog=SYSCALLS.get();sock.sock_ops.listen(sock,backlog);return 0}case 5:{var sock=getSocketFromFD(),addr=SYSCALLS.get(),addrlen=SYSCALLS.get();var newsock=sock.sock_ops.accept(sock);if(addr){var res=__write_sockaddr(addr,newsock.family,DNS.lookup_name(newsock.daddr),newsock.dport);assert(!res.errno)}return newsock.stream.fd}case 6:{var sock=getSocketFromFD(),addr=SYSCALLS.get(),addrlen=SYSCALLS.get();var res=__write_sockaddr(addr,sock.family,DNS.lookup_name(sock.saddr||"0.0.0.0"),sock.sport);assert(!res.errno);return 0}case 7:{var sock=getSocketFromFD(),addr=SYSCALLS.get(),addrlen=SYSCALLS.get();if(!sock.daddr){return-107}var res=__write_sockaddr(addr,sock.family,DNS.lookup_name(sock.daddr),sock.dport);assert(!res.errno);return 0}case 11:{var sock=getSocketFromFD(),message=SYSCALLS.get(),length=SYSCALLS.get(),flags=SYSCALLS.get(),dest=getSocketAddress(true);if(!dest){return FS.write(sock.stream,HEAP8,message,length)}else{return sock.sock_ops.sendmsg(sock,HEAP8,message,length,dest.addr,dest.port)}}case 12:{var sock=getSocketFromFD(),buf=SYSCALLS.get(),len=SYSCALLS.get(),flags=SYSCALLS.get(),addr=SYSCALLS.get(),addrlen=SYSCALLS.get();var msg=sock.sock_ops.recvmsg(sock,len);if(!msg)return 0;if(addr){var res=__write_sockaddr(addr,sock.family,DNS.lookup_name(msg.addr),msg.port);assert(!res.errno)}HEAPU8.set(msg.buffer,buf);return msg.buffer.byteLength}case 14:{return-92}case 15:{var sock=getSocketFromFD(),level=SYSCALLS.get(),optname=SYSCALLS.get(),optval=SYSCALLS.get(),optlen=SYSCALLS.get();if(level===1){if(optname===4){HEAP32[optval>>2]=sock.error;HEAP32[optlen>>2]=4;sock.error=null;return 0}}return-92}case 16:{var sock=getSocketFromFD(),message=SYSCALLS.get(),flags=SYSCALLS.get();var iov=HEAP32[message+8>>2];var num=HEAP32[message+12>>2];var addr,port;var name=HEAP32[message>>2];var namelen=HEAP32[message+4>>2];if(name){var info=__read_sockaddr(name,namelen);if(info.errno)return-info.errno;port=info.port;addr=DNS.lookup_addr(info.addr)||info.addr}var total=0;for(var i=0;i<num;i++){total+=HEAP32[iov+(8*i+4)>>2]}var view=new Uint8Array(total);var offset=0;for(var i=0;i<num;i++){var iovbase=HEAP32[iov+(8*i+0)>>2];var iovlen=HEAP32[iov+(8*i+4)>>2];for(var j=0;j<iovlen;j++){view[offset++]=HEAP8[iovbase+j>>0]}}return sock.sock_ops.sendmsg(sock,view,0,total,addr,port)}case 17:{var sock=getSocketFromFD(),message=SYSCALLS.get(),flags=SYSCALLS.get();var iov=HEAP32[message+8>>2];var num=HEAP32[message+12>>2];var total=0;for(var i=0;i<num;i++){total+=HEAP32[iov+(8*i+4)>>2]}var msg=sock.sock_ops.recvmsg(sock,total);if(!msg)return 0;var name=HEAP32[message>>2];if(name){var res=__write_sockaddr(name,sock.family,DNS.lookup_name(msg.addr),msg.port);assert(!res.errno)}var bytesRead=0;var bytesRemaining=msg.buffer.byteLength;for(var i=0;bytesRemaining>0&&i<num;i++){var iovbase=HEAP32[iov+(8*i+0)>>2];var iovlen=HEAP32[iov+(8*i+4)>>2];if(!iovlen){continue}var length=Math.min(iovlen,bytesRemaining);var buf=msg.buffer.subarray(bytesRead,bytesRead+length);HEAPU8.set(buf,iovbase+bytesRead);bytesRead+=length;bytesRemaining-=length}return bytesRead}default:abort("unsupported socketcall syscall "+call)}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall102"]=___syscall102;function ___syscall118(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();if(stream.stream_ops&&stream.stream_ops.fsync){return-stream.stream_ops.fsync(stream)}return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall118"]=___syscall118;function ___syscall12(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr();FS.chdir(path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall12"]=___syscall12;function ___syscall122(which,varargs){SYSCALLS.varargs=varargs;try{var buf=SYSCALLS.get();if(!buf)return-14;var layout={"sysname":0,"nodename":65,"domainname":325,"machine":260,"version":195,"release":130,"__size__":390};var copyString=function(element,value){var offset=layout[element];writeAsciiToMemory(value,buf+offset)};copyString("sysname","Emscripten");copyString("nodename","emscripten");copyString("release","1.0");copyString("version","#1");copyString("machine","x86-JS");return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall122"]=___syscall122;function ___syscall133(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.chdir(stream.path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall133"]=___syscall133;function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return-75}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[result>>2]=tempI64[0],HEAP32[result+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall140"]=___syscall140;function ___syscall142(which,varargs){SYSCALLS.varargs=varargs;try{var nfds=SYSCALLS.get(),readfds=SYSCALLS.get(),writefds=SYSCALLS.get(),exceptfds=SYSCALLS.get(),timeout=SYSCALLS.get();assert(nfds<=64,"nfds must be less than or equal to 64");assert(!exceptfds,"exceptfds not supported");var total=0;var srcReadLow=readfds?HEAP32[readfds>>2]:0,srcReadHigh=readfds?HEAP32[readfds+4>>2]:0;var srcWriteLow=writefds?HEAP32[writefds>>2]:0,srcWriteHigh=writefds?HEAP32[writefds+4>>2]:0;var srcExceptLow=exceptfds?HEAP32[exceptfds>>2]:0,srcExceptHigh=exceptfds?HEAP32[exceptfds+4>>2]:0;var dstReadLow=0,dstReadHigh=0;var dstWriteLow=0,dstWriteHigh=0;var dstExceptLow=0,dstExceptHigh=0;var allLow=(readfds?HEAP32[readfds>>2]:0)|(writefds?HEAP32[writefds>>2]:0)|(exceptfds?HEAP32[exceptfds>>2]:0);var allHigh=(readfds?HEAP32[readfds+4>>2]:0)|(writefds?HEAP32[writefds+4>>2]:0)|(exceptfds?HEAP32[exceptfds+4>>2]:0);var check=function(fd,low,high,val){return fd<32?low&val:high&val};for(var fd=0;fd<nfds;fd++){var mask=1<<fd%32;if(!check(fd,allLow,allHigh,mask)){continue}var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(9);var flags=SYSCALLS.DEFAULT_POLLMASK;if(stream.stream_ops.poll){flags=stream.stream_ops.poll(stream)}if(flags&1&&check(fd,srcReadLow,srcReadHigh,mask)){fd<32?dstReadLow=dstReadLow|mask:dstReadHigh=dstReadHigh|mask;total++}if(flags&4&&check(fd,srcWriteLow,srcWriteHigh,mask)){fd<32?dstWriteLow=dstWriteLow|mask:dstWriteHigh=dstWriteHigh|mask;total++}if(flags&2&&check(fd,srcExceptLow,srcExceptHigh,mask)){fd<32?dstExceptLow=dstExceptLow|mask:dstExceptHigh=dstExceptHigh|mask;total++}}if(readfds){HEAP32[readfds>>2]=dstReadLow;HEAP32[readfds+4>>2]=dstReadHigh}if(writefds){HEAP32[writefds>>2]=dstWriteLow;HEAP32[writefds+4>>2]=dstWriteHigh}if(exceptfds){HEAP32[exceptfds>>2]=dstExceptLow;HEAP32[exceptfds+4>>2]=dstExceptHigh}return total}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall142"]=___syscall142;function ___syscall145(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doReadv(stream,iov,iovcnt)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall145"]=___syscall145;function ___syscall148(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall148"]=___syscall148;function ___syscall15(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),mode=SYSCALLS.get();FS.chmod(path,mode);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall15"]=___syscall15;function ___syscall183(which,varargs){SYSCALLS.varargs=varargs;try{var buf=SYSCALLS.get(),size=SYSCALLS.get();if(size===0)return-22;var cwd=FS.cwd();var cwdLengthInBytes=lengthBytesUTF8(cwd);if(size<cwdLengthInBytes+1)return-34;stringToUTF8(cwd,buf,size);return buf}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall183"]=___syscall183;function ___syscall191(which,varargs){SYSCALLS.varargs=varargs;try{var resource=SYSCALLS.get(),rlim=SYSCALLS.get();HEAP32[rlim>>2]=-1;HEAP32[rlim+4>>2]=-1;HEAP32[rlim+8>>2]=-1;HEAP32[rlim+12>>2]=-1;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall191"]=___syscall191;function ___syscall195(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),buf=SYSCALLS.get();return SYSCALLS.doStat(FS.stat,path,buf)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall195"]=___syscall195;function ___syscall196(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),buf=SYSCALLS.get();return SYSCALLS.doStat(FS.lstat,path,buf)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall196"]=___syscall196;function ___syscall197(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),buf=SYSCALLS.get();return SYSCALLS.doStat(FS.stat,stream.path,buf)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall197"]=___syscall197;function ___syscall202(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall202"]=___syscall202;function ___syscall199(a0,a1){return ___syscall202(a0,a1)}Module["___syscall199"]=___syscall199;var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};Module["PROCINFO"]=PROCINFO;function ___syscall20(which,varargs){SYSCALLS.varargs=varargs;try{return PROCINFO.pid}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall20"]=___syscall20;function ___syscall200(a0,a1){return ___syscall202(a0,a1)}Module["___syscall200"]=___syscall200;function ___syscall201(a0,a1){return ___syscall202(a0,a1)}Module["___syscall201"]=___syscall201;function ___syscall220(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),dirp=SYSCALLS.get(),count=SYSCALLS.get();if(!stream.getdents){stream.getdents=FS.readdir(stream.path)}var struct_size=280;var pos=0;var off=FS.llseek(stream,0,1);var idx=Math.floor(off/struct_size);while(idx<stream.getdents.length&&pos+struct_size<=count){var id;var type;var name=stream.getdents[idx];if(name[0]==="."){id=1;type=4}else{var child=FS.lookupNode(stream.node,name);id=child.id;type=FS.isChrdev(child.mode)?2:FS.isDir(child.mode)?4:FS.isLink(child.mode)?10:8}tempI64=[id>>>0,(tempDouble=id,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[dirp+pos>>2]=tempI64[0],HEAP32[dirp+pos+4>>2]=tempI64[1];tempI64=[(idx+1)*struct_size>>>0,(tempDouble=(idx+1)*struct_size,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[dirp+pos+8>>2]=tempI64[0],HEAP32[dirp+pos+12>>2]=tempI64[1];HEAP16[dirp+pos+16>>1]=280;HEAP8[dirp+pos+18>>0]=type;stringToUTF8(name,dirp+pos+19,256);pos+=struct_size;idx+=1}FS.llseek(stream,idx*struct_size,0);return pos}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall220"]=___syscall220;function ___syscall221(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),cmd=SYSCALLS.get();switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-22}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0}case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 13:case 14:return 0;case 16:case 8:return-22;case 9:___setErrNo(22);return-1;default:{return-22}}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall221"]=___syscall221;function ___syscall3(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),buf=SYSCALLS.get(),count=SYSCALLS.get();return FS.read(stream,HEAP8,buf,count)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall3"]=___syscall3;function ___syscall33(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),amode=SYSCALLS.get();return SYSCALLS.doAccess(path,amode)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall33"]=___syscall33;function ___syscall340(which,varargs){SYSCALLS.varargs=varargs;try{var pid=SYSCALLS.get(),resource=SYSCALLS.get(),new_limit=SYSCALLS.get(),old_limit=SYSCALLS.get();if(old_limit){HEAP32[old_limit>>2]=-1;HEAP32[old_limit+4>>2]=-1;HEAP32[old_limit+8>>2]=-1;HEAP32[old_limit+12>>2]=-1}return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall340"]=___syscall340;function ___syscall38(which,varargs){SYSCALLS.varargs=varargs;try{var old_path=SYSCALLS.getStr(),new_path=SYSCALLS.getStr();FS.rename(old_path,new_path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall38"]=___syscall38;function ___syscall39(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),mode=SYSCALLS.get();return SYSCALLS.doMkdir(path,mode)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall39"]=___syscall39;function ___syscall4(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),buf=SYSCALLS.get(),count=SYSCALLS.get();return FS.write(stream,HEAP8,buf,count)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall4"]=___syscall4;function ___syscall40(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr();FS.rmdir(path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall40"]=___syscall40;var PIPEFS={BUCKET_BUFFER_SIZE:8192,mount:function(mount){return FS.createNode(null,"/",16384|511,0)},createPipe:function(){var pipe={buckets:[]};pipe.buckets.push({buffer:new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),offset:0,roffset:0});var rName=PIPEFS.nextname();var wName=PIPEFS.nextname();var rNode=FS.createNode(PIPEFS.root,rName,4096,0);var wNode=FS.createNode(PIPEFS.root,wName,4096,0);rNode.pipe=pipe;wNode.pipe=pipe;var readableStream=FS.createStream({path:rName,node:rNode,flags:FS.modeStringToFlags("r"),seekable:false,stream_ops:PIPEFS.stream_ops});rNode.stream=readableStream;var writableStream=FS.createStream({path:wName,node:wNode,flags:FS.modeStringToFlags("w"),seekable:false,stream_ops:PIPEFS.stream_ops});wNode.stream=writableStream;return{readable_fd:readableStream.fd,writable_fd:writableStream.fd}},stream_ops:{poll:function(stream){var pipe=stream.node.pipe;if((stream.flags&2097155)===1){return 256|4}else{if(pipe.buckets.length>0){for(var i=0;i<pipe.buckets.length;i++){var bucket=pipe.buckets[i];if(bucket.offset-bucket.roffset>0){return 64|1}}}}return 0},ioctl:function(stream,request,varargs){return ERRNO_CODES.EINVAL},fsync:function(stream){return ERRNO_CODES.EINVAL},read:function(stream,buffer,offset,length,position){var pipe=stream.node.pipe;var currentLength=0;for(var i=0;i<pipe.buckets.length;i++){var bucket=pipe.buckets[i];currentLength+=bucket.offset-bucket.roffset}assert(buffer instanceof ArrayBuffer||ArrayBuffer.isView(buffer));var data=buffer.subarray(offset,offset+length);if(length<=0){return 0}if(currentLength==0){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}var toRead=Math.min(currentLength,length);var totalRead=toRead;var toRemove=0;for(var i=0;i<pipe.buckets.length;i++){var currBucket=pipe.buckets[i];var bucketSize=currBucket.offset-currBucket.roffset;if(toRead<=bucketSize){var tmpSlice=currBucket.buffer.subarray(currBucket.roffset,currBucket.offset);if(toRead<bucketSize){tmpSlice=tmpSlice.subarray(0,toRead);currBucket.roffset+=toRead}else{toRemove++}data.set(tmpSlice);break}else{var tmpSlice=currBucket.buffer.subarray(currBucket.roffset,currBucket.offset);data.set(tmpSlice);data=data.subarray(tmpSlice.byteLength);toRead-=tmpSlice.byteLength;toRemove++}}if(toRemove&&toRemove==pipe.buckets.length){toRemove--;pipe.buckets[toRemove].offset=0;pipe.buckets[toRemove].roffset=0}pipe.buckets.splice(0,toRemove);return totalRead},write:function(stream,buffer,offset,length,position){var pipe=stream.node.pipe;assert(buffer instanceof ArrayBuffer||ArrayBuffer.isView(buffer));var data=buffer.subarray(offset,offset+length);var dataLen=data.byteLength;if(dataLen<=0){return 0}var currBucket=null;if(pipe.buckets.length==0){currBucket={buffer:new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),offset:0,roffset:0};pipe.buckets.push(currBucket)}else{currBucket=pipe.buckets[pipe.buckets.length-1]}assert(currBucket.offset<=PIPEFS.BUCKET_BUFFER_SIZE);var freeBytesInCurrBuffer=PIPEFS.BUCKET_BUFFER_SIZE-currBucket.offset;if(freeBytesInCurrBuffer>=dataLen){currBucket.buffer.set(data,currBucket.offset);currBucket.offset+=dataLen;return dataLen}else if(freeBytesInCurrBuffer>0){currBucket.buffer.set(data.subarray(0,freeBytesInCurrBuffer),currBucket.offset);currBucket.offset+=freeBytesInCurrBuffer;data=data.subarray(freeBytesInCurrBuffer,data.byteLength)}var numBuckets=data.byteLength/PIPEFS.BUCKET_BUFFER_SIZE|0;var remElements=data.byteLength%PIPEFS.BUCKET_BUFFER_SIZE;for(var i=0;i<numBuckets;i++){var newBucket={buffer:new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),offset:PIPEFS.BUCKET_BUFFER_SIZE,roffset:0};pipe.buckets.push(newBucket);newBucket.buffer.set(data.subarray(0,PIPEFS.BUCKET_BUFFER_SIZE));data=data.subarray(PIPEFS.BUCKET_BUFFER_SIZE,data.byteLength)}if(remElements>0){var newBucket={buffer:new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),offset:data.byteLength,roffset:0};pipe.buckets.push(newBucket);newBucket.buffer.set(data)}return dataLen},close:function(stream){var pipe=stream.node.pipe;pipe.buckets=null}},nextname:function(){if(!PIPEFS.nextname.current){PIPEFS.nextname.current=0}return"pipe["+PIPEFS.nextname.current+++"]"}};Module["PIPEFS"]=PIPEFS;function ___syscall42(which,varargs){SYSCALLS.varargs=varargs;try{var fdPtr=SYSCALLS.get();if(fdPtr==0){throw new FS.ErrnoError(14)}var res=PIPEFS.createPipe();HEAP32[fdPtr>>2]=res.readable_fd;HEAP32[fdPtr+4>>2]=res.writable_fd;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall42"]=___syscall42;function ___syscall5(which,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(),flags=SYSCALLS.get(),mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall5"]=___syscall5;function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),op=SYSCALLS.get();switch(op){case 21509:case 21505:{if(!stream.tty)return-25;return 0}case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return-25;return 0}case 21519:{if(!stream.tty)return-25;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return-25;return-22}case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return-25;return 0}case 21524:{if(!stream.tty)return-25;return 0}default:abort("bad ioctl syscall "+op)}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall54"]=___syscall54;function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall6"]=___syscall6;function ___syscall60(which,varargs){SYSCALLS.varargs=varargs;try{var mask=SYSCALLS.get();var old=SYSCALLS.umask;SYSCALLS.umask=mask;return old}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall60"]=___syscall60;function ___syscall64(which,varargs){SYSCALLS.varargs=varargs;try{return PROCINFO.ppid}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall64"]=___syscall64;function ___syscall75(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall75"]=___syscall75;function ___syscall77(which,varargs){SYSCALLS.varargs=varargs;try{var who=SYSCALLS.get(),usage=SYSCALLS.get();_memset(usage,0,136);HEAP32[usage>>2]=1;HEAP32[usage+4>>2]=2;HEAP32[usage+8>>2]=3;HEAP32[usage+12>>2]=4;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall77"]=___syscall77;function ___syscall83(which,varargs){SYSCALLS.varargs=varargs;try{var target=SYSCALLS.getStr(),linkpath=SYSCALLS.getStr();FS.symlink(target,linkpath);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall83"]=___syscall83;function ___syscall85(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),buf=SYSCALLS.get(),bufsize=SYSCALLS.get();return SYSCALLS.doReadlink(path,buf,bufsize)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall85"]=___syscall85;function ___syscall9(which,varargs){SYSCALLS.varargs=varargs;try{var oldpath=SYSCALLS.get(),newpath=SYSCALLS.get();return-31}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall9"]=___syscall9;function __emscripten_syscall_munmap(addr,len){if(addr===-1||len===0){return-22}var info=SYSCALLS.mappings[addr];if(!info)return 0;if(len===info.len){var stream=FS.getStream(info.fd);SYSCALLS.doMsync(addr,stream,len,info.flags);FS.munmap(stream);SYSCALLS.mappings[addr]=null;if(info.allocated){_free(info.malloc)}}return 0}Module["__emscripten_syscall_munmap"]=__emscripten_syscall_munmap;function ___syscall91(which,varargs){SYSCALLS.varargs=varargs;try{var addr=SYSCALLS.get(),len=SYSCALLS.get();return __emscripten_syscall_munmap(addr,len)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___syscall91"]=___syscall91;function ___unlock(){}Module["___unlock"]=___unlock;function _exit(status){exit(status)}Module["_exit"]=_exit;function __exit(a0){return _exit(a0)}Module["__exit"]=__exit;function _abort(){Module["abort"]()}Module["_abort"]=_abort;var __sigalrm_handler=0;Module["__sigalrm_handler"]=__sigalrm_handler;function _alarm(seconds){setTimeout(function(){if(__sigalrm_handler)dynCall_vi(__sigalrm_handler,0)},seconds*1e3)}Module["_alarm"]=_alarm;function _chroot(path){___setErrNo(13);return-1}Module["_chroot"]=_chroot;function _clock(){if(_clock.start===undefined)_clock.start=Date.now();return(Date.now()-_clock.start)*(1e6/1e3)|0}Module["_clock"]=_clock;function _emscripten_get_now_res(){if(typeof performance==="object"&&performance&&typeof performance["now"]==="function"){return 1e3}else{return 1e3*1e3}}Module["_emscripten_get_now_res"]=_emscripten_get_now_res;function _emscripten_get_now(){abort()}Module["_emscripten_get_now"]=_emscripten_get_now;function _emscripten_get_now_is_monotonic(){return 0||typeof performance==="object"&&performance&&typeof performance["now"]==="function"}Module["_emscripten_get_now_is_monotonic"]=_emscripten_get_now_is_monotonic;function _clock_getres(clk_id,res){var nsec;if(clk_id===0){nsec=1e3*1e3}else if(clk_id===1&&_emscripten_get_now_is_monotonic()){nsec=_emscripten_get_now_res()}else{___setErrNo(22);return-1}HEAP32[res>>2]=nsec/1e9|0;HEAP32[res+4>>2]=nsec;return 0}Module["_clock_getres"]=_clock_getres;function _clock_gettime(clk_id,tp){var now;if(clk_id===0){now=Date.now()}else if(clk_id===1&&_emscripten_get_now_is_monotonic()){now=_emscripten_get_now()}else{___setErrNo(22);return-1}HEAP32[tp>>2]=now/1e3|0;HEAP32[tp+4>>2]=now%1e3*1e3*1e3|0;return 0}Module["_clock_gettime"]=_clock_gettime;function _clock_settime(clk_id,tp){___setErrNo(clk_id===0?1:22);return-1}Module["_clock_settime"]=_clock_settime;function _confstr(name,buf,len){var value;switch(name){case 0:value=ENV["PATH"]||"/";break;case 1:value="POSIX_V6_ILP32_OFF32\nPOSIX_V6_ILP32_OFFBIG";break;case 2:value="glibc 2.14";break;case 3:value="";break;case 1118:case 1122:case 1124:case 1125:case 1126:case 1128:case 1129:case 1130:value="";break;case 1116:case 1117:case 1121:value="-m32";break;case 1120:value="-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64";break;default:___setErrNo(22);return 0}if(len==0||buf==0){return value.length+1}else{var length=Math.min(len,value.length);for(var i=0;i<length;i++){HEAP8[buf+i>>0]=value.charCodeAt(i)}if(len>length)HEAP8[buf+i++>>0]=0;return i}}Module["_confstr"]=_confstr;function _dlopen(){abort("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking")}Module["_dlopen"]=_dlopen;function _dlerror(){return _dlopen.apply(null,arguments)}Module["_dlerror"]=_dlerror;function _dlsym(){return _dlopen.apply(null,arguments)}Module["_dlsym"]=_dlsym;function _emscripten_set_main_loop_timing(mode,value){Browser.mainLoop.timingMode=mode;Browser.mainLoop.timingValue=value;if(!Browser.mainLoop.func){console.error("emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.");return 1}if(mode==0){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setTimeout(){var timeUntilNextTick=Math.max(0,Browser.mainLoop.tickStartTime+value-_emscripten_get_now())|0;setTimeout(Browser.mainLoop.runner,timeUntilNextTick)};Browser.mainLoop.method="timeout"}else if(mode==1){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_rAF(){Browser.requestAnimationFrame(Browser.mainLoop.runner)};Browser.mainLoop.method="rAF"}else if(mode==2){if(typeof setImmediate==="undefined"){var setImmediates=[];var emscriptenMainLoopMessageId="setimmediate";var Browser_setImmediate_messageHandler=function(event){if(event.data===emscriptenMainLoopMessageId||event.data.target===emscriptenMainLoopMessageId){event.stopPropagation();setImmediates.shift()()}};addEventListener("message",Browser_setImmediate_messageHandler,true);setImmediate=function Browser_emulated_setImmediate(func){setImmediates.push(func);if(ENVIRONMENT_IS_WORKER){if(Module["setImmediates"]===undefined)Module["setImmediates"]=[];Module["setImmediates"].push(func);postMessage({target:emscriptenMainLoopMessageId})}else postMessage(emscriptenMainLoopMessageId,"*")}}Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setImmediate(){setImmediate(Browser.mainLoop.runner)};Browser.mainLoop.method="immediate"}return 0}Module["_emscripten_set_main_loop_timing"]=_emscripten_set_main_loop_timing;function _emscripten_set_main_loop(func,fps,simulateInfiniteLoop,arg,noSetTiming){noExitRuntime=true;assert(!Browser.mainLoop.func,"emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");Browser.mainLoop.func=func;Browser.mainLoop.arg=arg;var browserIterationFunc;if(typeof arg!=="undefined"){browserIterationFunc=function(){Module["dynCall_vi"](func,arg)}}else{browserIterationFunc=function(){Module["dynCall_v"](func)}}var thisMainLoopId=Browser.mainLoop.currentlyRunningMainloop;Browser.mainLoop.runner=function Browser_mainLoop_runner(){if(ABORT)return;if(Browser.mainLoop.queue.length>0){var start=Date.now();var blocker=Browser.mainLoop.queue.shift();blocker.func(blocker.arg);if(Browser.mainLoop.remainingBlockers){var remaining=Browser.mainLoop.remainingBlockers;var next=remaining%1==0?remaining-1:Math.floor(remaining);if(blocker.counted){Browser.mainLoop.remainingBlockers=next}else{next=next+.5;Browser.mainLoop.remainingBlockers=(8*remaining+next)/9}}console.log('main loop blocker "'+blocker.name+'" took '+(Date.now()-start)+" ms");Browser.mainLoop.updateStatus();if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;setTimeout(Browser.mainLoop.runner,0);return}if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;Browser.mainLoop.currentFrameNumber=Browser.mainLoop.currentFrameNumber+1|0;if(Browser.mainLoop.timingMode==1&&Browser.mainLoop.timingValue>1&&Browser.mainLoop.currentFrameNumber%Browser.mainLoop.timingValue!=0){Browser.mainLoop.scheduler();return}else if(Browser.mainLoop.timingMode==0){Browser.mainLoop.tickStartTime=_emscripten_get_now()}if(Browser.mainLoop.method==="timeout"&&Module.ctx){err("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");Browser.mainLoop.method=""}Browser.mainLoop.runIter(browserIterationFunc);checkStackCookie();if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;if(typeof SDL==="object"&&SDL.audio&&SDL.audio.queueNewAudioData)SDL.audio.queueNewAudioData();Browser.mainLoop.scheduler()};if(!noSetTiming){if(fps&&fps>0)_emscripten_set_main_loop_timing(0,1e3/fps);else _emscripten_set_main_loop_timing(1,1);Browser.mainLoop.scheduler()}if(simulateInfiniteLoop){throw"SimulateInfiniteLoop"}}Module["_emscripten_set_main_loop"]=_emscripten_set_main_loop;var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function(){Browser.mainLoop.scheduler=null;Browser.mainLoop.currentlyRunningMainloop++},resume:function(){Browser.mainLoop.currentlyRunningMainloop++;var timingMode=Browser.mainLoop.timingMode;var timingValue=Browser.mainLoop.timingValue;var func=Browser.mainLoop.func;Browser.mainLoop.func=null;_emscripten_set_main_loop(func,0,false,Browser.mainLoop.arg,true);_emscripten_set_main_loop_timing(timingMode,timingValue);Browser.mainLoop.scheduler()},updateStatus:function(){if(Module["setStatus"]){var message=Module["statusMessage"]||"Please wait...";var remaining=Browser.mainLoop.remainingBlockers;var expected=Browser.mainLoop.expectedBlockers;if(remaining){if(remaining<expected){Module["setStatus"](message+" ("+(expected-remaining)+"/"+expected+")")}else{Module["setStatus"](message)}}else{Module["setStatus"]("")}}},runIter:function(func){if(ABORT)return;if(Module["preMainLoop"]){var preRet=Module["preMainLoop"]();if(preRet===false){return}}try{func()}catch(e){if(e instanceof ExitStatus){return}else{if(e&&typeof e==="object"&&e.stack)err("exception thrown: "+[e,e.stack]);throw e}}if(Module["postMainLoop"])Module["postMainLoop"]()}},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function(){if(!Module["preloadPlugins"])Module["preloadPlugins"]=[];if(Browser.initted)return;Browser.initted=true;try{new Blob;Browser.hasBlobConstructor=true}catch(e){Browser.hasBlobConstructor=false;console.log("warning: no blob constructor, cannot create blobs with mimetypes")}Browser.BlobBuilder=typeof MozBlobBuilder!="undefined"?MozBlobBuilder:typeof WebKitBlobBuilder!="undefined"?WebKitBlobBuilder:!Browser.hasBlobConstructor?console.log("warning: no BlobBuilder"):null;Browser.URLObject=typeof window!="undefined"?window.URL?window.URL:window.webkitURL:undefined;if(!Module.noImageDecoding&&typeof Browser.URLObject==="undefined"){console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");Module.noImageDecoding=true}var imagePlugin={};imagePlugin["canHandle"]=function imagePlugin_canHandle(name){return!Module.noImageDecoding&&/\.(jpg|jpeg|png|bmp)$/i.test(name)};imagePlugin["handle"]=function imagePlugin_handle(byteArray,name,onload,onerror){var b=null;if(Browser.hasBlobConstructor){try{b=new Blob([byteArray],{type:Browser.getMimetype(name)});if(b.size!==byteArray.length){b=new Blob([new Uint8Array(byteArray).buffer],{type:Browser.getMimetype(name)})}}catch(e){warnOnce("Blob constructor present but fails: "+e+"; falling back to blob builder")}}if(!b){var bb=new Browser.BlobBuilder;bb.append(new Uint8Array(byteArray).buffer);b=bb.getBlob()}var url=Browser.URLObject.createObjectURL(b);assert(typeof url=="string","createObjectURL must return a url as a string");var img=new Image;img.onload=function img_onload(){assert(img.complete,"Image "+name+" could not be decoded");var canvas=document.createElement("canvas");canvas.width=img.width;canvas.height=img.height;var ctx=canvas.getContext("2d");ctx.drawImage(img,0,0);Module["preloadedImages"][name]=canvas;Browser.URLObject.revokeObjectURL(url);if(onload)onload(byteArray)};img.onerror=function img_onerror(event){console.log("Image "+url+" could not be decoded");if(onerror)onerror()};img.src=url};Module["preloadPlugins"].push(imagePlugin);var audioPlugin={};audioPlugin["canHandle"]=function audioPlugin_canHandle(name){return!Module.noAudioDecoding&&name.substr(-4)in{".ogg":1,".wav":1,".mp3":1}};audioPlugin["handle"]=function audioPlugin_handle(byteArray,name,onload,onerror){var done=false;function finish(audio){if(done)return;done=true;Module["preloadedAudios"][name]=audio;if(onload)onload(byteArray)}function fail(){if(done)return;done=true;Module["preloadedAudios"][name]=new Audio;if(onerror)onerror()}if(Browser.hasBlobConstructor){try{var b=new Blob([byteArray],{type:Browser.getMimetype(name)})}catch(e){return fail()}var url=Browser.URLObject.createObjectURL(b);assert(typeof url=="string","createObjectURL must return a url as a string");var audio=new Audio;audio.addEventListener("canplaythrough",function(){finish(audio)},false);audio.onerror=function audio_onerror(event){if(done)return;console.log("warning: browser could not fully decode audio "+name+", trying slower base64 approach");function encode64(data){var BASE="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var PAD="=";var ret="";var leftchar=0;var leftbits=0;for(var i=0;i<data.length;i++){leftchar=leftchar<<8|data[i];leftbits+=8;while(leftbits>=6){var curr=leftchar>>leftbits-6&63;leftbits-=6;ret+=BASE[curr]}}if(leftbits==2){ret+=BASE[(leftchar&3)<<4];ret+=PAD+PAD}else if(leftbits==4){ret+=BASE[(leftchar&15)<<2];ret+=PAD}return ret}audio.src="data:audio/x-"+name.substr(-3)+";base64,"+encode64(byteArray);finish(audio)};audio.src=url;Browser.safeSetTimeout(function(){finish(audio)},1e4)}else{return fail()}};Module["preloadPlugins"].push(audioPlugin);function pointerLockChange(){Browser.pointerLock=document["pointerLockElement"]===Module["canvas"]||document["mozPointerLockElement"]===Module["canvas"]||document["webkitPointerLockElement"]===Module["canvas"]||document["msPointerLockElement"]===Module["canvas"]}var canvas=Module["canvas"];if(canvas){canvas.requestPointerLock=canvas["requestPointerLock"]||canvas["mozRequestPointerLock"]||canvas["webkitRequestPointerLock"]||canvas["msRequestPointerLock"]||function(){};canvas.exitPointerLock=document["exitPointerLock"]||document["mozExitPointerLock"]||document["webkitExitPointerLock"]||document["msExitPointerLock"]||function(){};canvas.exitPointerLock=canvas.exitPointerLock.bind(document);document.addEventListener("pointerlockchange",pointerLockChange,false);document.addEventListener("mozpointerlockchange",pointerLockChange,false);document.addEventListener("webkitpointerlockchange",pointerLockChange,false);document.addEventListener("mspointerlockchange",pointerLockChange,false);if(Module["elementPointerLock"]){canvas.addEventListener("click",function(ev){if(!Browser.pointerLock&&Module["canvas"].requestPointerLock){Module["canvas"].requestPointerLock();ev.preventDefault()}},false)}}},createContext:function(canvas,useWebGL,setInModule,webGLContextAttributes){if(useWebGL&&Module.ctx&&canvas==Module.canvas)return Module.ctx;var ctx;var contextHandle;if(useWebGL){var contextAttributes={antialias:false,alpha:false,majorVersion:1};if(webGLContextAttributes){for(var attribute in webGLContextAttributes){contextAttributes[attribute]=webGLContextAttributes[attribute]}}if(typeof GL!=="undefined"){contextHandle=GL.createContext(canvas,contextAttributes);if(contextHandle){ctx=GL.getContext(contextHandle).GLctx}}}else{ctx=canvas.getContext("2d")}if(!ctx)return null;if(setInModule){if(!useWebGL)assert(typeof GLctx==="undefined","cannot set in module if GLctx is used, but we are a non-GL context that would replace it");Module.ctx=ctx;if(useWebGL)GL.makeContextCurrent(contextHandle);Module.useWebGL=useWebGL;Browser.moduleContextCreatedCallbacks.forEach(function(callback){callback()});Browser.init()}return ctx},destroyContext:function(canvas,useWebGL,setInModule){},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function(lockPointer,resizeCanvas,vrDevice){Browser.lockPointer=lockPointer;Browser.resizeCanvas=resizeCanvas;Browser.vrDevice=vrDevice;if(typeof Browser.lockPointer==="undefined")Browser.lockPointer=true;if(typeof Browser.resizeCanvas==="undefined")Browser.resizeCanvas=false;if(typeof Browser.vrDevice==="undefined")Browser.vrDevice=null;var canvas=Module["canvas"];function fullscreenChange(){Browser.isFullscreen=false;var canvasContainer=canvas.parentNode;if((document["fullscreenElement"]||document["mozFullScreenElement"]||document["msFullscreenElement"]||document["webkitFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvasContainer){canvas.exitFullscreen=Browser.exitFullscreen;if(Browser.lockPointer)canvas.requestPointerLock();Browser.isFullscreen=true;if(Browser.resizeCanvas){Browser.setFullscreenCanvasSize()}else{Browser.updateCanvasDimensions(canvas)}}else{canvasContainer.parentNode.insertBefore(canvas,canvasContainer);canvasContainer.parentNode.removeChild(canvasContainer);if(Browser.resizeCanvas){Browser.setWindowedCanvasSize()}else{Browser.updateCanvasDimensions(canvas)}}if(Module["onFullScreen"])Module["onFullScreen"](Browser.isFullscreen);if(Module["onFullscreen"])Module["onFullscreen"](Browser.isFullscreen)}if(!Browser.fullscreenHandlersInstalled){Browser.fullscreenHandlersInstalled=true;document.addEventListener("fullscreenchange",fullscreenChange,false);document.addEventListener("mozfullscreenchange",fullscreenChange,false);document.addEventListener("webkitfullscreenchange",fullscreenChange,false);document.addEventListener("MSFullscreenChange",fullscreenChange,false)}var canvasContainer=document.createElement("div");canvas.parentNode.insertBefore(canvasContainer,canvas);canvasContainer.appendChild(canvas);canvasContainer.requestFullscreen=canvasContainer["requestFullscreen"]||canvasContainer["mozRequestFullScreen"]||canvasContainer["msRequestFullscreen"]||(canvasContainer["webkitRequestFullscreen"]?function(){canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"])}:null)||(canvasContainer["webkitRequestFullScreen"]?function(){canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"])}:null);if(vrDevice){canvasContainer.requestFullscreen({vrDisplay:vrDevice})}else{canvasContainer.requestFullscreen()}},requestFullScreen:function(lockPointer,resizeCanvas,vrDevice){err("Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.");Browser.requestFullScreen=function(lockPointer,resizeCanvas,vrDevice){return Browser.requestFullscreen(lockPointer,resizeCanvas,vrDevice)};return Browser.requestFullscreen(lockPointer,resizeCanvas,vrDevice)},exitFullscreen:function(){if(!Browser.isFullscreen){return false}var CFS=document["exitFullscreen"]||document["cancelFullScreen"]||document["mozCancelFullScreen"]||document["msExitFullscreen"]||document["webkitCancelFullScreen"]||function(){};CFS.apply(document,[]);return true},nextRAF:0,fakeRequestAnimationFrame:function(func){var now=Date.now();if(Browser.nextRAF===0){Browser.nextRAF=now+1e3/60}else{while(now+2>=Browser.nextRAF){Browser.nextRAF+=1e3/60}}var delay=Math.max(Browser.nextRAF-now,0);setTimeout(func,delay)},requestAnimationFrame:function(func){if(typeof requestAnimationFrame==="function"){requestAnimationFrame(func);return}var RAF=Browser.fakeRequestAnimationFrame;RAF(func)},safeCallback:function(func){return function(){if(!ABORT)return func.apply(null,arguments)}},allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function(){Browser.allowAsyncCallbacks=false},resumeAsyncCallbacks:function(){Browser.allowAsyncCallbacks=true;if(Browser.queuedAsyncCallbacks.length>0){var callbacks=Browser.queuedAsyncCallbacks;Browser.queuedAsyncCallbacks=[];callbacks.forEach(function(func){func()})}},safeRequestAnimationFrame:function(func){return Browser.requestAnimationFrame(function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}})},safeSetTimeout:function(func,timeout){noExitRuntime=true;return setTimeout(function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}},timeout)},safeSetInterval:function(func,timeout){noExitRuntime=true;return setInterval(function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}},timeout)},getMimetype:function(name){return{"jpg":"image/jpeg","jpeg":"image/jpeg","png":"image/png","bmp":"image/bmp","ogg":"audio/ogg","wav":"audio/wav","mp3":"audio/mpeg"}[name.substr(name.lastIndexOf(".")+1)]},getUserMedia:function(func){if(!window.getUserMedia){window.getUserMedia=navigator["getUserMedia"]||navigator["mozGetUserMedia"]}window.getUserMedia(func)},getMovementX:function(event){return event["movementX"]||event["mozMovementX"]||event["webkitMovementX"]||0},getMovementY:function(event){return event["movementY"]||event["mozMovementY"]||event["webkitMovementY"]||0},getMouseWheelDelta:function(event){var delta=0;switch(event.type){case"DOMMouseScroll":delta=event.detail/3;break;case"mousewheel":delta=event.wheelDelta/120;break;case"wheel":delta=event.deltaY;switch(event.deltaMode){case 0:delta/=100;break;case 1:delta/=3;break;case 2:delta*=80;break;default:throw"unrecognized mouse wheel delta mode: "+event.deltaMode}break;default:throw"unrecognized mouse wheel event: "+event.type}return delta},mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function(event){if(Browser.pointerLock){if(event.type!="mousemove"&&"mozMovementX"in event){Browser.mouseMovementX=Browser.mouseMovementY=0}else{Browser.mouseMovementX=Browser.getMovementX(event);Browser.mouseMovementY=Browser.getMovementY(event)}if(typeof SDL!="undefined"){Browser.mouseX=SDL.mouseX+Browser.mouseMovementX;Browser.mouseY=SDL.mouseY+Browser.mouseMovementY}else{Browser.mouseX+=Browser.mouseMovementX;Browser.mouseY+=Browser.mouseMovementY}}else{var rect=Module["canvas"].getBoundingClientRect();var cw=Module["canvas"].width;var ch=Module["canvas"].height;var scrollX=typeof window.scrollX!=="undefined"?window.scrollX:window.pageXOffset;var scrollY=typeof window.scrollY!=="undefined"?window.scrollY:window.pageYOffset;assert(typeof scrollX!=="undefined"&&typeof scrollY!=="undefined","Unable to retrieve scroll position, mouse positions likely broken.");if(event.type==="touchstart"||event.type==="touchend"||event.type==="touchmove"){var touch=event.touch;if(touch===undefined){return}var adjustedX=touch.pageX-(scrollX+rect.left);var adjustedY=touch.pageY-(scrollY+rect.top);adjustedX=adjustedX*(cw/rect.width);adjustedY=adjustedY*(ch/rect.height);var coords={x:adjustedX,y:adjustedY};if(event.type==="touchstart"){Browser.lastTouches[touch.identifier]=coords;Browser.touches[touch.identifier]=coords}else if(event.type==="touchend"||event.type==="touchmove"){var last=Browser.touches[touch.identifier];if(!last)last=coords;Browser.lastTouches[touch.identifier]=last;Browser.touches[touch.identifier]=coords}return}var x=event.pageX-(scrollX+rect.left);var y=event.pageY-(scrollY+rect.top);x=x*(cw/rect.width);y=y*(ch/rect.height);Browser.mouseMovementX=x-Browser.mouseX;Browser.mouseMovementY=y-Browser.mouseY;Browser.mouseX=x;Browser.mouseY=y}},asyncLoad:function(url,onload,onerror,noRunDep){var dep=!noRunDep?getUniqueRunDependency("al "+url):"";readAsync(url,function(arrayBuffer){assert(arrayBuffer,'Loading data file "'+url+'" failed (no arrayBuffer).');onload(new Uint8Array(arrayBuffer));if(dep)removeRunDependency(dep)},function(event){if(onerror){onerror()}else{throw'Loading data file "'+url+'" failed.'}});if(dep)addRunDependency(dep)},resizeListeners:[],updateResizeListeners:function(){var canvas=Module["canvas"];Browser.resizeListeners.forEach(function(listener){listener(canvas.width,canvas.height)})},setCanvasSize:function(width,height,noUpdates){var canvas=Module["canvas"];Browser.updateCanvasDimensions(canvas,width,height);if(!noUpdates)Browser.updateResizeListeners()},windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen>>2];flags=flags|8388608;HEAP32[SDL.screen>>2]=flags}Browser.updateCanvasDimensions(Module["canvas"]);Browser.updateResizeListeners()},setWindowedCanvasSize:function(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen>>2];flags=flags&~8388608;HEAP32[SDL.screen>>2]=flags}Browser.updateCanvasDimensions(Module["canvas"]);Browser.updateResizeListeners()},updateCanvasDimensions:function(canvas,wNative,hNative){if(wNative&&hNative){canvas.widthNative=wNative;canvas.heightNative=hNative}else{wNative=canvas.widthNative;hNative=canvas.heightNative}var w=wNative;var h=hNative;if(Module["forcedAspectRatio"]&&Module["forcedAspectRatio"]>0){if(w/h<Module["forcedAspectRatio"]){w=Math.round(h*Module["forcedAspectRatio"])}else{h=Math.round(w/Module["forcedAspectRatio"])}}if((document["fullscreenElement"]||document["mozFullScreenElement"]||document["msFullscreenElement"]||document["webkitFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvas.parentNode&&typeof screen!="undefined"){var factor=Math.min(screen.width/w,screen.height/h);w=Math.round(w*factor);h=Math.round(h*factor)}if(Browser.resizeCanvas){if(canvas.width!=w)canvas.width=w;if(canvas.height!=h)canvas.height=h;if(typeof canvas.style!="undefined"){canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}else{if(canvas.width!=wNative)canvas.width=wNative;if(canvas.height!=hNative)canvas.height=hNative;if(typeof canvas.style!="undefined"){if(w!=wNative||h!=hNative){canvas.style.setProperty("width",w+"px","important");canvas.style.setProperty("height",h+"px","important")}else{canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}}},wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function(){var handle=Browser.nextWgetRequestHandle;Browser.nextWgetRequestHandle++;return handle}};Module["Browser"]=Browser;function _emscripten_force_exit(status){warnOnce("emscripten_force_exit cannot actually shut down the runtime, as the build does not have EXIT_RUNTIME set");noExitRuntime=false;exit(status)}Module["_emscripten_force_exit"]=_emscripten_force_exit;function _emscripten_get_heap_size(){return HEAP8.length}Module["_emscripten_get_heap_size"]=_emscripten_get_heap_size;function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest)}Module["_emscripten_memcpy_big"]=_emscripten_memcpy_big;function _endpwent(){throw"endpwent: TODO"}Module["_endpwent"]=_endpwent;function _execl(){___setErrNo(8);return-1}Module["_execl"]=_execl;function _execv(){return _execl.apply(null,arguments)}Module["_execv"]=_execv;function _execve(){return _execl.apply(null,arguments)}Module["_execve"]=_execve;function _fd_write(stream,iov,iovcnt,pnum){try{stream=FS.getStream(stream);if(!stream)throw new FS.ErrnoError(9);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["_fd_write"]=_fd_write;function _fexecve(){return _execl.apply(null,arguments)}Module["_fexecve"]=_fexecve;function _flock(fd,operation){return 0}Module["_flock"]=_flock;function _fork(){___setErrNo(11);return-1}Module["_fork"]=_fork;function _fpathconf(fildes,name){switch(name){case 0:return 32e3;case 1:case 2:case 3:return 255;case 4:case 5:case 16:case 17:case 18:return 4096;case 6:case 7:case 20:return 1;case 8:return 0;case 9:case 10:case 11:case 12:case 14:case 15:case 19:return-1;case 13:return 64}___setErrNo(22);return-1}Module["_fpathconf"]=_fpathconf;var GAI_ERRNO_MESSAGES={};Module["GAI_ERRNO_MESSAGES"]=GAI_ERRNO_MESSAGES;function _gai_strerror(val){var buflen=256;if(!_gai_strerror.buffer){_gai_strerror.buffer=_malloc(buflen);GAI_ERRNO_MESSAGES["0"]="Success";GAI_ERRNO_MESSAGES[""+-1]="Invalid value for 'ai_flags' field";GAI_ERRNO_MESSAGES[""+-2]="NAME or SERVICE is unknown";GAI_ERRNO_MESSAGES[""+-3]="Temporary failure in name resolution";GAI_ERRNO_MESSAGES[""+-4]="Non-recoverable failure in name res";GAI_ERRNO_MESSAGES[""+-6]="'ai_family' not supported";GAI_ERRNO_MESSAGES[""+-7]="'ai_socktype' not supported";GAI_ERRNO_MESSAGES[""+-8]="SERVICE not supported for 'ai_socktype'";GAI_ERRNO_MESSAGES[""+-10]="Memory allocation failure";GAI_ERRNO_MESSAGES[""+-11]="System error returned in 'errno'";GAI_ERRNO_MESSAGES[""+-12]="Argument buffer overflow"}var msg="Unknown error";if(val in GAI_ERRNO_MESSAGES){if(GAI_ERRNO_MESSAGES[val].length>buflen-1){msg="Message too long"}else{msg=GAI_ERRNO_MESSAGES[val]}}writeAsciiToMemory(msg,_gai_strerror.buffer);return _gai_strerror.buffer}Module["_gai_strerror"]=_gai_strerror;function _getaddrinfo(node,service,hint,out){var addr=0;var port=0;var flags=0;var family=0;var type=0;var proto=0;var ai;function allocaddrinfo(family,type,proto,canon,addr,port){var sa,salen,ai;var res;salen=family===10?28:16;addr=family===10?__inet_ntop6_raw(addr):__inet_ntop4_raw(addr);sa=_malloc(salen);res=__write_sockaddr(sa,family,addr,port);assert(!res.errno);ai=_malloc(32);HEAP32[ai+4>>2]=family;HEAP32[ai+8>>2]=type;HEAP32[ai+12>>2]=proto;HEAP32[ai+24>>2]=canon;HEAP32[ai+20>>2]=sa;if(family===10){HEAP32[ai+16>>2]=28}else{HEAP32[ai+16>>2]=16}HEAP32[ai+28>>2]=0;return ai}if(hint){flags=HEAP32[hint>>2];family=HEAP32[hint+4>>2];type=HEAP32[hint+8>>2];proto=HEAP32[hint+12>>2]}if(type&&!proto){proto=type===2?17:6}if(!type&&proto){type=proto===17?2:1}if(proto===0){proto=6}if(type===0){type=1}if(!node&&!service){return-2}if(flags&~(1|2|4|1024|8|16|32)){return-1}if(hint!==0&&HEAP32[hint>>2]&2&&!node){return-1}if(flags&32){return-2}if(type!==0&&type!==1&&type!==2){return-7}if(family!==0&&family!==2&&family!==10){return-6}if(service){service=UTF8ToString(service);port=parseInt(service,10);if(isNaN(port)){if(flags&1024){return-2}return-8}}if(!node){if(family===0){family=2}if((flags&1)===0){if(family===2){addr=_htonl(2130706433)}else{addr=[0,0,0,1]}}ai=allocaddrinfo(family,type,proto,null,addr,port);HEAP32[out>>2]=ai;return 0}node=UTF8ToString(node);addr=__inet_pton4_raw(node);if(addr!==null){if(family===0||family===2){family=2}else if(family===10&&flags&8){addr=[0,0,_htonl(65535),addr];family=10}else{return-2}}else{addr=__inet_pton6_raw(node);if(addr!==null){if(family===0||family===10){family=10}else{return-2}}}if(addr!=null){ai=allocaddrinfo(family,type,proto,node,addr,port);HEAP32[out>>2]=ai;return 0}if(flags&4){return-2}node=DNS.lookup_name(node);addr=__inet_pton4_raw(node);if(family===0){family=2}else if(family===10){addr=[0,0,_htonl(65535),addr]}ai=allocaddrinfo(family,type,proto,null,addr,port);HEAP32[out>>2]=ai;return 0}Module["_getaddrinfo"]=_getaddrinfo;function _getenv(name){if(name===0)return 0;name=UTF8ToString(name);if(!ENV.hasOwnProperty(name))return 0;if(_getenv.ret)_free(_getenv.ret);_getenv.ret=allocateUTF8(ENV[name]);return _getenv.ret}Module["_getenv"]=_getenv;function _gethostbyname(name){name=UTF8ToString(name);var ret=_malloc(20);var nameBuf=_malloc(name.length+1);stringToUTF8(name,nameBuf,name.length+1);HEAP32[ret>>2]=nameBuf;var aliasesBuf=_malloc(4);HEAP32[aliasesBuf>>2]=0;HEAP32[ret+4>>2]=aliasesBuf;var afinet=2;HEAP32[ret+8>>2]=afinet;HEAP32[ret+12>>2]=4;var addrListBuf=_malloc(12);HEAP32[addrListBuf>>2]=addrListBuf+8;HEAP32[addrListBuf+4>>2]=0;HEAP32[addrListBuf+8>>2]=__inet_pton4_raw(DNS.lookup_name(name));HEAP32[ret+16>>2]=addrListBuf;return ret}Module["_gethostbyname"]=_gethostbyname;function _gethostbyaddr(addr,addrlen,type){if(type!==2){___setErrNo(97);return null}addr=HEAP32[addr>>2];var host=__inet_ntop4_raw(addr);var lookup=DNS.lookup_addr(host);if(lookup){host=lookup}var hostp=allocate(intArrayFromString(host),"i8",ALLOC_STACK);return _gethostbyname(hostp)}Module["_gethostbyaddr"]=_gethostbyaddr;function _getitimer(){throw"getitimer() is not implemented yet"}Module["_getitimer"]=_getitimer;function _getloadavg(loadavg,nelem){var limit=Math.min(nelem,3);var doubleSize=8;for(var i=0;i<limit;i++){HEAPF64[loadavg+i*doubleSize>>3]=.1}return limit}Module["_getloadavg"]=_getloadavg;function _getnameinfo(sa,salen,node,nodelen,serv,servlen,flags){var info=__read_sockaddr(sa,salen);if(info.errno){return-6}var port=info.port;var addr=info.addr;var overflowed=false;if(node&&nodelen){var lookup;if(flags&1||!(lookup=DNS.lookup_addr(addr))){if(flags&8){return-2}}else{addr=lookup}var numBytesWrittenExclNull=stringToUTF8(addr,node,nodelen);if(numBytesWrittenExclNull+1>=nodelen){overflowed=true}}if(serv&&servlen){port=""+port;var numBytesWrittenExclNull=stringToUTF8(port,serv,servlen);if(numBytesWrittenExclNull+1>=servlen){overflowed=true}}if(overflowed){return-12}return 0}Module["_getnameinfo"]=_getnameinfo;var Protocols={list:[],map:{}};Module["Protocols"]=Protocols;function _setprotoent(stayopen){function allocprotoent(name,proto,aliases){var nameBuf=_malloc(name.length+1);writeAsciiToMemory(name,nameBuf);var j=0;var length=aliases.length;var aliasListBuf=_malloc((length+1)*4);for(var i=0;i<length;i++,j+=4){var alias=aliases[i];var aliasBuf=_malloc(alias.length+1);writeAsciiToMemory(alias,aliasBuf);HEAP32[aliasListBuf+j>>2]=aliasBuf}HEAP32[aliasListBuf+j>>2]=0;var pe=_malloc(12);HEAP32[pe>>2]=nameBuf;HEAP32[pe+4>>2]=aliasListBuf;HEAP32[pe+8>>2]=proto;return pe}var list=Protocols.list;var map=Protocols.map;if(list.length===0){var entry=allocprotoent("tcp",6,["TCP"]);list.push(entry);map["tcp"]=map["6"]=entry;entry=allocprotoent("udp",17,["UDP"]);list.push(entry);map["udp"]=map["17"]=entry}_setprotoent.index=0}Module["_setprotoent"]=_setprotoent;function _getprotobyname(name){name=UTF8ToString(name);_setprotoent(true);var result=Protocols.map[name];return result}Module["_getprotobyname"]=_getprotobyname;function _getpwent(){throw"getpwent: TODO"}Module["_getpwent"]=_getpwent;function _getpwnam(){throw"getpwnam: TODO"}Module["_getpwnam"]=_getpwnam;function _getpwuid(uid){return 0}Module["_getpwuid"]=_getpwuid;function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}Module["_gettimeofday"]=_gettimeofday;var ___tm_timezone=(stringToUTF8("GMT",1944944,4),1944944);Module["___tm_timezone"]=___tm_timezone;function _gmtime_r(time,tmPtr){var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getUTCSeconds();HEAP32[tmPtr+4>>2]=date.getUTCMinutes();HEAP32[tmPtr+8>>2]=date.getUTCHours();HEAP32[tmPtr+12>>2]=date.getUTCDate();HEAP32[tmPtr+16>>2]=date.getUTCMonth();HEAP32[tmPtr+20>>2]=date.getUTCFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getUTCDay();HEAP32[tmPtr+36>>2]=0;HEAP32[tmPtr+32>>2]=0;var start=Date.UTC(date.getUTCFullYear(),0,1,0,0,0,0);var yday=(date.getTime()-start)/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+40>>2]=___tm_timezone;return tmPtr}Module["_gmtime_r"]=_gmtime_r;function _kill(pid,sig){err("Calling stub instead of kill()");___setErrNo(ERRNO_CODES.EPERM);return-1}Module["_kill"]=_kill;function _killpg(){err("Calling stub instead of killpg()");___setErrNo(ERRNO_CODES.EPERM);return-1}Module["_killpg"]=_killpg;function _tzset(){if(_tzset.called)return;_tzset.called=true;HEAP32[__get_timezone()>>2]=(new Date).getTimezoneOffset()*60;var winter=new Date(2e3,0,1);var summer=new Date(2e3,6,1);HEAP32[__get_daylight()>>2]=Number(winter.getTimezoneOffset()!=summer.getTimezoneOffset());function extractZone(date){var match=date.toTimeString().match(/\(([A-Za-z ]+)\)$/);return match?match[1]:"GMT"}var winterName=extractZone(winter);var summerName=extractZone(summer);var winterNamePtr=allocate(intArrayFromString(winterName),"i8",ALLOC_NORMAL);var summerNamePtr=allocate(intArrayFromString(summerName),"i8",ALLOC_NORMAL);if(summer.getTimezoneOffset()<winter.getTimezoneOffset()){HEAP32[__get_tzname()>>2]=winterNamePtr;HEAP32[__get_tzname()+4>>2]=summerNamePtr}else{HEAP32[__get_tzname()>>2]=summerNamePtr;HEAP32[__get_tzname()+4>>2]=winterNamePtr}}Module["_tzset"]=_tzset;function _localtime_r(time,tmPtr){_tzset();var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var start=new Date(date.getFullYear(),0,1);var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var summerOffset=new Date(2e3,6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst;var zonePtr=HEAP32[__get_tzname()+(dst?4:0)>>2];HEAP32[tmPtr+40>>2]=zonePtr;return tmPtr}Module["_localtime_r"]=_localtime_r;function _mktime(tmPtr){_tzset();var date=new Date(HEAP32[tmPtr+20>>2]+1900,HEAP32[tmPtr+16>>2],HEAP32[tmPtr+12>>2],HEAP32[tmPtr+8>>2],HEAP32[tmPtr+4>>2],HEAP32[tmPtr>>2],0);var dst=HEAP32[tmPtr+32>>2];var guessedOffset=date.getTimezoneOffset();var start=new Date(date.getFullYear(),0,1);var summerOffset=new Date(2e3,6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dstOffset=Math.min(winterOffset,summerOffset);if(dst<0){HEAP32[tmPtr+32>>2]=Number(summerOffset!=winterOffset&&dstOffset==guessedOffset)}else if(dst>0!=(dstOffset==guessedOffset)){var nonDstOffset=Math.max(winterOffset,summerOffset);var trueOffset=dst>0?dstOffset:nonDstOffset;date.setTime(date.getTime()+(trueOffset-guessedOffset)*6e4)}HEAP32[tmPtr+24>>2]=date.getDay();var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;return date.getTime()/1e3|0}Module["_mktime"]=_mktime;function _pathconf(){return _fpathconf.apply(null,arguments)}Module["_pathconf"]=_pathconf;function _pthread_attr_destroy(attr){return 0}Module["_pthread_attr_destroy"]=_pthread_attr_destroy;function _pthread_attr_init(attr){return 0}Module["_pthread_attr_init"]=_pthread_attr_init;function _pthread_attr_setstacksize(){}Module["_pthread_attr_setstacksize"]=_pthread_attr_setstacksize;function _pthread_cond_destroy(){return 0}Module["_pthread_cond_destroy"]=_pthread_cond_destroy;function _pthread_cond_init(){return 0}Module["_pthread_cond_init"]=_pthread_cond_init;function _pthread_cond_signal(){return 0}Module["_pthread_cond_signal"]=_pthread_cond_signal;function _pthread_cond_timedwait(){return 0}Module["_pthread_cond_timedwait"]=_pthread_cond_timedwait;function _pthread_cond_wait(){return 0}Module["_pthread_cond_wait"]=_pthread_cond_wait;function _pthread_condattr_init(){return 0}Module["_pthread_condattr_init"]=_pthread_condattr_init;function _pthread_condattr_setclock(){return 0}Module["_pthread_condattr_setclock"]=_pthread_condattr_setclock;function _pthread_create(){return 11}Module["_pthread_create"]=_pthread_create;function _pthread_detach(){}Module["_pthread_detach"]=_pthread_detach;function _pthread_exit(status){_exit(status)}Module["_pthread_exit"]=_pthread_exit;function _pthread_sigmask(){return 0}Module["_pthread_sigmask"]=_pthread_sigmask;function _putenv(string){if(string===0){___setErrNo(22);return-1}string=UTF8ToString(string);var splitPoint=string.indexOf("=");if(string===""||string.indexOf("=")===-1){___setErrNo(22);return-1}var name=string.slice(0,splitPoint);var value=string.slice(splitPoint+1);if(!(name in ENV)||ENV[name]!==value){ENV[name]=value;___buildEnvironment(__get_environ())}return 0}Module["_putenv"]=_putenv;function _raise(sig){err("Calling stub instead of raise()");___setErrNo(ERRNO_CODES.ENOSYS);warnOnce("raise() returning an error as we do not support it");return-1}Module["_raise"]=_raise;function _round(d){d=+d;return d>=+0?+Math_floor(d+ +.5):+Math_ceil(d-+.5)}Module["_round"]=_round;function abortOnCannotGrowMemory(requestedSize){abort("Cannot enlarge memory arrays to size "+requestedSize+" bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+HEAP8.length+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}Module["abortOnCannotGrowMemory"]=abortOnCannotGrowMemory;function _emscripten_resize_heap(requestedSize){abortOnCannotGrowMemory(requestedSize)}Module["_emscripten_resize_heap"]=_emscripten_resize_heap;function _sbrk(increment){increment=increment|0;var oldDynamicTop=0;var newDynamicTop=0;var totalMemory=0;totalMemory=_emscripten_get_heap_size()|0;oldDynamicTop=HEAP32[DYNAMICTOP_PTR>>2]|0;newDynamicTop=oldDynamicTop+increment|0;if((increment|0)>0&(newDynamicTop|0)<(oldDynamicTop|0)|(newDynamicTop|0)<0){abortOnCannotGrowMemory(newDynamicTop|0)|0;___setErrNo(12);return-1}if((newDynamicTop|0)>(totalMemory|0)){if(_emscripten_resize_heap(newDynamicTop|0)|0){}else{___setErrNo(12);return-1}}HEAP32[DYNAMICTOP_PTR>>2]=newDynamicTop|0;return oldDynamicTop|0}Module["_sbrk"]=_sbrk;function _sched_yield(){return 0}Module["_sched_yield"]=_sched_yield;function _setTempRet0($i){setTempRet0($i|0)}Module["_setTempRet0"]=_setTempRet0;function _setenv(envname,envval,overwrite){if(envname===0){___setErrNo(22);return-1}var name=UTF8ToString(envname);var val=UTF8ToString(envval);if(name===""||name.indexOf("=")!==-1){___setErrNo(22);return-1}if(ENV.hasOwnProperty(name)&&!overwrite)return 0;ENV[name]=val;___buildEnvironment(__get_environ());return 0}Module["_setenv"]=_setenv;function _setitimer(){throw"setitimer() is not implemented yet"}Module["_setitimer"]=_setitimer;function _setpwent(){throw"setpwent: TODO"}Module["_setpwent"]=_setpwent;function _sigemptyset(set){HEAP32[set>>2]=0;return 0}Module["_sigemptyset"]=_sigemptyset;function _sigfillset(set){HEAP32[set>>2]=-1>>>0;return 0}Module["_sigfillset"]=_sigfillset;function _sigismember(set,signum){return HEAP32[set>>2]&1<<signum-1}Module["_sigismember"]=_sigismember;function _signal(sig,func){if(sig==14){__sigalrm_handler=func}else{err("Calling stub instead of signal()")}return 0}Module["_signal"]=_signal;function _sigpending(set){HEAP32[set>>2]=0;return 0}Module["_sigpending"]=_sigpending;function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}Module["__isLeapYear"]=__isLeapYear;function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]);return sum}Module["__arraySum"]=__arraySum;var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];Module["__MONTH_DAYS_LEAP"]=__MONTH_DAYS_LEAP;var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];Module["__MONTH_DAYS_REGULAR"]=__MONTH_DAYS_REGULAR;function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}Module["__addDays"]=__addDays;function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule])}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value==="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},"%A":function(date){return WEEKDAYS[date.tm_wday]},"%b":function(date){return MONTHS[date.tm_mon].substring(0,3)},"%B":function(date){return MONTHS[date.tm_mon]},"%C":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},"%d":function(date){return leadingNulls(date.tm_mday,2)},"%e":function(date){return leadingSomething(date.tm_mday,2," ")},"%g":function(date){return getWeekBasedYear(date).toString().substring(2)},"%G":function(date){return getWeekBasedYear(date)},"%H":function(date){return leadingNulls(date.tm_hour,2)},"%I":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},"%j":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},"%m":function(date){return leadingNulls(date.tm_mon+1,2)},"%M":function(date){return leadingNulls(date.tm_min,2)},"%n":function(){return"\n"},"%p":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return"AM"}else{return"PM"}},"%S":function(date){return leadingNulls(date.tm_sec,2)},"%t":function(){return"\t"},"%u":function(date){return date.tm_wday||7},"%U":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?"01":"00"},"%V":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return"53"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return"01"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)},"%w":function(date){return date.tm_wday},"%W":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?"01":"00"},"%y":function(date){return(date.tm_year+1900).toString().substring(2)},"%Y":function(date){return date.tm_year+1900},"%z":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4)},"%Z":function(date){return date.tm_zone},"%%":function(){return"%"}};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}Module["_strftime"]=_strftime;function _sysconf(name){switch(name){case 30:return PAGE_SIZE;case 85:var maxHeapSize=2*1024*1024*1024-65536;maxHeapSize=HEAPU8.length;return maxHeapSize/PAGE_SIZE;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator==="object")return navigator["hardwareConcurrency"]||1;return 1}}___setErrNo(22);return-1}Module["_sysconf"]=_sysconf;function _system(command){___setErrNo(11);return-1}Module["_system"]=_system;function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}Module["_time"]=_time;function _times(buffer){if(buffer!==0){_memset(buffer,0,16)}return 0}Module["_times"]=_times;function _unsetenv(name){if(name===0){___setErrNo(22);return-1}name=UTF8ToString(name);if(name===""||name.indexOf("=")!==-1){___setErrNo(22);return-1}if(ENV.hasOwnProperty(name)){delete ENV[name];___buildEnvironment(__get_environ())}return 0}Module["_unsetenv"]=_unsetenv;function _utime(path,times){var time;if(times){var offset=4;time=HEAP32[times+offset>>2];time*=1e3}else{time=Date.now()}path=UTF8ToString(path);try{FS.utime(path,time,time);return 0}catch(e){FS.handleFSError(e);return-1}}Module["_utime"]=_utime;function _wait(stat_loc){___setErrNo(10);return-1}Module["_wait"]=_wait;function _wait3(){return _wait.apply(null,arguments)}Module["_wait3"]=_wait3;function _wait4(){return _wait.apply(null,arguments)}Module["_wait4"]=_wait4;function _waitid(){return _wait.apply(null,arguments)}Module["_waitid"]=_waitid;function _waitpid(){return _wait.apply(null,arguments)}Module["_waitpid"]=_waitpid;FS.staticInit();Module["FS_createFolder"]=FS.createFolder;Module["FS_createPath"]=FS.createPath;Module["FS_createDataFile"]=FS.createDataFile;Module["FS_createPreloadedFile"]=FS.createPreloadedFile;Module["FS_createLazyFile"]=FS.createLazyFile;Module["FS_createLink"]=FS.createLink;Module["FS_createDevice"]=FS.createDevice;Module["FS_unlink"]=FS.unlink;if(typeof dateNow!=="undefined"){_emscripten_get_now=dateNow}else if(typeof performance==="object"&&performance&&typeof performance["now"]==="function"){_emscripten_get_now=function(){return performance["now"]()}}else{_emscripten_get_now=Date.now}Module["requestFullScreen"]=function Module_requestFullScreen(lockPointer,resizeCanvas,vrDevice){err("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead.");Module["requestFullScreen"]=Module["requestFullscreen"];Browser.requestFullScreen(lockPointer,resizeCanvas,vrDevice)};Module["requestFullscreen"]=function Module_requestFullscreen(lockPointer,resizeCanvas,vrDevice){Browser.requestFullscreen(lockPointer,resizeCanvas,vrDevice)};Module["requestAnimationFrame"]=function Module_requestAnimationFrame(func){Browser.requestAnimationFrame(func)};Module["setCanvasSize"]=function Module_setCanvasSize(width,height,noUpdates){Browser.setCanvasSize(width,height,noUpdates)};Module["pauseMainLoop"]=function Module_pauseMainLoop(){Browser.mainLoop.pause()};Module["resumeMainLoop"]=function Module_resumeMainLoop(){Browser.mainLoop.resume()};Module["getUserMedia"]=function Module_getUserMedia(){Browser.getUserMedia()};Module["createContext"]=function Module_createContext(canvas,useWebGL,setInModule,webGLContextAttributes){return Browser.createContext(canvas,useWebGL,setInModule,webGLContextAttributes)};var ASSERTIONS=true;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var asmGlobalArg={};var asmLibraryArg={"DYNAMICTOP_PTR":DYNAMICTOP_PTR,"_ZSt18uncaught_exceptionv":__ZSt18uncaught_exceptionv,"__buildEnvironment":___buildEnvironment,"__cxa_allocate_exception":___cxa_allocate_exception,"__cxa_begin_catch":___cxa_begin_catch,"__cxa_pure_virtual":___cxa_pure_virtual,"__cxa_throw":___cxa_throw,"__exception_addRef":___exception_addRef,"__exception_deAdjust":___exception_deAdjust,"__libc_current_sigrtmax":___libc_current_sigrtmax,"__libc_current_sigrtmin":___libc_current_sigrtmin,"__lock":___lock,"__map_file":___map_file,"__setErrNo":___setErrNo,"__syscall10":___syscall10,"__syscall102":___syscall102,"__syscall118":___syscall118,"__syscall12":___syscall12,"__syscall122":___syscall122,"__syscall133":___syscall133,"__syscall140":___syscall140,"__syscall142":___syscall142,"__syscall145":___syscall145,"__syscall148":___syscall148,"__syscall15":___syscall15,"__syscall183":___syscall183,"__syscall191":___syscall191,"__syscall195":___syscall195,"__syscall196":___syscall196,"__syscall197":___syscall197,"__syscall199":___syscall199,"__syscall20":___syscall20,"__syscall200":___syscall200,"__syscall201":___syscall201,"__syscall202":___syscall202,"__syscall220":___syscall220,"__syscall221":___syscall221,"__syscall3":___syscall3,"__syscall33":___syscall33,"__syscall340":___syscall340,"__syscall38":___syscall38,"__syscall39":___syscall39,"__syscall4":___syscall4,"__syscall40":___syscall40,"__syscall42":___syscall42,"__syscall5":___syscall5,"__syscall54":___syscall54,"__syscall6":___syscall6,"__syscall60":___syscall60,"__syscall64":___syscall64,"__syscall75":___syscall75,"__syscall77":___syscall77,"__syscall83":___syscall83,"__syscall85":___syscall85,"__syscall9":___syscall9,"__syscall91":___syscall91,"__unlock":___unlock,"_addDays":__addDays,"_arraySum":__arraySum,"_emscripten_syscall_munmap":__emscripten_syscall_munmap,"_exit":__exit,"_inet_ntop4_raw":__inet_ntop4_raw,"_inet_ntop6_raw":__inet_ntop6_raw,"_inet_pton4_raw":__inet_pton4_raw,"_inet_pton6_raw":__inet_pton6_raw,"_isLeapYear":__isLeapYear,"_read_sockaddr":__read_sockaddr,"_write_sockaddr":__write_sockaddr,"abort":_abort,"abortOnCannotGrowMemory":abortOnCannotGrowMemory,"alarm":_alarm,"chroot":_chroot,"clock":_clock,"clock_getres":_clock_getres,"clock_gettime":_clock_gettime,"clock_settime":_clock_settime,"confstr":_confstr,"demangle":demangle,"demangleAll":demangleAll,"dlerror":_dlerror,"dlopen":_dlopen,"dlsym":_dlsym,"emscripten_asm_const_iii":_emscripten_asm_const_iii,"emscripten_force_exit":_emscripten_force_exit,"emscripten_get_heap_size":_emscripten_get_heap_size,"emscripten_get_now":_emscripten_get_now,"emscripten_get_now_is_monotonic":_emscripten_get_now_is_monotonic,"emscripten_get_now_res":_emscripten_get_now_res,"emscripten_memcpy_big":_emscripten_memcpy_big,"emscripten_resize_heap":_emscripten_resize_heap,"emscripten_set_main_loop":_emscripten_set_main_loop,"emscripten_set_main_loop_timing":_emscripten_set_main_loop_timing,"endpwent":_endpwent,"execl":_execl,"execv":_execv,"execve":_execve,"exit":_exit,"fd_write":_fd_write,"fexecve":_fexecve,"flock":_flock,"fork":_fork,"fpathconf":_fpathconf,"gai_strerror":_gai_strerror,"getaddrinfo":_getaddrinfo,"getenv":_getenv,"gethostbyaddr":_gethostbyaddr,"gethostbyname":_gethostbyname,"getitimer":_getitimer,"getloadavg":_getloadavg,"getnameinfo":_getnameinfo,"getprotobyname":_getprotobyname,"getpwent":_getpwent,"getpwnam":_getpwnam,"getpwuid":_getpwuid,"gettimeofday":_gettimeofday,"gmtime_r":_gmtime_r,"jsStackTrace":jsStackTrace,"kill":_kill,"killpg":_killpg,"localtime_r":_localtime_r,"mktime":_mktime,"pathconf":_pathconf,"pthread_attr_destroy":_pthread_attr_destroy,"pthread_attr_init":_pthread_attr_init,"pthread_attr_setstacksize":_pthread_attr_setstacksize,"pthread_cond_destroy":_pthread_cond_destroy,"pthread_cond_init":_pthread_cond_init,"pthread_cond_signal":_pthread_cond_signal,"pthread_cond_timedwait":_pthread_cond_timedwait,"pthread_cond_wait":_pthread_cond_wait,"pthread_condattr_init":_pthread_condattr_init,"pthread_condattr_setclock":_pthread_condattr_setclock,"pthread_create":_pthread_create,"pthread_detach":_pthread_detach,"pthread_exit":_pthread_exit,"pthread_sigmask":_pthread_sigmask,"putenv":_putenv,"raise":_raise,"round":_round,"sbrk":_sbrk,"sched_yield":_sched_yield,"setTempRet0":_setTempRet0,"setenv":_setenv,"setitimer":_setitimer,"setprotoent":_setprotoent,"setpwent":_setpwent,"sigemptyset":_sigemptyset,"sigfillset":_sigfillset,"sigismember":_sigismember,"signal":_signal,"sigpending":_sigpending,"stackTrace":stackTrace,"strftime":_strftime,"sysconf":_sysconf,"system":_system,"time":_time,"times":_times,"tzset":_tzset,"unsetenv":_unsetenv,"utime":_utime,"wait":_wait,"wait3":_wait3,"wait4":_wait4,"waitid":_waitid,"waitpid":_waitpid};var asm=Module["asm"](asmGlobalArg,asmLibraryArg,buffer);var real____wasm_call_ctors=asm["__wasm_call_ctors"];asm["__wasm_call_ctors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____wasm_call_ctors.apply(null,arguments)};var real__embed_init=asm["embed_init"];asm["embed_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__embed_init.apply(null,arguments)};var real__PyModule_Create2=asm["PyModule_Create2"];asm["PyModule_Create2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_Create2.apply(null,arguments)};var real__PyModule_GetDict=asm["PyModule_GetDict"];asm["PyModule_GetDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_GetDict.apply(null,arguments)};var real__PyUnicode_FromString=asm["PyUnicode_FromString"];asm["PyUnicode_FromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_FromString.apply(null,arguments)};var real__PyDict_SetItem=asm["PyDict_SetItem"];asm["PyDict_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_SetItem.apply(null,arguments)};var real___Z17embed_bridge_pushPc=asm["_Z17embed_bridge_pushPc"];asm["_Z17embed_bridge_pushPc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Z17embed_bridge_pushPc.apply(null,arguments)};var real___Z16kbd_set_readlinePc=asm["_Z16kbd_set_readlinePc"];asm["_Z16kbd_set_readlinePc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Z16kbd_set_readlinePc.apply(null,arguments)};var real__PyDict_SetItemString=asm["PyDict_SetItemString"];asm["PyDict_SetItemString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_SetItemString.apply(null,arguments)};var real___Z10bsd_strlenPKc=asm["_Z10bsd_strlenPKc"];asm["_Z10bsd_strlenPKc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Z10bsd_strlenPKc.apply(null,arguments)};var real___Z10bsd_strcmpPKcS0_=asm["_Z10bsd_strcmpPKcS0_"];asm["_Z10bsd_strcmpPKcS0_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Z10bsd_strcmpPKcS0_.apply(null,arguments)};var real___Z8endswithPKcS0_=asm["_Z8endswithPKcS0_"];asm["_Z8endswithPKcS0_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Z8endswithPKcS0_.apply(null,arguments)};var real___Z7shm_ptrv=asm["_Z7shm_ptrv"];asm["_Z7shm_ptrv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Z7shm_ptrv.apply(null,arguments)};var real___Z18wPy_NewInterpreterv=asm["_Z18wPy_NewInterpreterv"];asm["_Z18wPy_NewInterpreterv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Z18wPy_NewInterpreterv.apply(null,arguments)};var real__malloc=asm["malloc"];asm["malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__malloc.apply(null,arguments)};var real__chdir=asm["chdir"];asm["chdir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__chdir.apply(null,arguments)};var real__PyImport_AppendInittab=asm["PyImport_AppendInittab"];asm["PyImport_AppendInittab"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_AppendInittab.apply(null,arguments)};var real__Py_InitializeEx=asm["Py_InitializeEx"];asm["Py_InitializeEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_InitializeEx.apply(null,arguments)};var real___Z8repl_runi=asm["_Z8repl_runi"];asm["_Z8repl_runi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Z8repl_runi.apply(null,arguments)};var real___Z11shm_get_ptrii=asm["_Z11shm_get_ptrii"];asm["_Z11shm_get_ptrii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Z11shm_get_ptrii.apply(null,arguments)};var real__fiprintf=asm["fiprintf"];asm["fiprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fiprintf.apply(null,arguments)};var real___Z11py_iter_onev=asm["_Z11py_iter_onev"];asm["_Z11py_iter_onev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Z11py_iter_onev.apply(null,arguments)};var real___Z13step_tick_tocv=asm["_Z13step_tick_tocv"];asm["_Z13step_tick_tocv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Z13step_tick_tocv.apply(null,arguments)};var real__fwrite=asm["fwrite"];asm["fwrite"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fwrite.apply(null,arguments)};var real__PyRun_SimpleStringFlags=asm["PyRun_SimpleStringFlags"];asm["PyRun_SimpleStringFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_SimpleStringFlags.apply(null,arguments)};var real__strlen=asm["strlen"];asm["strlen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strlen.apply(null,arguments)};var real__fgets=asm["fgets"];asm["fgets"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fgets.apply(null,arguments)};var real__PyRun_InteractiveOneFlags=asm["PyRun_InteractiveOneFlags"];asm["PyRun_InteractiveOneFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_InteractiveOneFlags.apply(null,arguments)};var real__puts=asm["puts"];asm["puts"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__puts.apply(null,arguments)};var real__fopen=asm["fopen"];asm["fopen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fopen.apply(null,arguments)};var real___Z9dyld_lzmaPKcl=asm["_Z9dyld_lzmaPKcl"];asm["_Z9dyld_lzmaPKcl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Z9dyld_lzmaPKcl.apply(null,arguments)};var real___Z5awaitPKc=asm["_Z5awaitPKc"];asm["_Z5awaitPKc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Z5awaitPKc.apply(null,arguments)};var real__main=asm["main"];asm["main"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__main.apply(null,arguments)};var real__PyArg_ParseTuple=asm["PyArg_ParseTuple"];asm["PyArg_ParseTuple"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyArg_ParseTuple.apply(null,arguments)};var real__Py_BuildValue=asm["Py_BuildValue"];asm["Py_BuildValue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_BuildValue.apply(null,arguments)};var real__PyInit__abc=asm["PyInit__abc"];asm["PyInit__abc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__abc.apply(null,arguments)};var real__PyInit__bisect=asm["PyInit__bisect"];asm["PyInit__bisect"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__bisect.apply(null,arguments)};var real__PyInit__codecs=asm["PyInit__codecs"];asm["PyInit__codecs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__codecs.apply(null,arguments)};var real__PyInit__collections=asm["PyInit__collections"];asm["PyInit__collections"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__collections.apply(null,arguments)};var real__PyInit__contextvars=asm["PyInit__contextvars"];asm["PyInit__contextvars"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__contextvars.apply(null,arguments)};var real__PyInit__functools=asm["PyInit__functools"];asm["PyInit__functools"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__functools.apply(null,arguments)};var real__PyNumber_AsOff_t=asm["PyNumber_AsOff_t"];asm["PyNumber_AsOff_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_AsOff_t.apply(null,arguments)};var real___PyIO_get_module_state=asm["_PyIO_get_module_state"];asm["_PyIO_get_module_state"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyIO_get_module_state.apply(null,arguments)};var real___PyIO_get_locale_module=asm["_PyIO_get_locale_module"];asm["_PyIO_get_locale_module"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyIO_get_locale_module.apply(null,arguments)};var real__PyInit__io=asm["PyInit__io"];asm["PyInit__io"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__io.apply(null,arguments)};var real__PyInit__json=asm["PyInit__json"];asm["PyInit__json"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__json.apply(null,arguments)};var real__PyInit__locale=asm["PyInit__locale"];asm["PyInit__locale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__locale.apply(null,arguments)};var real___Py_log1p=asm["_Py_log1p"];asm["_Py_log1p"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_log1p.apply(null,arguments)};var real__PyInit__operator=asm["PyInit__operator"];asm["PyInit__operator"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__operator.apply(null,arguments)};var real__PyInit__random=asm["PyInit__random"];asm["PyInit__random"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__random.apply(null,arguments)};var real__PyInit__sre=asm["PyInit__sre"];asm["PyInit__sre"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__sre.apply(null,arguments)};var real__PyInit__stat=asm["PyInit__stat"];asm["PyInit__stat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__stat.apply(null,arguments)};var real__PyInit__struct=asm["PyInit__struct"];asm["PyInit__struct"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__struct.apply(null,arguments)};var real__PyInit__thread=asm["PyInit__thread"];asm["PyInit__thread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__thread.apply(null,arguments)};var real___PyMem_DumpTraceback=asm["_PyMem_DumpTraceback"];asm["_PyMem_DumpTraceback"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyMem_DumpTraceback.apply(null,arguments)};var real__PyInit__tracemalloc=asm["PyInit__tracemalloc"];asm["PyInit__tracemalloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__tracemalloc.apply(null,arguments)};var real___PyTraceMalloc_Init=asm["_PyTraceMalloc_Init"];asm["_PyTraceMalloc_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTraceMalloc_Init.apply(null,arguments)};var real___PyTraceMalloc_Fini=asm["_PyTraceMalloc_Fini"];asm["_PyTraceMalloc_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTraceMalloc_Fini.apply(null,arguments)};var real__PyTraceMalloc_Track=asm["PyTraceMalloc_Track"];asm["PyTraceMalloc_Track"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTraceMalloc_Track.apply(null,arguments)};var real__PyTraceMalloc_Untrack=asm["PyTraceMalloc_Untrack"];asm["PyTraceMalloc_Untrack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTraceMalloc_Untrack.apply(null,arguments)};var real___PyTraceMalloc_NewReference=asm["_PyTraceMalloc_NewReference"];asm["_PyTraceMalloc_NewReference"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTraceMalloc_NewReference.apply(null,arguments)};var real___PyTraceMalloc_GetTraceback=asm["_PyTraceMalloc_GetTraceback"];asm["_PyTraceMalloc_GetTraceback"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTraceMalloc_GetTraceback.apply(null,arguments)};var real__PyInit__weakref=asm["PyInit__weakref"];asm["PyInit__weakref"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__weakref.apply(null,arguments)};var real__PyInit_array=asm["PyInit_array"];asm["PyInit_array"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_array.apply(null,arguments)};var real__PyInit_atexit=asm["PyInit_atexit"];asm["PyInit_atexit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_atexit.apply(null,arguments)};var real__PyInit_binascii=asm["PyInit_binascii"];asm["PyInit_binascii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_binascii.apply(null,arguments)};var real__PyBlake2_blake2b_init_param=asm["PyBlake2_blake2b_init_param"];asm["PyBlake2_blake2b_init_param"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBlake2_blake2b_init_param.apply(null,arguments)};var real__PyBlake2_blake2b_init=asm["PyBlake2_blake2b_init"];asm["PyBlake2_blake2b_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBlake2_blake2b_init.apply(null,arguments)};var real__PyBlake2_blake2b_init_key=asm["PyBlake2_blake2b_init_key"];asm["PyBlake2_blake2b_init_key"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBlake2_blake2b_init_key.apply(null,arguments)};var real__PyBlake2_blake2b_update=asm["PyBlake2_blake2b_update"];asm["PyBlake2_blake2b_update"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBlake2_blake2b_update.apply(null,arguments)};var real__PyBlake2_blake2b_final=asm["PyBlake2_blake2b_final"];asm["PyBlake2_blake2b_final"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBlake2_blake2b_final.apply(null,arguments)};var real__PyBlake2_blake2b=asm["PyBlake2_blake2b"];asm["PyBlake2_blake2b"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBlake2_blake2b.apply(null,arguments)};var real__PyInit__blake2=asm["PyInit__blake2"];asm["PyInit__blake2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__blake2.apply(null,arguments)};var real__PyBlake2_blake2s_init_param=asm["PyBlake2_blake2s_init_param"];asm["PyBlake2_blake2s_init_param"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBlake2_blake2s_init_param.apply(null,arguments)};var real__PyBlake2_blake2s_init=asm["PyBlake2_blake2s_init"];asm["PyBlake2_blake2s_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBlake2_blake2s_init.apply(null,arguments)};var real__PyBlake2_blake2s_init_key=asm["PyBlake2_blake2s_init_key"];asm["PyBlake2_blake2s_init_key"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBlake2_blake2s_init_key.apply(null,arguments)};var real__PyBlake2_blake2s_update=asm["PyBlake2_blake2s_update"];asm["PyBlake2_blake2s_update"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBlake2_blake2s_update.apply(null,arguments)};var real__PyBlake2_blake2s_final=asm["PyBlake2_blake2s_final"];asm["PyBlake2_blake2s_final"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBlake2_blake2s_final.apply(null,arguments)};var real__PyBlake2_blake2s=asm["PyBlake2_blake2s"];asm["PyBlake2_blake2s"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBlake2_blake2s.apply(null,arguments)};var real___PyIO_trap_eintr=asm["_PyIO_trap_eintr"];asm["_PyIO_trap_eintr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyIO_trap_eintr.apply(null,arguments)};var real__PyInit_cmath=asm["PyInit_cmath"];asm["PyInit_cmath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_cmath.apply(null,arguments)};var real__PyInit_errno=asm["PyInit_errno"];asm["PyInit_errno"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_errno.apply(null,arguments)};var real__PyInit_faulthandler=asm["PyInit_faulthandler"];asm["PyInit_faulthandler"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_faulthandler.apply(null,arguments)};var real___PyFaulthandler_Init=asm["_PyFaulthandler_Init"];asm["_PyFaulthandler_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFaulthandler_Init.apply(null,arguments)};var real___PyFaulthandler_Fini=asm["_PyFaulthandler_Fini"];asm["_PyFaulthandler_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFaulthandler_Fini.apply(null,arguments)};var real__PyInit_fcntl=asm["PyInit_fcntl"];asm["PyInit_fcntl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_fcntl.apply(null,arguments)};var real___PyFileIO_closed=asm["_PyFileIO_closed"];asm["_PyFileIO_closed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFileIO_closed.apply(null,arguments)};var real___PyGC_Initialize=asm["_PyGC_Initialize"];asm["_PyGC_Initialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGC_Initialize.apply(null,arguments)};var real__PyInit_gc=asm["PyInit_gc"];asm["PyInit_gc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_gc.apply(null,arguments)};var real__PyGC_Collect=asm["PyGC_Collect"];asm["PyGC_Collect"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyGC_Collect.apply(null,arguments)};var real___PyGC_CollectIfEnabled=asm["_PyGC_CollectIfEnabled"];asm["_PyGC_CollectIfEnabled"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGC_CollectIfEnabled.apply(null,arguments)};var real___PyGC_CollectNoFail=asm["_PyGC_CollectNoFail"];asm["_PyGC_CollectNoFail"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGC_CollectNoFail.apply(null,arguments)};var real___PyGC_DumpShutdownStats=asm["_PyGC_DumpShutdownStats"];asm["_PyGC_DumpShutdownStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGC_DumpShutdownStats.apply(null,arguments)};var real___PyGC_Fini=asm["_PyGC_Fini"];asm["_PyGC_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGC_Fini.apply(null,arguments)};var real___PyGC_Dump=asm["_PyGC_Dump"];asm["_PyGC_Dump"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGC_Dump.apply(null,arguments)};var real__PyObject_GC_Track=asm["PyObject_GC_Track"];asm["PyObject_GC_Track"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_GC_Track.apply(null,arguments)};var real__PyObject_GC_UnTrack=asm["PyObject_GC_UnTrack"];asm["PyObject_GC_UnTrack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_GC_UnTrack.apply(null,arguments)};var real___PyObject_GC_Malloc=asm["_PyObject_GC_Malloc"];asm["_PyObject_GC_Malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_GC_Malloc.apply(null,arguments)};var real___PyObject_GC_Calloc=asm["_PyObject_GC_Calloc"];asm["_PyObject_GC_Calloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_GC_Calloc.apply(null,arguments)};var real___PyObject_GC_New=asm["_PyObject_GC_New"];asm["_PyObject_GC_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_GC_New.apply(null,arguments)};var real___PyObject_GC_NewVar=asm["_PyObject_GC_NewVar"];asm["_PyObject_GC_NewVar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_GC_NewVar.apply(null,arguments)};var real___PyObject_GC_Resize=asm["_PyObject_GC_Resize"];asm["_PyObject_GC_Resize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_GC_Resize.apply(null,arguments)};var real__PyObject_GC_Del=asm["PyObject_GC_Del"];asm["PyObject_GC_Del"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_GC_Del.apply(null,arguments)};var real__Py_GetBuildInfo=asm["Py_GetBuildInfo"];asm["Py_GetBuildInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_GetBuildInfo.apply(null,arguments)};var real___Py_gitversion=asm["_Py_gitversion"];asm["_Py_gitversion"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_gitversion.apply(null,arguments)};var real___Py_gitidentifier=asm["_Py_gitidentifier"];asm["_Py_gitidentifier"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_gitidentifier.apply(null,arguments)};var real___PyPathConfig_Calculate=asm["_PyPathConfig_Calculate"];asm["_PyPathConfig_Calculate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPathConfig_Calculate.apply(null,arguments)};var real___Py_hashtable_hash_ptr=asm["_Py_hashtable_hash_ptr"];asm["_Py_hashtable_hash_ptr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_hashtable_hash_ptr.apply(null,arguments)};var real___Py_hashtable_compare_direct=asm["_Py_hashtable_compare_direct"];asm["_Py_hashtable_compare_direct"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_hashtable_compare_direct.apply(null,arguments)};var real___Py_hashtable_new_full=asm["_Py_hashtable_new_full"];asm["_Py_hashtable_new_full"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_hashtable_new_full.apply(null,arguments)};var real___Py_hashtable_new=asm["_Py_hashtable_new"];asm["_Py_hashtable_new"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_hashtable_new.apply(null,arguments)};var real___Py_hashtable_size=asm["_Py_hashtable_size"];asm["_Py_hashtable_size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_hashtable_size.apply(null,arguments)};var real___Py_hashtable_get_entry=asm["_Py_hashtable_get_entry"];asm["_Py_hashtable_get_entry"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_hashtable_get_entry.apply(null,arguments)};var real___Py_hashtable_set=asm["_Py_hashtable_set"];asm["_Py_hashtable_set"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_hashtable_set.apply(null,arguments)};var real___Py_hashtable_get=asm["_Py_hashtable_get"];asm["_Py_hashtable_get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_hashtable_get.apply(null,arguments)};var real___Py_hashtable_pop=asm["_Py_hashtable_pop"];asm["_Py_hashtable_pop"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_hashtable_pop.apply(null,arguments)};var real___Py_hashtable_foreach=asm["_Py_hashtable_foreach"];asm["_Py_hashtable_foreach"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_hashtable_foreach.apply(null,arguments)};var real___Py_hashtable_clear=asm["_Py_hashtable_clear"];asm["_Py_hashtable_clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_hashtable_clear.apply(null,arguments)};var real___Py_hashtable_destroy=asm["_Py_hashtable_destroy"];asm["_Py_hashtable_destroy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_hashtable_destroy.apply(null,arguments)};var real___Py_hashtable_copy=asm["_Py_hashtable_copy"];asm["_Py_hashtable_copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_hashtable_copy.apply(null,arguments)};var real___PyIOBase_check_closed=asm["_PyIOBase_check_closed"];asm["_PyIOBase_check_closed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyIOBase_check_closed.apply(null,arguments)};var real___PyIOBase_finalize=asm["_PyIOBase_finalize"];asm["_PyIOBase_finalize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyIOBase_finalize.apply(null,arguments)};var real___PyIOBase_check_seekable=asm["_PyIOBase_check_seekable"];asm["_PyIOBase_check_seekable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyIOBase_check_seekable.apply(null,arguments)};var real___PyIOBase_check_readable=asm["_PyIOBase_check_readable"];asm["_PyIOBase_check_readable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyIOBase_check_readable.apply(null,arguments)};var real___PyIOBase_check_writable=asm["_PyIOBase_check_writable"];asm["_PyIOBase_check_writable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyIOBase_check_writable.apply(null,arguments)};var real__PyInit_itertools=asm["PyInit_itertools"];asm["PyInit_itertools"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_itertools.apply(null,arguments)};var real__PyInit_math=asm["PyInit_math"];asm["PyInit_math"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_math.apply(null,arguments)};var real__PyInit__md5=asm["PyInit__md5"];asm["PyInit__md5"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__md5.apply(null,arguments)};var real__PyOS_BeforeFork=asm["PyOS_BeforeFork"];asm["PyOS_BeforeFork"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_BeforeFork.apply(null,arguments)};var real__PyOS_AfterFork_Parent=asm["PyOS_AfterFork_Parent"];asm["PyOS_AfterFork_Parent"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_AfterFork_Parent.apply(null,arguments)};var real__PyOS_AfterFork_Child=asm["PyOS_AfterFork_Child"];asm["PyOS_AfterFork_Child"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_AfterFork_Child.apply(null,arguments)};var real__PyOS_AfterFork=asm["PyOS_AfterFork"];asm["PyOS_AfterFork"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_AfterFork.apply(null,arguments)};var real___PyLong_FromUid=asm["_PyLong_FromUid"];asm["_PyLong_FromUid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_FromUid.apply(null,arguments)};var real___PyLong_FromGid=asm["_PyLong_FromGid"];asm["_PyLong_FromGid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_FromGid.apply(null,arguments)};var real___Py_Uid_Converter=asm["_Py_Uid_Converter"];asm["_Py_Uid_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Uid_Converter.apply(null,arguments)};var real___Py_Gid_Converter=asm["_Py_Gid_Converter"];asm["_Py_Gid_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Gid_Converter.apply(null,arguments)};var real__PyOS_FSPath=asm["PyOS_FSPath"];asm["PyOS_FSPath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_FSPath.apply(null,arguments)};var real__PyInit_posix=asm["PyInit_posix"];asm["PyInit_posix"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_posix.apply(null,arguments)};var real__PyInit_pwd=asm["PyInit_pwd"];asm["PyInit_pwd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_pwd.apply(null,arguments)};var real__PyInit_select=asm["PyInit_select"];asm["PyInit_select"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_select.apply(null,arguments)};var real__PyInit__sha1=asm["PyInit__sha1"];asm["PyInit__sha1"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__sha1.apply(null,arguments)};var real__PyInit__sha256=asm["PyInit__sha256"];asm["PyInit__sha256"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__sha256.apply(null,arguments)};var real___PySHA3_Keccak_HashInitialize=asm["_PySHA3_Keccak_HashInitialize"];asm["_PySHA3_Keccak_HashInitialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_Keccak_HashInitialize.apply(null,arguments)};var real___PySHA3_KeccakWidth1600_SpongeInitialize=asm["_PySHA3_KeccakWidth1600_SpongeInitialize"];asm["_PySHA3_KeccakWidth1600_SpongeInitialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakWidth1600_SpongeInitialize.apply(null,arguments)};var real___PySHA3_Keccak_HashUpdate=asm["_PySHA3_Keccak_HashUpdate"];asm["_PySHA3_Keccak_HashUpdate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_Keccak_HashUpdate.apply(null,arguments)};var real___PySHA3_KeccakWidth1600_SpongeAbsorb=asm["_PySHA3_KeccakWidth1600_SpongeAbsorb"];asm["_PySHA3_KeccakWidth1600_SpongeAbsorb"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakWidth1600_SpongeAbsorb.apply(null,arguments)};var real___PySHA3_KeccakP1600_AddLanes=asm["_PySHA3_KeccakP1600_AddLanes"];asm["_PySHA3_KeccakP1600_AddLanes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_AddLanes.apply(null,arguments)};var real___PySHA3_KeccakP1600_Permute_Nrounds=asm["_PySHA3_KeccakP1600_Permute_Nrounds"];asm["_PySHA3_KeccakP1600_Permute_Nrounds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_Permute_Nrounds.apply(null,arguments)};var real___PySHA3_KeccakP1600_AddBytes=asm["_PySHA3_KeccakP1600_AddBytes"];asm["_PySHA3_KeccakP1600_AddBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_AddBytes.apply(null,arguments)};var real___PySHA3_Keccak_HashFinal=asm["_PySHA3_Keccak_HashFinal"];asm["_PySHA3_Keccak_HashFinal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_Keccak_HashFinal.apply(null,arguments)};var real___PySHA3_KeccakWidth1600_SpongeAbsorbLastFewBits=asm["_PySHA3_KeccakWidth1600_SpongeAbsorbLastFewBits"];asm["_PySHA3_KeccakWidth1600_SpongeAbsorbLastFewBits"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakWidth1600_SpongeAbsorbLastFewBits.apply(null,arguments)};var real___PySHA3_KeccakWidth1600_SpongeSqueeze=asm["_PySHA3_KeccakWidth1600_SpongeSqueeze"];asm["_PySHA3_KeccakWidth1600_SpongeSqueeze"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakWidth1600_SpongeSqueeze.apply(null,arguments)};var real___PySHA3_KeccakP1600_ExtractLanes=asm["_PySHA3_KeccakP1600_ExtractLanes"];asm["_PySHA3_KeccakP1600_ExtractLanes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_ExtractLanes.apply(null,arguments)};var real___PySHA3_KeccakP1600_ExtractBytes=asm["_PySHA3_KeccakP1600_ExtractBytes"];asm["_PySHA3_KeccakP1600_ExtractBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_ExtractBytes.apply(null,arguments)};var real___PySHA3_Keccak_HashSqueeze=asm["_PySHA3_Keccak_HashSqueeze"];asm["_PySHA3_Keccak_HashSqueeze"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_Keccak_HashSqueeze.apply(null,arguments)};var real___PySHA3_KeccakWidth1600_Sponge=asm["_PySHA3_KeccakWidth1600_Sponge"];asm["_PySHA3_KeccakWidth1600_Sponge"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakWidth1600_Sponge.apply(null,arguments)};var real___PySHA3_KeccakP1600_Initialize=asm["_PySHA3_KeccakP1600_Initialize"];asm["_PySHA3_KeccakP1600_Initialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_Initialize.apply(null,arguments)};var real___PySHA3_KeccakP1600_Permute_24rounds=asm["_PySHA3_KeccakP1600_Permute_24rounds"];asm["_PySHA3_KeccakP1600_Permute_24rounds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_Permute_24rounds.apply(null,arguments)};var real___PySHA3_KeccakP1600_AddByte=asm["_PySHA3_KeccakP1600_AddByte"];asm["_PySHA3_KeccakP1600_AddByte"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_AddByte.apply(null,arguments)};var real___PySHA3_KeccakP1600_SetBytesInLaneToZero=asm["_PySHA3_KeccakP1600_SetBytesInLaneToZero"];asm["_PySHA3_KeccakP1600_SetBytesInLaneToZero"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_SetBytesInLaneToZero.apply(null,arguments)};var real___PySHA3_KeccakP1600_AddBytesInLane=asm["_PySHA3_KeccakP1600_AddBytesInLane"];asm["_PySHA3_KeccakP1600_AddBytesInLane"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_AddBytesInLane.apply(null,arguments)};var real___PySHA3_KeccakP1600_OverwriteBytesInLane=asm["_PySHA3_KeccakP1600_OverwriteBytesInLane"];asm["_PySHA3_KeccakP1600_OverwriteBytesInLane"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_OverwriteBytesInLane.apply(null,arguments)};var real___PySHA3_KeccakP1600_OverwriteLanes=asm["_PySHA3_KeccakP1600_OverwriteLanes"];asm["_PySHA3_KeccakP1600_OverwriteLanes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_OverwriteLanes.apply(null,arguments)};var real___PySHA3_KeccakP1600_OverwriteBytes=asm["_PySHA3_KeccakP1600_OverwriteBytes"];asm["_PySHA3_KeccakP1600_OverwriteBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_OverwriteBytes.apply(null,arguments)};var real___PySHA3_KeccakP1600_OverwriteWithZeroes=asm["_PySHA3_KeccakP1600_OverwriteWithZeroes"];asm["_PySHA3_KeccakP1600_OverwriteWithZeroes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_OverwriteWithZeroes.apply(null,arguments)};var real___PySHA3_KeccakP1600_ExtractBytesInLane=asm["_PySHA3_KeccakP1600_ExtractBytesInLane"];asm["_PySHA3_KeccakP1600_ExtractBytesInLane"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_ExtractBytesInLane.apply(null,arguments)};var real___PySHA3_KeccakP1600_ExtractAndAddBytesInLane=asm["_PySHA3_KeccakP1600_ExtractAndAddBytesInLane"];asm["_PySHA3_KeccakP1600_ExtractAndAddBytesInLane"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_ExtractAndAddBytesInLane.apply(null,arguments)};var real___PySHA3_KeccakP1600_ExtractAndAddLanes=asm["_PySHA3_KeccakP1600_ExtractAndAddLanes"];asm["_PySHA3_KeccakP1600_ExtractAndAddLanes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_ExtractAndAddLanes.apply(null,arguments)};var real___PySHA3_KeccakP1600_ExtractAndAddBytes=asm["_PySHA3_KeccakP1600_ExtractAndAddBytes"];asm["_PySHA3_KeccakP1600_ExtractAndAddBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_ExtractAndAddBytes.apply(null,arguments)};var real___PySHA3_KeccakP1600_Permute_12rounds=asm["_PySHA3_KeccakP1600_Permute_12rounds"];asm["_PySHA3_KeccakP1600_Permute_12rounds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySHA3_KeccakP1600_Permute_12rounds.apply(null,arguments)};var real__PyInit__sha3=asm["PyInit__sha3"];asm["PyInit__sha3"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__sha3.apply(null,arguments)};var real__PyInit__sha512=asm["PyInit__sha512"];asm["PyInit__sha512"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__sha512.apply(null,arguments)};var real__PySignal_SetWakeupFd=asm["PySignal_SetWakeupFd"];asm["PySignal_SetWakeupFd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySignal_SetWakeupFd.apply(null,arguments)};var real__PyInit__signal=asm["PyInit__signal"];asm["PyInit__signal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__signal.apply(null,arguments)};var real__PyErr_CheckSignals=asm["PyErr_CheckSignals"];asm["PyErr_CheckSignals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_CheckSignals.apply(null,arguments)};var real___PyErr_CheckSignals=asm["_PyErr_CheckSignals"];asm["_PyErr_CheckSignals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_CheckSignals.apply(null,arguments)};var real__PyErr_SetInterrupt=asm["PyErr_SetInterrupt"];asm["PyErr_SetInterrupt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SetInterrupt.apply(null,arguments)};var real__PyOS_InitInterrupts=asm["PyOS_InitInterrupts"];asm["PyOS_InitInterrupts"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_InitInterrupts.apply(null,arguments)};var real__PyOS_FiniInterrupts=asm["PyOS_FiniInterrupts"];asm["PyOS_FiniInterrupts"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_FiniInterrupts.apply(null,arguments)};var real__PyOS_InterruptOccurred=asm["PyOS_InterruptOccurred"];asm["PyOS_InterruptOccurred"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_InterruptOccurred.apply(null,arguments)};var real___PySignal_AfterFork=asm["_PySignal_AfterFork"];asm["_PySignal_AfterFork"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySignal_AfterFork.apply(null,arguments)};var real___PyOS_IsMainThread=asm["_PyOS_IsMainThread"];asm["_PyOS_IsMainThread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyOS_IsMainThread.apply(null,arguments)};var real__PyInit__socket=asm["PyInit__socket"];asm["PyInit__socket"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__socket.apply(null,arguments)};var real__PyInit__symtable=asm["PyInit__symtable"];asm["PyInit__symtable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__symtable.apply(null,arguments)};var real__PyInit_termios=asm["PyInit_termios"];asm["PyInit_termios"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_termios.apply(null,arguments)};var real___PyIncrementalNewlineDecoder_decode=asm["_PyIncrementalNewlineDecoder_decode"];asm["_PyIncrementalNewlineDecoder_decode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyIncrementalNewlineDecoder_decode.apply(null,arguments)};var real___PyIO_find_line_ending=asm["_PyIO_find_line_ending"];asm["_PyIO_find_line_ending"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyIO_find_line_ending.apply(null,arguments)};var real__PyInit_time=asm["PyInit_time"];asm["PyInit_time"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_time.apply(null,arguments)};var real__PyInit_unicodedata=asm["PyInit_unicodedata"];asm["PyInit_unicodedata"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_unicodedata.apply(null,arguments)};var real__PyInit_xxsubtype=asm["PyInit_xxsubtype"];asm["PyInit_xxsubtype"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_xxsubtype.apply(null,arguments)};var real__PyInit_zlib=asm["PyInit_zlib"];asm["PyInit_zlib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit_zlib.apply(null,arguments)};var real__PyObject_Type=asm["PyObject_Type"];asm["PyObject_Type"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Type.apply(null,arguments)};var real__PyObject_Size=asm["PyObject_Size"];asm["PyObject_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Size.apply(null,arguments)};var real__PyMapping_Size=asm["PyMapping_Size"];asm["PyMapping_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMapping_Size.apply(null,arguments)};var real__PyObject_Length=asm["PyObject_Length"];asm["PyObject_Length"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Length.apply(null,arguments)};var real___PyObject_HasLen=asm["_PyObject_HasLen"];asm["_PyObject_HasLen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_HasLen.apply(null,arguments)};var real__PyObject_LengthHint=asm["PyObject_LengthHint"];asm["PyObject_LengthHint"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_LengthHint.apply(null,arguments)};var real__PyObject_GetItem=asm["PyObject_GetItem"];asm["PyObject_GetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_GetItem.apply(null,arguments)};var real__PyNumber_AsSsize_t=asm["PyNumber_AsSsize_t"];asm["PyNumber_AsSsize_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_AsSsize_t.apply(null,arguments)};var real__PySequence_GetItem=asm["PySequence_GetItem"];asm["PySequence_GetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_GetItem.apply(null,arguments)};var real__PyNumber_Index=asm["PyNumber_Index"];asm["PyNumber_Index"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Index.apply(null,arguments)};var real__PyObject_SetItem=asm["PyObject_SetItem"];asm["PyObject_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_SetItem.apply(null,arguments)};var real__PySequence_SetItem=asm["PySequence_SetItem"];asm["PySequence_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_SetItem.apply(null,arguments)};var real__PyObject_DelItem=asm["PyObject_DelItem"];asm["PyObject_DelItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_DelItem.apply(null,arguments)};var real__PySequence_DelItem=asm["PySequence_DelItem"];asm["PySequence_DelItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_DelItem.apply(null,arguments)};var real__PyObject_DelItemString=asm["PyObject_DelItemString"];asm["PyObject_DelItemString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_DelItemString.apply(null,arguments)};var real__PyObject_CheckReadBuffer=asm["PyObject_CheckReadBuffer"];asm["PyObject_CheckReadBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_CheckReadBuffer.apply(null,arguments)};var real__PyBuffer_Release=asm["PyBuffer_Release"];asm["PyBuffer_Release"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBuffer_Release.apply(null,arguments)};var real__PyObject_AsCharBuffer=asm["PyObject_AsCharBuffer"];asm["PyObject_AsCharBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_AsCharBuffer.apply(null,arguments)};var real__PyObject_AsReadBuffer=asm["PyObject_AsReadBuffer"];asm["PyObject_AsReadBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_AsReadBuffer.apply(null,arguments)};var real__PyObject_AsWriteBuffer=asm["PyObject_AsWriteBuffer"];asm["PyObject_AsWriteBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_AsWriteBuffer.apply(null,arguments)};var real__PyObject_GetBuffer=asm["PyObject_GetBuffer"];asm["PyObject_GetBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_GetBuffer.apply(null,arguments)};var real__PyBuffer_IsContiguous=asm["PyBuffer_IsContiguous"];asm["PyBuffer_IsContiguous"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBuffer_IsContiguous.apply(null,arguments)};var real__PyBuffer_GetPointer=asm["PyBuffer_GetPointer"];asm["PyBuffer_GetPointer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBuffer_GetPointer.apply(null,arguments)};var real___Py_add_one_to_index_F=asm["_Py_add_one_to_index_F"];asm["_Py_add_one_to_index_F"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_add_one_to_index_F.apply(null,arguments)};var real___Py_add_one_to_index_C=asm["_Py_add_one_to_index_C"];asm["_Py_add_one_to_index_C"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_add_one_to_index_C.apply(null,arguments)};var real__PyBuffer_FromContiguous=asm["PyBuffer_FromContiguous"];asm["PyBuffer_FromContiguous"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBuffer_FromContiguous.apply(null,arguments)};var real__PyObject_CopyData=asm["PyObject_CopyData"];asm["PyObject_CopyData"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_CopyData.apply(null,arguments)};var real__PyBuffer_FillContiguousStrides=asm["PyBuffer_FillContiguousStrides"];asm["PyBuffer_FillContiguousStrides"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBuffer_FillContiguousStrides.apply(null,arguments)};var real__PyBuffer_FillInfo=asm["PyBuffer_FillInfo"];asm["PyBuffer_FillInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBuffer_FillInfo.apply(null,arguments)};var real__PyObject_Format=asm["PyObject_Format"];asm["PyObject_Format"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Format.apply(null,arguments)};var real__PyNumber_Check=asm["PyNumber_Check"];asm["PyNumber_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Check.apply(null,arguments)};var real__PyNumber_Or=asm["PyNumber_Or"];asm["PyNumber_Or"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Or.apply(null,arguments)};var real__PyNumber_Xor=asm["PyNumber_Xor"];asm["PyNumber_Xor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Xor.apply(null,arguments)};var real__PyNumber_And=asm["PyNumber_And"];asm["PyNumber_And"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_And.apply(null,arguments)};var real__PyNumber_Lshift=asm["PyNumber_Lshift"];asm["PyNumber_Lshift"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Lshift.apply(null,arguments)};var real__PyNumber_Rshift=asm["PyNumber_Rshift"];asm["PyNumber_Rshift"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Rshift.apply(null,arguments)};var real__PyNumber_Subtract=asm["PyNumber_Subtract"];asm["PyNumber_Subtract"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Subtract.apply(null,arguments)};var real__PyNumber_Divmod=asm["PyNumber_Divmod"];asm["PyNumber_Divmod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Divmod.apply(null,arguments)};var real__PyNumber_Add=asm["PyNumber_Add"];asm["PyNumber_Add"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Add.apply(null,arguments)};var real__PyNumber_Multiply=asm["PyNumber_Multiply"];asm["PyNumber_Multiply"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Multiply.apply(null,arguments)};var real__PyNumber_MatrixMultiply=asm["PyNumber_MatrixMultiply"];asm["PyNumber_MatrixMultiply"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_MatrixMultiply.apply(null,arguments)};var real__PyNumber_FloorDivide=asm["PyNumber_FloorDivide"];asm["PyNumber_FloorDivide"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_FloorDivide.apply(null,arguments)};var real__PyNumber_TrueDivide=asm["PyNumber_TrueDivide"];asm["PyNumber_TrueDivide"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_TrueDivide.apply(null,arguments)};var real__PyNumber_Remainder=asm["PyNumber_Remainder"];asm["PyNumber_Remainder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Remainder.apply(null,arguments)};var real__PyNumber_Power=asm["PyNumber_Power"];asm["PyNumber_Power"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Power.apply(null,arguments)};var real__PyNumber_InPlaceOr=asm["PyNumber_InPlaceOr"];asm["PyNumber_InPlaceOr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InPlaceOr.apply(null,arguments)};var real__PyNumber_InPlaceXor=asm["PyNumber_InPlaceXor"];asm["PyNumber_InPlaceXor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InPlaceXor.apply(null,arguments)};var real__PyNumber_InPlaceAnd=asm["PyNumber_InPlaceAnd"];asm["PyNumber_InPlaceAnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InPlaceAnd.apply(null,arguments)};var real__PyNumber_InPlaceLshift=asm["PyNumber_InPlaceLshift"];asm["PyNumber_InPlaceLshift"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InPlaceLshift.apply(null,arguments)};var real__PyNumber_InPlaceRshift=asm["PyNumber_InPlaceRshift"];asm["PyNumber_InPlaceRshift"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InPlaceRshift.apply(null,arguments)};var real__PyNumber_InPlaceSubtract=asm["PyNumber_InPlaceSubtract"];asm["PyNumber_InPlaceSubtract"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InPlaceSubtract.apply(null,arguments)};var real__PyNumber_InMatrixMultiply=asm["PyNumber_InMatrixMultiply"];asm["PyNumber_InMatrixMultiply"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InMatrixMultiply.apply(null,arguments)};var real__PyNumber_InPlaceFloorDivide=asm["PyNumber_InPlaceFloorDivide"];asm["PyNumber_InPlaceFloorDivide"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InPlaceFloorDivide.apply(null,arguments)};var real__PyNumber_InPlaceTrueDivide=asm["PyNumber_InPlaceTrueDivide"];asm["PyNumber_InPlaceTrueDivide"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InPlaceTrueDivide.apply(null,arguments)};var real__PyNumber_InPlaceAdd=asm["PyNumber_InPlaceAdd"];asm["PyNumber_InPlaceAdd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InPlaceAdd.apply(null,arguments)};var real__PyNumber_InPlaceMultiply=asm["PyNumber_InPlaceMultiply"];asm["PyNumber_InPlaceMultiply"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InPlaceMultiply.apply(null,arguments)};var real__PyNumber_InPlaceMatrixMultiply=asm["PyNumber_InPlaceMatrixMultiply"];asm["PyNumber_InPlaceMatrixMultiply"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InPlaceMatrixMultiply.apply(null,arguments)};var real__PyNumber_InPlaceRemainder=asm["PyNumber_InPlaceRemainder"];asm["PyNumber_InPlaceRemainder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InPlaceRemainder.apply(null,arguments)};var real__PyNumber_InPlacePower=asm["PyNumber_InPlacePower"];asm["PyNumber_InPlacePower"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_InPlacePower.apply(null,arguments)};var real__PyNumber_Negative=asm["PyNumber_Negative"];asm["PyNumber_Negative"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Negative.apply(null,arguments)};var real__PyNumber_Positive=asm["PyNumber_Positive"];asm["PyNumber_Positive"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Positive.apply(null,arguments)};var real__PyNumber_Invert=asm["PyNumber_Invert"];asm["PyNumber_Invert"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Invert.apply(null,arguments)};var real__PyNumber_Absolute=asm["PyNumber_Absolute"];asm["PyNumber_Absolute"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Absolute.apply(null,arguments)};var real__PyIndex_Check=asm["PyIndex_Check"];asm["PyIndex_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyIndex_Check.apply(null,arguments)};var real__PyNumber_Long=asm["PyNumber_Long"];asm["PyNumber_Long"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Long.apply(null,arguments)};var real__PyNumber_Float=asm["PyNumber_Float"];asm["PyNumber_Float"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_Float.apply(null,arguments)};var real__PyNumber_ToBase=asm["PyNumber_ToBase"];asm["PyNumber_ToBase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNumber_ToBase.apply(null,arguments)};var real__PySequence_Check=asm["PySequence_Check"];asm["PySequence_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_Check.apply(null,arguments)};var real__PySequence_Size=asm["PySequence_Size"];asm["PySequence_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_Size.apply(null,arguments)};var real__PySequence_Length=asm["PySequence_Length"];asm["PySequence_Length"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_Length.apply(null,arguments)};var real__PySequence_Concat=asm["PySequence_Concat"];asm["PySequence_Concat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_Concat.apply(null,arguments)};var real__PySequence_Repeat=asm["PySequence_Repeat"];asm["PySequence_Repeat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_Repeat.apply(null,arguments)};var real__PySequence_InPlaceConcat=asm["PySequence_InPlaceConcat"];asm["PySequence_InPlaceConcat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_InPlaceConcat.apply(null,arguments)};var real__PySequence_InPlaceRepeat=asm["PySequence_InPlaceRepeat"];asm["PySequence_InPlaceRepeat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_InPlaceRepeat.apply(null,arguments)};var real__PySequence_GetSlice=asm["PySequence_GetSlice"];asm["PySequence_GetSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_GetSlice.apply(null,arguments)};var real__PySequence_SetSlice=asm["PySequence_SetSlice"];asm["PySequence_SetSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_SetSlice.apply(null,arguments)};var real__PySequence_DelSlice=asm["PySequence_DelSlice"];asm["PySequence_DelSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_DelSlice.apply(null,arguments)};var real__PySequence_Tuple=asm["PySequence_Tuple"];asm["PySequence_Tuple"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_Tuple.apply(null,arguments)};var real__PyObject_GetIter=asm["PyObject_GetIter"];asm["PyObject_GetIter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_GetIter.apply(null,arguments)};var real__PyIter_Next=asm["PyIter_Next"];asm["PyIter_Next"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyIter_Next.apply(null,arguments)};var real__PySequence_List=asm["PySequence_List"];asm["PySequence_List"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_List.apply(null,arguments)};var real__PySequence_Fast=asm["PySequence_Fast"];asm["PySequence_Fast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_Fast.apply(null,arguments)};var real___PySequence_IterSearch=asm["_PySequence_IterSearch"];asm["_PySequence_IterSearch"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySequence_IterSearch.apply(null,arguments)};var real__PySequence_Count=asm["PySequence_Count"];asm["PySequence_Count"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_Count.apply(null,arguments)};var real__PySequence_Contains=asm["PySequence_Contains"];asm["PySequence_Contains"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_Contains.apply(null,arguments)};var real__PySequence_In=asm["PySequence_In"];asm["PySequence_In"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_In.apply(null,arguments)};var real__PySequence_Index=asm["PySequence_Index"];asm["PySequence_Index"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySequence_Index.apply(null,arguments)};var real__PyMapping_Check=asm["PyMapping_Check"];asm["PyMapping_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMapping_Check.apply(null,arguments)};var real__PyMapping_Length=asm["PyMapping_Length"];asm["PyMapping_Length"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMapping_Length.apply(null,arguments)};var real__PyMapping_GetItemString=asm["PyMapping_GetItemString"];asm["PyMapping_GetItemString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMapping_GetItemString.apply(null,arguments)};var real__PyMapping_SetItemString=asm["PyMapping_SetItemString"];asm["PyMapping_SetItemString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMapping_SetItemString.apply(null,arguments)};var real__PyMapping_HasKeyString=asm["PyMapping_HasKeyString"];asm["PyMapping_HasKeyString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMapping_HasKeyString.apply(null,arguments)};var real__PyMapping_HasKey=asm["PyMapping_HasKey"];asm["PyMapping_HasKey"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMapping_HasKey.apply(null,arguments)};var real__PyMapping_Keys=asm["PyMapping_Keys"];asm["PyMapping_Keys"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMapping_Keys.apply(null,arguments)};var real__PyMapping_Items=asm["PyMapping_Items"];asm["PyMapping_Items"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMapping_Items.apply(null,arguments)};var real__PyMapping_Values=asm["PyMapping_Values"];asm["PyMapping_Values"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMapping_Values.apply(null,arguments)};var real__PyObject_IsInstance=asm["PyObject_IsInstance"];asm["PyObject_IsInstance"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_IsInstance.apply(null,arguments)};var real__PyObject_IsSubclass=asm["PyObject_IsSubclass"];asm["PyObject_IsSubclass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_IsSubclass.apply(null,arguments)};var real___PyObject_RealIsInstance=asm["_PyObject_RealIsInstance"];asm["_PyObject_RealIsInstance"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_RealIsInstance.apply(null,arguments)};var real___PyObject_RealIsSubclass=asm["_PyObject_RealIsSubclass"];asm["_PyObject_RealIsSubclass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_RealIsSubclass.apply(null,arguments)};var real__PyIter_Check=asm["PyIter_Check"];asm["PyIter_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyIter_Check.apply(null,arguments)};var real___PySequence_BytesToCharpArray=asm["_PySequence_BytesToCharpArray"];asm["_PySequence_BytesToCharpArray"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySequence_BytesToCharpArray.apply(null,arguments)};var real___Py_FreeCharPArray=asm["_Py_FreeCharPArray"];asm["_Py_FreeCharPArray"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_FreeCharPArray.apply(null,arguments)};var real___PyAccu_Init=asm["_PyAccu_Init"];asm["_PyAccu_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyAccu_Init.apply(null,arguments)};var real___PyAccu_Accumulate=asm["_PyAccu_Accumulate"];asm["_PyAccu_Accumulate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyAccu_Accumulate.apply(null,arguments)};var real___PyAccu_FinishAsList=asm["_PyAccu_FinishAsList"];asm["_PyAccu_FinishAsList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyAccu_FinishAsList.apply(null,arguments)};var real___PyAccu_Finish=asm["_PyAccu_Finish"];asm["_PyAccu_Finish"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyAccu_Finish.apply(null,arguments)};var real___PyAccu_Destroy=asm["_PyAccu_Destroy"];asm["_PyAccu_Destroy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyAccu_Destroy.apply(null,arguments)};var real__PyBool_FromLong=asm["PyBool_FromLong"];asm["PyBool_FromLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBool_FromLong.apply(null,arguments)};var real__PyByteArray_FromObject=asm["PyByteArray_FromObject"];asm["PyByteArray_FromObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyByteArray_FromObject.apply(null,arguments)};var real__PyByteArray_FromStringAndSize=asm["PyByteArray_FromStringAndSize"];asm["PyByteArray_FromStringAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyByteArray_FromStringAndSize.apply(null,arguments)};var real__PyByteArray_Size=asm["PyByteArray_Size"];asm["PyByteArray_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyByteArray_Size.apply(null,arguments)};var real__PyByteArray_AsString=asm["PyByteArray_AsString"];asm["PyByteArray_AsString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyByteArray_AsString.apply(null,arguments)};var real__PyByteArray_Resize=asm["PyByteArray_Resize"];asm["PyByteArray_Resize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyByteArray_Resize.apply(null,arguments)};var real__PyByteArray_Concat=asm["PyByteArray_Concat"];asm["PyByteArray_Concat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyByteArray_Concat.apply(null,arguments)};var real___Py_bytes_isspace=asm["_Py_bytes_isspace"];asm["_Py_bytes_isspace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_isspace.apply(null,arguments)};var real___Py_bytes_isalpha=asm["_Py_bytes_isalpha"];asm["_Py_bytes_isalpha"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_isalpha.apply(null,arguments)};var real___Py_bytes_isalnum=asm["_Py_bytes_isalnum"];asm["_Py_bytes_isalnum"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_isalnum.apply(null,arguments)};var real___Py_bytes_isascii=asm["_Py_bytes_isascii"];asm["_Py_bytes_isascii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_isascii.apply(null,arguments)};var real___Py_bytes_isdigit=asm["_Py_bytes_isdigit"];asm["_Py_bytes_isdigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_isdigit.apply(null,arguments)};var real___Py_bytes_islower=asm["_Py_bytes_islower"];asm["_Py_bytes_islower"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_islower.apply(null,arguments)};var real___Py_bytes_isupper=asm["_Py_bytes_isupper"];asm["_Py_bytes_isupper"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_isupper.apply(null,arguments)};var real___Py_bytes_istitle=asm["_Py_bytes_istitle"];asm["_Py_bytes_istitle"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_istitle.apply(null,arguments)};var real___Py_bytes_lower=asm["_Py_bytes_lower"];asm["_Py_bytes_lower"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_lower.apply(null,arguments)};var real___Py_bytes_upper=asm["_Py_bytes_upper"];asm["_Py_bytes_upper"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_upper.apply(null,arguments)};var real___Py_bytes_title=asm["_Py_bytes_title"];asm["_Py_bytes_title"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_title.apply(null,arguments)};var real___Py_bytes_capitalize=asm["_Py_bytes_capitalize"];asm["_Py_bytes_capitalize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_capitalize.apply(null,arguments)};var real___Py_bytes_swapcase=asm["_Py_bytes_swapcase"];asm["_Py_bytes_swapcase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_swapcase.apply(null,arguments)};var real___Py_bytes_maketrans=asm["_Py_bytes_maketrans"];asm["_Py_bytes_maketrans"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_maketrans.apply(null,arguments)};var real___Py_bytes_find=asm["_Py_bytes_find"];asm["_Py_bytes_find"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_find.apply(null,arguments)};var real___Py_bytes_index=asm["_Py_bytes_index"];asm["_Py_bytes_index"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_index.apply(null,arguments)};var real___Py_bytes_rfind=asm["_Py_bytes_rfind"];asm["_Py_bytes_rfind"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_rfind.apply(null,arguments)};var real___Py_bytes_rindex=asm["_Py_bytes_rindex"];asm["_Py_bytes_rindex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_rindex.apply(null,arguments)};var real___Py_bytes_count=asm["_Py_bytes_count"];asm["_Py_bytes_count"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_count.apply(null,arguments)};var real___Py_bytes_contains=asm["_Py_bytes_contains"];asm["_Py_bytes_contains"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_contains.apply(null,arguments)};var real___Py_bytes_startswith=asm["_Py_bytes_startswith"];asm["_Py_bytes_startswith"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_startswith.apply(null,arguments)};var real___Py_bytes_endswith=asm["_Py_bytes_endswith"];asm["_Py_bytes_endswith"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_bytes_endswith.apply(null,arguments)};var real__PyBytes_FromStringAndSize=asm["PyBytes_FromStringAndSize"];asm["PyBytes_FromStringAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBytes_FromStringAndSize.apply(null,arguments)};var real__PyBytes_FromString=asm["PyBytes_FromString"];asm["PyBytes_FromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBytes_FromString.apply(null,arguments)};var real__PyBytes_FromFormatV=asm["PyBytes_FromFormatV"];asm["PyBytes_FromFormatV"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBytes_FromFormatV.apply(null,arguments)};var real___PyBytesWriter_Resize=asm["_PyBytesWriter_Resize"];asm["_PyBytesWriter_Resize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBytesWriter_Resize.apply(null,arguments)};var real___PyBytesWriter_Finish=asm["_PyBytesWriter_Finish"];asm["_PyBytesWriter_Finish"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBytesWriter_Finish.apply(null,arguments)};var real___PyBytesWriter_Init=asm["_PyBytesWriter_Init"];asm["_PyBytesWriter_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBytesWriter_Init.apply(null,arguments)};var real___PyBytesWriter_Alloc=asm["_PyBytesWriter_Alloc"];asm["_PyBytesWriter_Alloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBytesWriter_Alloc.apply(null,arguments)};var real___PyBytesWriter_WriteBytes=asm["_PyBytesWriter_WriteBytes"];asm["_PyBytesWriter_WriteBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBytesWriter_WriteBytes.apply(null,arguments)};var real___PyBytes_Resize=asm["_PyBytes_Resize"];asm["_PyBytes_Resize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBytes_Resize.apply(null,arguments)};var real___PyBytesWriter_Dealloc=asm["_PyBytesWriter_Dealloc"];asm["_PyBytesWriter_Dealloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBytesWriter_Dealloc.apply(null,arguments)};var real__PyBytes_FromFormat=asm["PyBytes_FromFormat"];asm["PyBytes_FromFormat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBytes_FromFormat.apply(null,arguments)};var real___PyBytes_FormatEx=asm["_PyBytes_FormatEx"];asm["_PyBytes_FormatEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBytes_FormatEx.apply(null,arguments)};var real___PyBytesWriter_Prepare=asm["_PyBytesWriter_Prepare"];asm["_PyBytesWriter_Prepare"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBytesWriter_Prepare.apply(null,arguments)};var real___PyBytes_DecodeEscape=asm["_PyBytes_DecodeEscape"];asm["_PyBytes_DecodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBytes_DecodeEscape.apply(null,arguments)};var real__PyBytes_DecodeEscape=asm["PyBytes_DecodeEscape"];asm["PyBytes_DecodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBytes_DecodeEscape.apply(null,arguments)};var real__PyBytes_Size=asm["PyBytes_Size"];asm["PyBytes_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBytes_Size.apply(null,arguments)};var real__PyBytes_AsString=asm["PyBytes_AsString"];asm["PyBytes_AsString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBytes_AsString.apply(null,arguments)};var real__PyBytes_AsStringAndSize=asm["PyBytes_AsStringAndSize"];asm["PyBytes_AsStringAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBytes_AsStringAndSize.apply(null,arguments)};var real__PyBytes_Repr=asm["PyBytes_Repr"];asm["PyBytes_Repr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBytes_Repr.apply(null,arguments)};var real___PyBytes_Join=asm["_PyBytes_Join"];asm["_PyBytes_Join"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBytes_Join.apply(null,arguments)};var real___PyBytes_FromHex=asm["_PyBytes_FromHex"];asm["_PyBytes_FromHex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBytes_FromHex.apply(null,arguments)};var real__PyBytes_FromObject=asm["PyBytes_FromObject"];asm["PyBytes_FromObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBytes_FromObject.apply(null,arguments)};var real__PyBytes_Concat=asm["PyBytes_Concat"];asm["PyBytes_Concat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBytes_Concat.apply(null,arguments)};var real__PyBytes_ConcatAndDel=asm["PyBytes_ConcatAndDel"];asm["PyBytes_ConcatAndDel"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBytes_ConcatAndDel.apply(null,arguments)};var real__PyBytes_Fini=asm["PyBytes_Fini"];asm["PyBytes_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBytes_Fini.apply(null,arguments)};var real___Py_CheckFunctionResult=asm["_Py_CheckFunctionResult"];asm["_Py_CheckFunctionResult"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_CheckFunctionResult.apply(null,arguments)};var real___PyObject_FastCallDict=asm["_PyObject_FastCallDict"];asm["_PyObject_FastCallDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_FastCallDict.apply(null,arguments)};var real___PyObject_MakeTpCall=asm["_PyObject_MakeTpCall"];asm["_PyObject_MakeTpCall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_MakeTpCall.apply(null,arguments)};var real___PyStack_UnpackDict=asm["_PyStack_UnpackDict"];asm["_PyStack_UnpackDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyStack_UnpackDict.apply(null,arguments)};var real___PyStack_AsDict=asm["_PyStack_AsDict"];asm["_PyStack_AsDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyStack_AsDict.apply(null,arguments)};var real__PyVectorcall_Call=asm["PyVectorcall_Call"];asm["PyVectorcall_Call"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyVectorcall_Call.apply(null,arguments)};var real__PyObject_Call=asm["PyObject_Call"];asm["PyObject_Call"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Call.apply(null,arguments)};var real___PyFunction_FastCallDict=asm["_PyFunction_FastCallDict"];asm["_PyFunction_FastCallDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFunction_FastCallDict.apply(null,arguments)};var real___PyFunction_Vectorcall=asm["_PyFunction_Vectorcall"];asm["_PyFunction_Vectorcall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFunction_Vectorcall.apply(null,arguments)};var real___PyMethodDef_RawFastCallDict=asm["_PyMethodDef_RawFastCallDict"];asm["_PyMethodDef_RawFastCallDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyMethodDef_RawFastCallDict.apply(null,arguments)};var real___PyCFunction_FastCallDict=asm["_PyCFunction_FastCallDict"];asm["_PyCFunction_FastCallDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCFunction_FastCallDict.apply(null,arguments)};var real___PyMethodDef_RawFastCallKeywords=asm["_PyMethodDef_RawFastCallKeywords"];asm["_PyMethodDef_RawFastCallKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyMethodDef_RawFastCallKeywords.apply(null,arguments)};var real__PyCFunction_Call=asm["PyCFunction_Call"];asm["PyCFunction_Call"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCFunction_Call.apply(null,arguments)};var real__PyEval_CallObjectWithKeywords=asm["PyEval_CallObjectWithKeywords"];asm["PyEval_CallObjectWithKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_CallObjectWithKeywords.apply(null,arguments)};var real__PyObject_CallObject=asm["PyObject_CallObject"];asm["PyObject_CallObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_CallObject.apply(null,arguments)};var real___PyObject_FastCall_Prepend=asm["_PyObject_FastCall_Prepend"];asm["_PyObject_FastCall_Prepend"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_FastCall_Prepend.apply(null,arguments)};var real___PyObject_Call_Prepend=asm["_PyObject_Call_Prepend"];asm["_PyObject_Call_Prepend"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_Call_Prepend.apply(null,arguments)};var real__PyObject_CallFunction=asm["PyObject_CallFunction"];asm["PyObject_CallFunction"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_CallFunction.apply(null,arguments)};var real__PyEval_CallFunction=asm["PyEval_CallFunction"];asm["PyEval_CallFunction"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_CallFunction.apply(null,arguments)};var real___PyObject_CallFunction_SizeT=asm["_PyObject_CallFunction_SizeT"];asm["_PyObject_CallFunction_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_CallFunction_SizeT.apply(null,arguments)};var real__PyObject_CallMethod=asm["PyObject_CallMethod"];asm["PyObject_CallMethod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_CallMethod.apply(null,arguments)};var real__PyEval_CallMethod=asm["PyEval_CallMethod"];asm["PyEval_CallMethod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_CallMethod.apply(null,arguments)};var real___PyObject_CallMethodId=asm["_PyObject_CallMethodId"];asm["_PyObject_CallMethodId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_CallMethodId.apply(null,arguments)};var real___PyObject_CallMethod_SizeT=asm["_PyObject_CallMethod_SizeT"];asm["_PyObject_CallMethod_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_CallMethod_SizeT.apply(null,arguments)};var real___PyObject_CallMethodId_SizeT=asm["_PyObject_CallMethodId_SizeT"];asm["_PyObject_CallMethodId_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_CallMethodId_SizeT.apply(null,arguments)};var real__PyObject_CallMethodObjArgs=asm["PyObject_CallMethodObjArgs"];asm["PyObject_CallMethodObjArgs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_CallMethodObjArgs.apply(null,arguments)};var real___PyObject_CallMethodIdObjArgs=asm["_PyObject_CallMethodIdObjArgs"];asm["_PyObject_CallMethodIdObjArgs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_CallMethodIdObjArgs.apply(null,arguments)};var real__PyObject_CallFunctionObjArgs=asm["PyObject_CallFunctionObjArgs"];asm["PyObject_CallFunctionObjArgs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_CallFunctionObjArgs.apply(null,arguments)};var real__PyCapsule_New=asm["PyCapsule_New"];asm["PyCapsule_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCapsule_New.apply(null,arguments)};var real__PyCapsule_IsValid=asm["PyCapsule_IsValid"];asm["PyCapsule_IsValid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCapsule_IsValid.apply(null,arguments)};var real__PyCapsule_GetPointer=asm["PyCapsule_GetPointer"];asm["PyCapsule_GetPointer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCapsule_GetPointer.apply(null,arguments)};var real__PyCapsule_GetName=asm["PyCapsule_GetName"];asm["PyCapsule_GetName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCapsule_GetName.apply(null,arguments)};var real__PyCapsule_GetDestructor=asm["PyCapsule_GetDestructor"];asm["PyCapsule_GetDestructor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCapsule_GetDestructor.apply(null,arguments)};var real__PyCapsule_GetContext=asm["PyCapsule_GetContext"];asm["PyCapsule_GetContext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCapsule_GetContext.apply(null,arguments)};var real__PyCapsule_SetPointer=asm["PyCapsule_SetPointer"];asm["PyCapsule_SetPointer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCapsule_SetPointer.apply(null,arguments)};var real__PyCapsule_SetName=asm["PyCapsule_SetName"];asm["PyCapsule_SetName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCapsule_SetName.apply(null,arguments)};var real__PyCapsule_SetDestructor=asm["PyCapsule_SetDestructor"];asm["PyCapsule_SetDestructor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCapsule_SetDestructor.apply(null,arguments)};var real__PyCapsule_SetContext=asm["PyCapsule_SetContext"];asm["PyCapsule_SetContext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCapsule_SetContext.apply(null,arguments)};var real__PyCapsule_Import=asm["PyCapsule_Import"];asm["PyCapsule_Import"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCapsule_Import.apply(null,arguments)};var real__PyCell_New=asm["PyCell_New"];asm["PyCell_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCell_New.apply(null,arguments)};var real__PyCell_Get=asm["PyCell_Get"];asm["PyCell_Get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCell_Get.apply(null,arguments)};var real__PyCell_Set=asm["PyCell_Set"];asm["PyCell_Set"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCell_Set.apply(null,arguments)};var real__PyMethod_Function=asm["PyMethod_Function"];asm["PyMethod_Function"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMethod_Function.apply(null,arguments)};var real__PyMethod_Self=asm["PyMethod_Self"];asm["PyMethod_Self"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMethod_Self.apply(null,arguments)};var real__PyMethod_New=asm["PyMethod_New"];asm["PyMethod_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMethod_New.apply(null,arguments)};var real__PyMethod_ClearFreeList=asm["PyMethod_ClearFreeList"];asm["PyMethod_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMethod_ClearFreeList.apply(null,arguments)};var real__PyMethod_Fini=asm["PyMethod_Fini"];asm["PyMethod_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMethod_Fini.apply(null,arguments)};var real___PyMethod_DebugMallocStats=asm["_PyMethod_DebugMallocStats"];asm["_PyMethod_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyMethod_DebugMallocStats.apply(null,arguments)};var real__PyInstanceMethod_New=asm["PyInstanceMethod_New"];asm["PyInstanceMethod_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInstanceMethod_New.apply(null,arguments)};var real__PyInstanceMethod_Function=asm["PyInstanceMethod_Function"];asm["PyInstanceMethod_Function"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInstanceMethod_Function.apply(null,arguments)};var real__PyCode_NewWithPosOnlyArgs=asm["PyCode_NewWithPosOnlyArgs"];asm["PyCode_NewWithPosOnlyArgs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCode_NewWithPosOnlyArgs.apply(null,arguments)};var real__PyCode_New=asm["PyCode_New"];asm["PyCode_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCode_New.apply(null,arguments)};var real___PyCode_InitOpcache=asm["_PyCode_InitOpcache"];asm["_PyCode_InitOpcache"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCode_InitOpcache.apply(null,arguments)};var real__PyCode_NewEmpty=asm["PyCode_NewEmpty"];asm["PyCode_NewEmpty"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCode_NewEmpty.apply(null,arguments)};var real___PyCode_ConstantKey=asm["_PyCode_ConstantKey"];asm["_PyCode_ConstantKey"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCode_ConstantKey.apply(null,arguments)};var real__PyCode_Addr2Line=asm["PyCode_Addr2Line"];asm["PyCode_Addr2Line"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCode_Addr2Line.apply(null,arguments)};var real___PyCode_CheckLineNumber=asm["_PyCode_CheckLineNumber"];asm["_PyCode_CheckLineNumber"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCode_CheckLineNumber.apply(null,arguments)};var real___PyCode_GetExtra=asm["_PyCode_GetExtra"];asm["_PyCode_GetExtra"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCode_GetExtra.apply(null,arguments)};var real___PyCode_SetExtra=asm["_PyCode_SetExtra"];asm["_PyCode_SetExtra"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCode_SetExtra.apply(null,arguments)};var real___Py_c_sum=asm["_Py_c_sum"];asm["_Py_c_sum"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_c_sum.apply(null,arguments)};var real___Py_c_diff=asm["_Py_c_diff"];asm["_Py_c_diff"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_c_diff.apply(null,arguments)};var real___Py_c_neg=asm["_Py_c_neg"];asm["_Py_c_neg"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_c_neg.apply(null,arguments)};var real___Py_c_prod=asm["_Py_c_prod"];asm["_Py_c_prod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_c_prod.apply(null,arguments)};var real___Py_c_quot=asm["_Py_c_quot"];asm["_Py_c_quot"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_c_quot.apply(null,arguments)};var real___Py_c_pow=asm["_Py_c_pow"];asm["_Py_c_pow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_c_pow.apply(null,arguments)};var real___Py_c_abs=asm["_Py_c_abs"];asm["_Py_c_abs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_c_abs.apply(null,arguments)};var real__PyComplex_FromCComplex=asm["PyComplex_FromCComplex"];asm["PyComplex_FromCComplex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyComplex_FromCComplex.apply(null,arguments)};var real__PyComplex_FromDoubles=asm["PyComplex_FromDoubles"];asm["PyComplex_FromDoubles"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyComplex_FromDoubles.apply(null,arguments)};var real__PyComplex_RealAsDouble=asm["PyComplex_RealAsDouble"];asm["PyComplex_RealAsDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyComplex_RealAsDouble.apply(null,arguments)};var real__PyComplex_ImagAsDouble=asm["PyComplex_ImagAsDouble"];asm["PyComplex_ImagAsDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyComplex_ImagAsDouble.apply(null,arguments)};var real__PyComplex_AsCComplex=asm["PyComplex_AsCComplex"];asm["PyComplex_AsCComplex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyComplex_AsCComplex.apply(null,arguments)};var real__PyDescr_NewMethod=asm["PyDescr_NewMethod"];asm["PyDescr_NewMethod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDescr_NewMethod.apply(null,arguments)};var real__PyDescr_NewClassMethod=asm["PyDescr_NewClassMethod"];asm["PyDescr_NewClassMethod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDescr_NewClassMethod.apply(null,arguments)};var real__PyDescr_NewMember=asm["PyDescr_NewMember"];asm["PyDescr_NewMember"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDescr_NewMember.apply(null,arguments)};var real__PyDescr_NewGetSet=asm["PyDescr_NewGetSet"];asm["PyDescr_NewGetSet"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDescr_NewGetSet.apply(null,arguments)};var real__PyDescr_NewWrapper=asm["PyDescr_NewWrapper"];asm["PyDescr_NewWrapper"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDescr_NewWrapper.apply(null,arguments)};var real__PyDictProxy_New=asm["PyDictProxy_New"];asm["PyDictProxy_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDictProxy_New.apply(null,arguments)};var real__PyWrapper_New=asm["PyWrapper_New"];asm["PyWrapper_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyWrapper_New.apply(null,arguments)};var real__PyDict_ClearFreeList=asm["PyDict_ClearFreeList"];asm["PyDict_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_ClearFreeList.apply(null,arguments)};var real___PyDict_DebugMallocStats=asm["_PyDict_DebugMallocStats"];asm["_PyDict_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_DebugMallocStats.apply(null,arguments)};var real__PyDict_Fini=asm["PyDict_Fini"];asm["PyDict_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_Fini.apply(null,arguments)};var real___PyDict_CheckConsistency=asm["_PyDict_CheckConsistency"];asm["_PyDict_CheckConsistency"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_CheckConsistency.apply(null,arguments)};var real__PyDict_New=asm["PyDict_New"];asm["PyDict_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_New.apply(null,arguments)};var real___PyDict_HasOnlyStringKeys=asm["_PyDict_HasOnlyStringKeys"];asm["_PyDict_HasOnlyStringKeys"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_HasOnlyStringKeys.apply(null,arguments)};var real__PyDict_Next=asm["PyDict_Next"];asm["PyDict_Next"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_Next.apply(null,arguments)};var real___PyDict_MaybeUntrack=asm["_PyDict_MaybeUntrack"];asm["_PyDict_MaybeUntrack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_MaybeUntrack.apply(null,arguments)};var real___PyDict_NewPresized=asm["_PyDict_NewPresized"];asm["_PyDict_NewPresized"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_NewPresized.apply(null,arguments)};var real__PyDict_GetItem=asm["PyDict_GetItem"];asm["PyDict_GetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_GetItem.apply(null,arguments)};var real___PyDict_GetItem_KnownHash=asm["_PyDict_GetItem_KnownHash"];asm["_PyDict_GetItem_KnownHash"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_GetItem_KnownHash.apply(null,arguments)};var real__PyDict_GetItemWithError=asm["PyDict_GetItemWithError"];asm["PyDict_GetItemWithError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_GetItemWithError.apply(null,arguments)};var real___PyDict_GetItemIdWithError=asm["_PyDict_GetItemIdWithError"];asm["_PyDict_GetItemIdWithError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_GetItemIdWithError.apply(null,arguments)};var real___PyDict_GetItemStringWithError=asm["_PyDict_GetItemStringWithError"];asm["_PyDict_GetItemStringWithError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_GetItemStringWithError.apply(null,arguments)};var real___PyDict_LoadGlobal=asm["_PyDict_LoadGlobal"];asm["_PyDict_LoadGlobal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_LoadGlobal.apply(null,arguments)};var real__PyList_New=asm["PyList_New"];asm["PyList_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyList_New.apply(null,arguments)};var real__PyModule_AddObject=asm["PyModule_AddObject"];asm["PyModule_AddObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_AddObject.apply(null,arguments)};var real__PyModule_AddIntConstant=asm["PyModule_AddIntConstant"];asm["PyModule_AddIntConstant"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_AddIntConstant.apply(null,arguments)};var real__PyErr_Fetch=asm["PyErr_Fetch"];asm["PyErr_Fetch"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_Fetch.apply(null,arguments)};var real__PyErr_Restore=asm["PyErr_Restore"];asm["PyErr_Restore"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_Restore.apply(null,arguments)};var real__PySys_WriteStderr=asm["PySys_WriteStderr"];asm["PySys_WriteStderr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_WriteStderr.apply(null,arguments)};var real__PyOS_snprintf=asm["PyOS_snprintf"];asm["PyOS_snprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_snprintf.apply(null,arguments)};var real__PySys_FormatStderr=asm["PySys_FormatStderr"];asm["PySys_FormatStderr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_FormatStderr.apply(null,arguments)};var real___PyTime_GetMonotonicClock=asm["_PyTime_GetMonotonicClock"];asm["_PyTime_GetMonotonicClock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_GetMonotonicClock.apply(null,arguments)};var real___PyTuple_MaybeUntrack=asm["_PyTuple_MaybeUntrack"];asm["_PyTuple_MaybeUntrack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTuple_MaybeUntrack.apply(null,arguments)};var real___PyWeakref_ClearRef=asm["_PyWeakref_ClearRef"];asm["_PyWeakref_ClearRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyWeakref_ClearRef.apply(null,arguments)};var real__PyErr_Occurred=asm["PyErr_Occurred"];asm["PyErr_Occurred"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_Occurred.apply(null,arguments)};var real__PyErr_Format=asm["PyErr_Format"];asm["PyErr_Format"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_Format.apply(null,arguments)};var real___Py_Dealloc=asm["_Py_Dealloc"];asm["_Py_Dealloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Dealloc.apply(null,arguments)};var real___PyErr_FormatFromCause=asm["_PyErr_FormatFromCause"];asm["_PyErr_FormatFromCause"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_FormatFromCause.apply(null,arguments)};var real__PyMem_Free=asm["PyMem_Free"];asm["PyMem_Free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMem_Free.apply(null,arguments)};var real___PyTuple_FromArray=asm["_PyTuple_FromArray"];asm["_PyTuple_FromArray"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTuple_FromArray.apply(null,arguments)};var real___Py_CheckRecursiveCall=asm["_Py_CheckRecursiveCall"];asm["_Py_CheckRecursiveCall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_CheckRecursiveCall.apply(null,arguments)};var real__PyErr_NoMemory=asm["PyErr_NoMemory"];asm["PyErr_NoMemory"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_NoMemory.apply(null,arguments)};var real__PyMem_Malloc=asm["PyMem_Malloc"];asm["PyMem_Malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMem_Malloc.apply(null,arguments)};var real__PyTuple_New=asm["PyTuple_New"];asm["PyTuple_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTuple_New.apply(null,arguments)};var real___PyEval_EvalCodeWithName=asm["_PyEval_EvalCodeWithName"];asm["_PyEval_EvalCodeWithName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_EvalCodeWithName.apply(null,arguments)};var real___PyFrame_New_NoTrack=asm["_PyFrame_New_NoTrack"];asm["_PyFrame_New_NoTrack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFrame_New_NoTrack.apply(null,arguments)};var real__PyEval_EvalFrameEx=asm["PyEval_EvalFrameEx"];asm["PyEval_EvalFrameEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_EvalFrameEx.apply(null,arguments)};var real__PyErr_SetString=asm["PyErr_SetString"];asm["PyErr_SetString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SetString.apply(null,arguments)};var real__memcpy=asm["memcpy"];asm["memcpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__memcpy.apply(null,arguments)};var real___Py_VaBuildStack_SizeT=asm["_Py_VaBuildStack_SizeT"];asm["_Py_VaBuildStack_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_VaBuildStack_SizeT.apply(null,arguments)};var real___Py_VaBuildStack=asm["_Py_VaBuildStack"];asm["_Py_VaBuildStack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_VaBuildStack.apply(null,arguments)};var real__PyObject_GetAttrString=asm["PyObject_GetAttrString"];asm["PyObject_GetAttrString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_GetAttrString.apply(null,arguments)};var real__PyCallable_Check=asm["PyCallable_Check"];asm["PyCallable_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCallable_Check.apply(null,arguments)};var real___PyObject_GetAttrId=asm["_PyObject_GetAttrId"];asm["_PyObject_GetAttrId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_GetAttrId.apply(null,arguments)};var real___PyObject_GetMethod=asm["_PyObject_GetMethod"];asm["_PyObject_GetMethod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_GetMethod.apply(null,arguments)};var real___PyUnicode_FromId=asm["_PyUnicode_FromId"];asm["_PyUnicode_FromId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_FromId.apply(null,arguments)};var real__PyErr_WriteUnraisable=asm["PyErr_WriteUnraisable"];asm["PyErr_WriteUnraisable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_WriteUnraisable.apply(null,arguments)};var real__PyList_Append=asm["PyList_Append"];asm["PyList_Append"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyList_Append.apply(null,arguments)};var real__PyErr_Clear=asm["PyErr_Clear"];asm["PyErr_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_Clear.apply(null,arguments)};var real___PyErr_WriteUnraisableMsg=asm["_PyErr_WriteUnraisableMsg"];asm["_PyErr_WriteUnraisableMsg"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_WriteUnraisableMsg.apply(null,arguments)};var real___PyTime_AsSecondsDouble=asm["_PyTime_AsSecondsDouble"];asm["_PyTime_AsSecondsDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_AsSecondsDouble.apply(null,arguments)};var real___PyErr_BadInternalCall=asm["_PyErr_BadInternalCall"];asm["_PyErr_BadInternalCall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_BadInternalCall.apply(null,arguments)};var real__PyType_GetFlags=asm["PyType_GetFlags"];asm["PyType_GetFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyType_GetFlags.apply(null,arguments)};var real___Py_write_noraise=asm["_Py_write_noraise"];asm["_Py_write_noraise"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_write_noraise.apply(null,arguments)};var real__PyThread_acquire_lock=asm["PyThread_acquire_lock"];asm["PyThread_acquire_lock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_acquire_lock.apply(null,arguments)};var real___Py_HashPointer=asm["_Py_HashPointer"];asm["_Py_HashPointer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_HashPointer.apply(null,arguments)};var real__memcmp=asm["memcmp"];asm["memcmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__memcmp.apply(null,arguments)};var real__PyMem_RawMalloc=asm["PyMem_RawMalloc"];asm["PyMem_RawMalloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMem_RawMalloc.apply(null,arguments)};var real__PyMem_RawFree=asm["PyMem_RawFree"];asm["PyMem_RawFree"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMem_RawFree.apply(null,arguments)};var real__memset=asm["memset"];asm["memset"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__memset.apply(null,arguments)};var real__PyThread_release_lock=asm["PyThread_release_lock"];asm["PyThread_release_lock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_release_lock.apply(null,arguments)};var real___Py_DumpASCII=asm["_Py_DumpASCII"];asm["_Py_DumpASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_DumpASCII.apply(null,arguments)};var real___Py_DumpDecimal=asm["_Py_DumpDecimal"];asm["_Py_DumpDecimal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_DumpDecimal.apply(null,arguments)};var real__PyMem_GetAllocator=asm["PyMem_GetAllocator"];asm["PyMem_GetAllocator"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMem_GetAllocator.apply(null,arguments)};var real__PyThread_tss_create=asm["PyThread_tss_create"];asm["PyThread_tss_create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_tss_create.apply(null,arguments)};var real__PyErr_SetFromErrno=asm["PyErr_SetFromErrno"];asm["PyErr_SetFromErrno"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SetFromErrno.apply(null,arguments)};var real__PyThread_allocate_lock=asm["PyThread_allocate_lock"];asm["PyThread_allocate_lock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_allocate_lock.apply(null,arguments)};var real__PyUnicode_InternInPlace=asm["PyUnicode_InternInPlace"];asm["PyUnicode_InternInPlace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_InternInPlace.apply(null,arguments)};var real__PyObject_Hash=asm["PyObject_Hash"];asm["PyObject_Hash"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Hash.apply(null,arguments)};var real__PyMem_SetAllocator=asm["PyMem_SetAllocator"];asm["PyMem_SetAllocator"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMem_SetAllocator.apply(null,arguments)};var real__PyThread_free_lock=asm["PyThread_free_lock"];asm["PyThread_free_lock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_free_lock.apply(null,arguments)};var real__PyThread_tss_delete=asm["PyThread_tss_delete"];asm["PyThread_tss_delete"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_tss_delete.apply(null,arguments)};var real__PyGILState_Ensure=asm["PyGILState_Ensure"];asm["PyGILState_Ensure"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyGILState_Ensure.apply(null,arguments)};var real__PyGILState_Release=asm["PyGILState_Release"];asm["PyGILState_Release"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyGILState_Release.apply(null,arguments)};var real__PyGILState_GetThisThreadState=asm["PyGILState_GetThisThreadState"];asm["PyGILState_GetThisThreadState"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyGILState_GetThisThreadState.apply(null,arguments)};var real__PyFrame_GetLineNumber=asm["PyFrame_GetLineNumber"];asm["PyFrame_GetLineNumber"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFrame_GetLineNumber.apply(null,arguments)};var real__PyLong_FromUnsignedLong=asm["PyLong_FromUnsignedLong"];asm["PyLong_FromUnsignedLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_FromUnsignedLong.apply(null,arguments)};var real__PyUnicode_InternFromString=asm["PyUnicode_InternFromString"];asm["PyUnicode_InternFromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_InternFromString.apply(null,arguments)};var real___PyArg_NoKeywords=asm["_PyArg_NoKeywords"];asm["_PyArg_NoKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_NoKeywords.apply(null,arguments)};var real__PyArg_UnpackTuple=asm["PyArg_UnpackTuple"];asm["PyArg_UnpackTuple"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyArg_UnpackTuple.apply(null,arguments)};var real__PyObject_IsTrue=asm["PyObject_IsTrue"];asm["PyObject_IsTrue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_IsTrue.apply(null,arguments)};var real__PyThread_tss_set=asm["PyThread_tss_set"];asm["PyThread_tss_set"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_tss_set.apply(null,arguments)};var real___PyArg_CheckPositional=asm["_PyArg_CheckPositional"];asm["_PyArg_CheckPositional"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_CheckPositional.apply(null,arguments)};var real__PyType_IsSubtype=asm["PyType_IsSubtype"];asm["PyType_IsSubtype"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyType_IsSubtype.apply(null,arguments)};var real___PyLong_AsInt=asm["_PyLong_AsInt"];asm["_PyLong_AsInt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_AsInt.apply(null,arguments)};var real__PyLong_FromLong=asm["PyLong_FromLong"];asm["PyLong_FromLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_FromLong.apply(null,arguments)};var real__PyLong_FromSize_t=asm["PyLong_FromSize_t"];asm["PyLong_FromSize_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_FromSize_t.apply(null,arguments)};var real__PyUnicode_Compare=asm["PyUnicode_Compare"];asm["PyUnicode_Compare"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Compare.apply(null,arguments)};var real__PyThread_tss_get=asm["PyThread_tss_get"];asm["PyThread_tss_get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_tss_get.apply(null,arguments)};var real__free=asm["free"];asm["free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__free.apply(null,arguments)};var real__PyObject_ClearWeakRefs=asm["PyObject_ClearWeakRefs"];asm["PyObject_ClearWeakRefs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_ClearWeakRefs.apply(null,arguments)};var real___PyObject_LookupAttrId=asm["_PyObject_LookupAttrId"];asm["_PyObject_LookupAttrId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_LookupAttrId.apply(null,arguments)};var real__PyUnicode_FromFormat=asm["PyUnicode_FromFormat"];asm["PyUnicode_FromFormat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_FromFormat.apply(null,arguments)};var real__PyType_Ready=asm["PyType_Ready"];asm["PyType_Ready"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyType_Ready.apply(null,arguments)};var real___PyType_Lookup=asm["_PyType_Lookup"];asm["_PyType_Lookup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyType_Lookup.apply(null,arguments)};var real__PyObject_GetAttr=asm["PyObject_GetAttr"];asm["PyObject_GetAttr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_GetAttr.apply(null,arguments)};var real__PyObject_RichCompareBool=asm["PyObject_RichCompareBool"];asm["PyObject_RichCompareBool"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_RichCompareBool.apply(null,arguments)};var real___PyDebugAllocatorStats=asm["_PyDebugAllocatorStats"];asm["_PyDebugAllocatorStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDebugAllocatorStats.apply(null,arguments)};var real___PyEval_GetBuiltinId=asm["_PyEval_GetBuiltinId"];asm["_PyEval_GetBuiltinId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_GetBuiltinId.apply(null,arguments)};var real__PyObject_GenericSetAttr=asm["PyObject_GenericSetAttr"];asm["PyObject_GenericSetAttr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_GenericSetAttr.apply(null,arguments)};var real__PyFrame_ClearFreeList=asm["PyFrame_ClearFreeList"];asm["PyFrame_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFrame_ClearFreeList.apply(null,arguments)};var real__PyCFunction_ClearFreeList=asm["PyCFunction_ClearFreeList"];asm["PyCFunction_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCFunction_ClearFreeList.apply(null,arguments)};var real__PyTuple_ClearFreeList=asm["PyTuple_ClearFreeList"];asm["PyTuple_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTuple_ClearFreeList.apply(null,arguments)};var real__PyUnicode_ClearFreeList=asm["PyUnicode_ClearFreeList"];asm["PyUnicode_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_ClearFreeList.apply(null,arguments)};var real__PyFloat_ClearFreeList=asm["PyFloat_ClearFreeList"];asm["PyFloat_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFloat_ClearFreeList.apply(null,arguments)};var real__PyList_ClearFreeList=asm["PyList_ClearFreeList"];asm["PyList_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyList_ClearFreeList.apply(null,arguments)};var real__PySet_ClearFreeList=asm["PySet_ClearFreeList"];asm["PySet_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySet_ClearFreeList.apply(null,arguments)};var real__PyAsyncGen_ClearFreeLists=asm["PyAsyncGen_ClearFreeLists"];asm["PyAsyncGen_ClearFreeLists"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyAsyncGen_ClearFreeLists.apply(null,arguments)};var real__PyContext_ClearFreeList=asm["PyContext_ClearFreeList"];asm["PyContext_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyContext_ClearFreeList.apply(null,arguments)};var real__Py_FatalError=asm["Py_FatalError"];asm["Py_FatalError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_FatalError.apply(null,arguments)};var real__PyErr_WarnExplicitFormat=asm["PyErr_WarnExplicitFormat"];asm["PyErr_WarnExplicitFormat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_WarnExplicitFormat.apply(null,arguments)};var real__PyObject_Repr=asm["PyObject_Repr"];asm["PyObject_Repr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Repr.apply(null,arguments)};var real__PyUnicode_EncodeFSDefault=asm["PyUnicode_EncodeFSDefault"];asm["PyUnicode_EncodeFSDefault"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_EncodeFSDefault.apply(null,arguments)};var real___PyObject_Dump=asm["_PyObject_Dump"];asm["_PyObject_Dump"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_Dump.apply(null,arguments)};var real___PyObject_AssertFailed=asm["_PyObject_AssertFailed"];asm["_PyObject_AssertFailed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_AssertFailed.apply(null,arguments)};var real__PyObject_Calloc=asm["PyObject_Calloc"];asm["PyObject_Calloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Calloc.apply(null,arguments)};var real__PyObject_Malloc=asm["PyObject_Malloc"];asm["PyObject_Malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Malloc.apply(null,arguments)};var real__PyObject_Realloc=asm["PyObject_Realloc"];asm["PyObject_Realloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Realloc.apply(null,arguments)};var real__PyObject_Free=asm["PyObject_Free"];asm["PyObject_Free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Free.apply(null,arguments)};var real___PyArg_UnpackKeywords=asm["_PyArg_UnpackKeywords"];asm["_PyArg_UnpackKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_UnpackKeywords.apply(null,arguments)};var real__PyLong_FromSsize_t=asm["PyLong_FromSsize_t"];asm["PyLong_FromSsize_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_FromSsize_t.apply(null,arguments)};var real___Py_convert_optional_to_ssize_t=asm["_Py_convert_optional_to_ssize_t"];asm["_Py_convert_optional_to_ssize_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_convert_optional_to_ssize_t.apply(null,arguments)};var real___PyDict_SetItem_KnownHash=asm["_PyDict_SetItem_KnownHash"];asm["_PyDict_SetItem_KnownHash"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_SetItem_KnownHash.apply(null,arguments)};var real__PyDict_DelItem=asm["PyDict_DelItem"];asm["PyDict_DelItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_DelItem.apply(null,arguments)};var real___PyDict_DelItem_KnownHash=asm["_PyDict_DelItem_KnownHash"];asm["_PyDict_DelItem_KnownHash"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_DelItem_KnownHash.apply(null,arguments)};var real___PyErr_SetKeyError=asm["_PyErr_SetKeyError"];asm["_PyErr_SetKeyError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_SetKeyError.apply(null,arguments)};var real___PyDict_DelItemIf=asm["_PyDict_DelItemIf"];asm["_PyDict_DelItemIf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_DelItemIf.apply(null,arguments)};var real__PyDict_Clear=asm["PyDict_Clear"];asm["PyDict_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_Clear.apply(null,arguments)};var real___PyDict_Next=asm["_PyDict_Next"];asm["_PyDict_Next"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_Next.apply(null,arguments)};var real___PyDict_Pop_KnownHash=asm["_PyDict_Pop_KnownHash"];asm["_PyDict_Pop_KnownHash"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_Pop_KnownHash.apply(null,arguments)};var real___PyUnicode_Ready=asm["_PyUnicode_Ready"];asm["_PyUnicode_Ready"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_Ready.apply(null,arguments)};var real___PyDict_Pop=asm["_PyDict_Pop"];asm["_PyDict_Pop"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_Pop.apply(null,arguments)};var real___PyDict_FromKeys=asm["_PyDict_FromKeys"];asm["_PyDict_FromKeys"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_FromKeys.apply(null,arguments)};var real___PySet_NextEntry=asm["_PySet_NextEntry"];asm["_PySet_NextEntry"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySet_NextEntry.apply(null,arguments)};var real__PyErr_ExceptionMatches=asm["PyErr_ExceptionMatches"];asm["PyErr_ExceptionMatches"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_ExceptionMatches.apply(null,arguments)};var real___PyObject_LookupSpecial=asm["_PyObject_LookupSpecial"];asm["_PyObject_LookupSpecial"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_LookupSpecial.apply(null,arguments)};var real__PyLong_AsSsize_t=asm["PyLong_AsSsize_t"];asm["PyLong_AsSsize_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_AsSsize_t.apply(null,arguments)};var real__PyErr_GivenExceptionMatches=asm["PyErr_GivenExceptionMatches"];asm["PyErr_GivenExceptionMatches"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_GivenExceptionMatches.apply(null,arguments)};var real___PyLong_Sign=asm["_PyLong_Sign"];asm["_PyLong_Sign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_Sign.apply(null,arguments)};var real__PyObject_Str=asm["PyObject_Str"];asm["PyObject_Str"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Str.apply(null,arguments)};var real__PyUnicode_New=asm["PyUnicode_New"];asm["PyUnicode_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_New.apply(null,arguments)};var real__strcmp=asm["strcmp"];asm["strcmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strcmp.apply(null,arguments)};var real__PyErr_WarnFormat=asm["PyErr_WarnFormat"];asm["PyErr_WarnFormat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_WarnFormat.apply(null,arguments)};var real___PyLong_FromNbInt=asm["_PyLong_FromNbInt"];asm["_PyLong_FromNbInt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_FromNbInt.apply(null,arguments)};var real___PyLong_Copy=asm["_PyLong_Copy"];asm["_PyLong_Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_Copy.apply(null,arguments)};var real___PyLong_FromNbIndexOrNbInt=asm["_PyLong_FromNbIndexOrNbInt"];asm["_PyLong_FromNbIndexOrNbInt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_FromNbIndexOrNbInt.apply(null,arguments)};var real__PyLong_FromUnicodeObject=asm["PyLong_FromUnicodeObject"];asm["PyLong_FromUnicodeObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_FromUnicodeObject.apply(null,arguments)};var real___PyLong_FromBytes=asm["_PyLong_FromBytes"];asm["_PyLong_FromBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_FromBytes.apply(null,arguments)};var real___PyObject_New=asm["_PyObject_New"];asm["_PyObject_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_New.apply(null,arguments)};var real__PyErr_Print=asm["PyErr_Print"];asm["PyErr_Print"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_Print.apply(null,arguments)};var real___PyType_Name=asm["_PyType_Name"];asm["_PyType_Name"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyType_Name.apply(null,arguments)};var real__PyUnicode_FromStringAndSize=asm["PyUnicode_FromStringAndSize"];asm["PyUnicode_FromStringAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_FromStringAndSize.apply(null,arguments)};var real__PyErr_WarnEx=asm["PyErr_WarnEx"];asm["PyErr_WarnEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_WarnEx.apply(null,arguments)};var real___PyArg_ParseTupleAndKeywords_SizeT=asm["_PyArg_ParseTupleAndKeywords_SizeT"];asm["_PyArg_ParseTupleAndKeywords_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_ParseTupleAndKeywords_SizeT.apply(null,arguments)};var real__PyUnicode_AsEncodedString=asm["PyUnicode_AsEncodedString"];asm["PyUnicode_AsEncodedString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsEncodedString.apply(null,arguments)};var real__PyBuffer_ToContiguous=asm["PyBuffer_ToContiguous"];asm["PyBuffer_ToContiguous"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyBuffer_ToContiguous.apply(null,arguments)};var real__PyLong_AsLong=asm["PyLong_AsLong"];asm["PyLong_AsLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_AsLong.apply(null,arguments)};var real__siprintf=asm["siprintf"];asm["siprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__siprintf.apply(null,arguments)};var real__memmove=asm["memmove"];asm["memmove"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__memmove.apply(null,arguments)};var real__memchr=asm["memchr"];asm["memchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__memchr.apply(null,arguments)};var real__PyTuple_GetItem=asm["PyTuple_GetItem"];asm["PyTuple_GetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTuple_GetItem.apply(null,arguments)};var real__PyObject_ASCII=asm["PyObject_ASCII"];asm["PyObject_ASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_ASCII.apply(null,arguments)};var real___PyLong_FormatBytesWriter=asm["_PyLong_FormatBytesWriter"];asm["_PyLong_FormatBytesWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_FormatBytesWriter.apply(null,arguments)};var real___PyUnicode_FormatLong=asm["_PyUnicode_FormatLong"];asm["_PyUnicode_FormatLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_FormatLong.apply(null,arguments)};var real__PyLong_AsLongAndOverflow=asm["PyLong_AsLongAndOverflow"];asm["PyLong_AsLongAndOverflow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_AsLongAndOverflow.apply(null,arguments)};var real__PyFloat_AsDouble=asm["PyFloat_AsDouble"];asm["PyFloat_AsDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFloat_AsDouble.apply(null,arguments)};var real__PyOS_double_to_string=asm["PyOS_double_to_string"];asm["PyOS_double_to_string"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_double_to_string.apply(null,arguments)};var real__PyUnicode_DecodeUTF8=asm["PyUnicode_DecodeUTF8"];asm["PyUnicode_DecodeUTF8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeUTF8.apply(null,arguments)};var real___Py_HashBytes=asm["_Py_HashBytes"];asm["_Py_HashBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_HashBytes.apply(null,arguments)};var real__PyErr_BadArgument=asm["PyErr_BadArgument"];asm["PyErr_BadArgument"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_BadArgument.apply(null,arguments)};var real__memrchr=asm["memrchr"];asm["memrchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__memrchr.apply(null,arguments)};var real__strncpy=asm["strncpy"];asm["strncpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strncpy.apply(null,arguments)};var real___PyArg_ParseTuple_SizeT=asm["_PyArg_ParseTuple_SizeT"];asm["_PyArg_ParseTuple_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_ParseTuple_SizeT.apply(null,arguments)};var real___PyEval_SliceIndex=asm["_PyEval_SliceIndex"];asm["_PyEval_SliceIndex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_SliceIndex.apply(null,arguments)};var real__PySlice_Unpack=asm["PySlice_Unpack"];asm["PySlice_Unpack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySlice_Unpack.apply(null,arguments)};var real__PySlice_AdjustIndices=asm["PySlice_AdjustIndices"];asm["PySlice_AdjustIndices"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySlice_AdjustIndices.apply(null,arguments)};var real___Py_BuildValue_SizeT=asm["_Py_BuildValue_SizeT"];asm["_Py_BuildValue_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_BuildValue_SizeT.apply(null,arguments)};var real___PyArg_BadArgument=asm["_PyArg_BadArgument"];asm["_PyArg_BadArgument"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_BadArgument.apply(null,arguments)};var real__PyUnicode_AsUTF8AndSize=asm["PyUnicode_AsUTF8AndSize"];asm["PyUnicode_AsUTF8AndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsUTF8AndSize.apply(null,arguments)};var real__PyUnicode_FromEncodedObject=asm["PyUnicode_FromEncodedObject"];asm["PyUnicode_FromEncodedObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_FromEncodedObject.apply(null,arguments)};var real___Py_strhex_with_sep=asm["_Py_strhex_with_sep"];asm["_Py_strhex_with_sep"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_strhex_with_sep.apply(null,arguments)};var real__PyList_Reverse=asm["PyList_Reverse"];asm["PyList_Reverse"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyList_Reverse.apply(null,arguments)};var real__PyObject_GenericGetAttr=asm["PyObject_GenericGetAttr"];asm["PyObject_GenericGetAttr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_GenericGetAttr.apply(null,arguments)};var real__PyObject_SelfIter=asm["PyObject_SelfIter"];asm["PyObject_SelfIter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_SelfIter.apply(null,arguments)};var real__PyUnicode_DecodeLatin1=asm["PyUnicode_DecodeLatin1"];asm["PyUnicode_DecodeLatin1"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeLatin1.apply(null,arguments)};var real__PyUnicode_GetDefaultEncoding=asm["PyUnicode_GetDefaultEncoding"];asm["PyUnicode_GetDefaultEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_GetDefaultEncoding.apply(null,arguments)};var real__PyType_GenericAlloc=asm["PyType_GenericAlloc"];asm["PyType_GenericAlloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyType_GenericAlloc.apply(null,arguments)};var real__PyType_GenericNew=asm["PyType_GenericNew"];asm["PyType_GenericNew"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyType_GenericNew.apply(null,arguments)};var real__PyFloat_FromDouble=asm["PyFloat_FromDouble"];asm["PyFloat_FromDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFloat_FromDouble.apply(null,arguments)};var real__PyLong_AsDouble=asm["PyLong_AsDouble"];asm["PyLong_AsDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_AsDouble.apply(null,arguments)};var real__PyFloat_FromString=asm["PyFloat_FromString"];asm["PyFloat_FromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFloat_FromString.apply(null,arguments)};var real___PyLong_Format=asm["_PyLong_Format"];asm["_PyLong_Format"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_Format.apply(null,arguments)};var real___PySlice_FromIndices=asm["_PySlice_FromIndices"];asm["_PySlice_FromIndices"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySlice_FromIndices.apply(null,arguments)};var real__PyList_AsTuple=asm["PyList_AsTuple"];asm["PyList_AsTuple"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyList_AsTuple.apply(null,arguments)};var real___PyTuple_Resize=asm["_PyTuple_Resize"];asm["_PyTuple_Resize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTuple_Resize.apply(null,arguments)};var real__PySeqIter_New=asm["PySeqIter_New"];asm["PySeqIter_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySeqIter_New.apply(null,arguments)};var real___PyObject_NextNotImplemented=asm["_PyObject_NextNotImplemented"];asm["_PyObject_NextNotImplemented"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_NextNotImplemented.apply(null,arguments)};var real___PyList_Extend=asm["_PyList_Extend"];asm["_PyList_Extend"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyList_Extend.apply(null,arguments)};var real__PyDict_Keys=asm["PyDict_Keys"];asm["PyDict_Keys"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_Keys.apply(null,arguments)};var real__PyDict_Items=asm["PyDict_Items"];asm["PyDict_Items"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_Items.apply(null,arguments)};var real__PyDict_Values=asm["PyDict_Values"];asm["PyDict_Values"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_Values.apply(null,arguments)};var real__PyDict_MergeFromSeq2=asm["PyDict_MergeFromSeq2"];asm["PyDict_MergeFromSeq2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_MergeFromSeq2.apply(null,arguments)};var real__PyDict_Update=asm["PyDict_Update"];asm["PyDict_Update"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_Update.apply(null,arguments)};var real__PyDict_Merge=asm["PyDict_Merge"];asm["PyDict_Merge"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_Merge.apply(null,arguments)};var real___PyDict_MergeEx=asm["_PyDict_MergeEx"];asm["_PyDict_MergeEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_MergeEx.apply(null,arguments)};var real__PyDict_Copy=asm["PyDict_Copy"];asm["PyDict_Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_Copy.apply(null,arguments)};var real__PyDict_Size=asm["PyDict_Size"];asm["PyDict_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_Size.apply(null,arguments)};var real__PyDict_SetDefault=asm["PyDict_SetDefault"];asm["PyDict_SetDefault"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_SetDefault.apply(null,arguments)};var real___PyDict_SizeOf=asm["_PyDict_SizeOf"];asm["_PyDict_SizeOf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_SizeOf.apply(null,arguments)};var real___PyDict_KeysSize=asm["_PyDict_KeysSize"];asm["_PyDict_KeysSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_KeysSize.apply(null,arguments)};var real__PyDict_Contains=asm["PyDict_Contains"];asm["PyDict_Contains"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_Contains.apply(null,arguments)};var real___PyDict_Contains=asm["_PyDict_Contains"];asm["_PyDict_Contains"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_Contains.apply(null,arguments)};var real___PyTrash_thread_deposit_object=asm["_PyTrash_thread_deposit_object"];asm["_PyTrash_thread_deposit_object"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTrash_thread_deposit_object.apply(null,arguments)};var real___PyTrash_thread_destroy_chain=asm["_PyTrash_thread_destroy_chain"];asm["_PyTrash_thread_destroy_chain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTrash_thread_destroy_chain.apply(null,arguments)};var real__Py_ReprEnter=asm["Py_ReprEnter"];asm["Py_ReprEnter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_ReprEnter.apply(null,arguments)};var real__Py_ReprLeave=asm["Py_ReprLeave"];asm["Py_ReprLeave"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_ReprLeave.apply(null,arguments)};var real___PyUnicodeWriter_Init=asm["_PyUnicodeWriter_Init"];asm["_PyUnicodeWriter_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicodeWriter_Init.apply(null,arguments)};var real___PyUnicodeWriter_WriteChar=asm["_PyUnicodeWriter_WriteChar"];asm["_PyUnicodeWriter_WriteChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicodeWriter_WriteChar.apply(null,arguments)};var real___PyUnicodeWriter_WriteASCIIString=asm["_PyUnicodeWriter_WriteASCIIString"];asm["_PyUnicodeWriter_WriteASCIIString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicodeWriter_WriteASCIIString.apply(null,arguments)};var real___PyUnicodeWriter_WriteStr=asm["_PyUnicodeWriter_WriteStr"];asm["_PyUnicodeWriter_WriteStr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicodeWriter_WriteStr.apply(null,arguments)};var real___PyUnicodeWriter_Finish=asm["_PyUnicodeWriter_Finish"];asm["_PyUnicodeWriter_Finish"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicodeWriter_Finish.apply(null,arguments)};var real___PyUnicodeWriter_Dealloc=asm["_PyUnicodeWriter_Dealloc"];asm["_PyUnicodeWriter_Dealloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicodeWriter_Dealloc.apply(null,arguments)};var real___PyDict_GetItemId=asm["_PyDict_GetItemId"];asm["_PyDict_GetItemId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_GetItemId.apply(null,arguments)};var real__PyDict_GetItemString=asm["PyDict_GetItemString"];asm["PyDict_GetItemString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_GetItemString.apply(null,arguments)};var real___PyDict_SetItemId=asm["_PyDict_SetItemId"];asm["_PyDict_SetItemId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_SetItemId.apply(null,arguments)};var real___PyDict_DelItemId=asm["_PyDict_DelItemId"];asm["_PyDict_DelItemId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_DelItemId.apply(null,arguments)};var real__PyDict_DelItemString=asm["PyDict_DelItemString"];asm["PyDict_DelItemString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyDict_DelItemString.apply(null,arguments)};var real___PyDictView_New=asm["_PyDictView_New"];asm["_PyDictView_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDictView_New.apply(null,arguments)};var real___PyDictView_Intersect=asm["_PyDictView_Intersect"];asm["_PyDictView_Intersect"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDictView_Intersect.apply(null,arguments)};var real__PySet_New=asm["PySet_New"];asm["PySet_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySet_New.apply(null,arguments)};var real__PyTuple_Pack=asm["PyTuple_Pack"];asm["PyTuple_Pack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTuple_Pack.apply(null,arguments)};var real___PyDict_NewKeysForClass=asm["_PyDict_NewKeysForClass"];asm["_PyDict_NewKeysForClass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDict_NewKeysForClass.apply(null,arguments)};var real__PyObject_GenericGetDict=asm["PyObject_GenericGetDict"];asm["PyObject_GenericGetDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_GenericGetDict.apply(null,arguments)};var real___PyObject_GetDictPtr=asm["_PyObject_GetDictPtr"];asm["_PyObject_GetDictPtr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_GetDictPtr.apply(null,arguments)};var real___PyObjectDict_SetItem=asm["_PyObjectDict_SetItem"];asm["_PyObjectDict_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObjectDict_SetItem.apply(null,arguments)};var real___PyDictKeys_DecRef=asm["_PyDictKeys_DecRef"];asm["_PyDictKeys_DecRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyDictKeys_DecRef.apply(null,arguments)};var real__PyArg_ValidateKeywordArguments=asm["PyArg_ValidateKeywordArguments"];asm["PyArg_ValidateKeywordArguments"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyArg_ValidateKeywordArguments.apply(null,arguments)};var real__PyObject_HashNotImplemented=asm["PyObject_HashNotImplemented"];asm["PyObject_HashNotImplemented"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_HashNotImplemented.apply(null,arguments)};var real__PyException_GetTraceback=asm["PyException_GetTraceback"];asm["PyException_GetTraceback"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyException_GetTraceback.apply(null,arguments)};var real__PyException_SetTraceback=asm["PyException_SetTraceback"];asm["PyException_SetTraceback"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyException_SetTraceback.apply(null,arguments)};var real__PyException_GetCause=asm["PyException_GetCause"];asm["PyException_GetCause"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyException_GetCause.apply(null,arguments)};var real__PyException_SetCause=asm["PyException_SetCause"];asm["PyException_SetCause"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyException_SetCause.apply(null,arguments)};var real__PyException_GetContext=asm["PyException_GetContext"];asm["PyException_GetContext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyException_GetContext.apply(null,arguments)};var real__PyException_SetContext=asm["PyException_SetContext"];asm["PyException_SetContext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyException_SetContext.apply(null,arguments)};var real__PyExceptionClass_Name=asm["PyExceptionClass_Name"];asm["PyExceptionClass_Name"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyExceptionClass_Name.apply(null,arguments)};var real__PyUnicodeEncodeError_GetEncoding=asm["PyUnicodeEncodeError_GetEncoding"];asm["PyUnicodeEncodeError_GetEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeEncodeError_GetEncoding.apply(null,arguments)};var real__PyUnicodeDecodeError_GetEncoding=asm["PyUnicodeDecodeError_GetEncoding"];asm["PyUnicodeDecodeError_GetEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeDecodeError_GetEncoding.apply(null,arguments)};var real__PyUnicodeEncodeError_GetObject=asm["PyUnicodeEncodeError_GetObject"];asm["PyUnicodeEncodeError_GetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeEncodeError_GetObject.apply(null,arguments)};var real__PyUnicodeDecodeError_GetObject=asm["PyUnicodeDecodeError_GetObject"];asm["PyUnicodeDecodeError_GetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeDecodeError_GetObject.apply(null,arguments)};var real__PyUnicodeTranslateError_GetObject=asm["PyUnicodeTranslateError_GetObject"];asm["PyUnicodeTranslateError_GetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeTranslateError_GetObject.apply(null,arguments)};var real__PyUnicodeEncodeError_GetStart=asm["PyUnicodeEncodeError_GetStart"];asm["PyUnicodeEncodeError_GetStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeEncodeError_GetStart.apply(null,arguments)};var real__PyUnicodeDecodeError_GetStart=asm["PyUnicodeDecodeError_GetStart"];asm["PyUnicodeDecodeError_GetStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeDecodeError_GetStart.apply(null,arguments)};var real__PyUnicodeTranslateError_GetStart=asm["PyUnicodeTranslateError_GetStart"];asm["PyUnicodeTranslateError_GetStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeTranslateError_GetStart.apply(null,arguments)};var real__PyUnicodeEncodeError_SetStart=asm["PyUnicodeEncodeError_SetStart"];asm["PyUnicodeEncodeError_SetStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeEncodeError_SetStart.apply(null,arguments)};var real__PyUnicodeDecodeError_SetStart=asm["PyUnicodeDecodeError_SetStart"];asm["PyUnicodeDecodeError_SetStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeDecodeError_SetStart.apply(null,arguments)};var real__PyUnicodeTranslateError_SetStart=asm["PyUnicodeTranslateError_SetStart"];asm["PyUnicodeTranslateError_SetStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeTranslateError_SetStart.apply(null,arguments)};var real__PyUnicodeEncodeError_GetEnd=asm["PyUnicodeEncodeError_GetEnd"];asm["PyUnicodeEncodeError_GetEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeEncodeError_GetEnd.apply(null,arguments)};var real__PyUnicodeDecodeError_GetEnd=asm["PyUnicodeDecodeError_GetEnd"];asm["PyUnicodeDecodeError_GetEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeDecodeError_GetEnd.apply(null,arguments)};var real__PyUnicodeTranslateError_GetEnd=asm["PyUnicodeTranslateError_GetEnd"];asm["PyUnicodeTranslateError_GetEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeTranslateError_GetEnd.apply(null,arguments)};var real__PyUnicodeEncodeError_SetEnd=asm["PyUnicodeEncodeError_SetEnd"];asm["PyUnicodeEncodeError_SetEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeEncodeError_SetEnd.apply(null,arguments)};var real__PyUnicodeDecodeError_SetEnd=asm["PyUnicodeDecodeError_SetEnd"];asm["PyUnicodeDecodeError_SetEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeDecodeError_SetEnd.apply(null,arguments)};var real__PyUnicodeTranslateError_SetEnd=asm["PyUnicodeTranslateError_SetEnd"];asm["PyUnicodeTranslateError_SetEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeTranslateError_SetEnd.apply(null,arguments)};var real__PyUnicodeEncodeError_GetReason=asm["PyUnicodeEncodeError_GetReason"];asm["PyUnicodeEncodeError_GetReason"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeEncodeError_GetReason.apply(null,arguments)};var real__PyUnicodeDecodeError_GetReason=asm["PyUnicodeDecodeError_GetReason"];asm["PyUnicodeDecodeError_GetReason"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeDecodeError_GetReason.apply(null,arguments)};var real__PyUnicodeTranslateError_GetReason=asm["PyUnicodeTranslateError_GetReason"];asm["PyUnicodeTranslateError_GetReason"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeTranslateError_GetReason.apply(null,arguments)};var real__PyUnicodeEncodeError_SetReason=asm["PyUnicodeEncodeError_SetReason"];asm["PyUnicodeEncodeError_SetReason"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeEncodeError_SetReason.apply(null,arguments)};var real__PyUnicodeDecodeError_SetReason=asm["PyUnicodeDecodeError_SetReason"];asm["PyUnicodeDecodeError_SetReason"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeDecodeError_SetReason.apply(null,arguments)};var real__PyUnicodeTranslateError_SetReason=asm["PyUnicodeTranslateError_SetReason"];asm["PyUnicodeTranslateError_SetReason"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeTranslateError_SetReason.apply(null,arguments)};var real__PyUnicodeEncodeError_Create=asm["PyUnicodeEncodeError_Create"];asm["PyUnicodeEncodeError_Create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeEncodeError_Create.apply(null,arguments)};var real__PyUnicodeDecodeError_Create=asm["PyUnicodeDecodeError_Create"];asm["PyUnicodeDecodeError_Create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeDecodeError_Create.apply(null,arguments)};var real__PyUnicodeTranslateError_Create=asm["PyUnicodeTranslateError_Create"];asm["PyUnicodeTranslateError_Create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicodeTranslateError_Create.apply(null,arguments)};var real___PyUnicodeTranslateError_Create=asm["_PyUnicodeTranslateError_Create"];asm["_PyUnicodeTranslateError_Create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicodeTranslateError_Create.apply(null,arguments)};var real___PyExc_Init=asm["_PyExc_Init"];asm["_PyExc_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyExc_Init.apply(null,arguments)};var real___PyBuiltins_AddExceptions=asm["_PyBuiltins_AddExceptions"];asm["_PyBuiltins_AddExceptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBuiltins_AddExceptions.apply(null,arguments)};var real___PyExc_Fini=asm["_PyExc_Fini"];asm["_PyExc_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyExc_Fini.apply(null,arguments)};var real___PyErr_TrySetFromCause=asm["_PyErr_TrySetFromCause"];asm["_PyErr_TrySetFromCause"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_TrySetFromCause.apply(null,arguments)};var real__PyErr_NormalizeException=asm["PyErr_NormalizeException"];asm["PyErr_NormalizeException"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_NormalizeException.apply(null,arguments)};var real__PyUnicode_FromFormatV=asm["PyUnicode_FromFormatV"];asm["PyUnicode_FromFormatV"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_FromFormatV.apply(null,arguments)};var real__PyObject_SetAttr=asm["PyObject_SetAttr"];asm["PyObject_SetAttr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_SetAttr.apply(null,arguments)};var real__PyTuple_GetSlice=asm["PyTuple_GetSlice"];asm["PyTuple_GetSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTuple_GetSlice.apply(null,arguments)};var real__PyUnicode_Substring=asm["PyUnicode_Substring"];asm["PyUnicode_Substring"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Substring.apply(null,arguments)};var real__PyUnicode_FindChar=asm["PyUnicode_FindChar"];asm["PyUnicode_FindChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_FindChar.apply(null,arguments)};var real___PyUnicode_IsWhitespace=asm["_PyUnicode_IsWhitespace"];asm["_PyUnicode_IsWhitespace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsWhitespace.apply(null,arguments)};var real__PyUnicode_Tailmatch=asm["PyUnicode_Tailmatch"];asm["PyUnicode_Tailmatch"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Tailmatch.apply(null,arguments)};var real___PyUnicode_XStrip=asm["_PyUnicode_XStrip"];asm["_PyUnicode_XStrip"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_XStrip.apply(null,arguments)};var real__PyUnicode_ReadChar=asm["PyUnicode_ReadChar"];asm["PyUnicode_ReadChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_ReadChar.apply(null,arguments)};var real__PyObject_GenericSetDict=asm["PyObject_GenericSetDict"];asm["PyObject_GenericSetDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_GenericSetDict.apply(null,arguments)};var real__PyFile_FromFd=asm["PyFile_FromFd"];asm["PyFile_FromFd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFile_FromFd.apply(null,arguments)};var real__PyFile_GetLine=asm["PyFile_GetLine"];asm["PyFile_GetLine"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFile_GetLine.apply(null,arguments)};var real__PyFile_WriteObject=asm["PyFile_WriteObject"];asm["PyFile_WriteObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFile_WriteObject.apply(null,arguments)};var real__PyFile_WriteString=asm["PyFile_WriteString"];asm["PyFile_WriteString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFile_WriteString.apply(null,arguments)};var real__PyObject_AsFileDescriptor=asm["PyObject_AsFileDescriptor"];asm["PyObject_AsFileDescriptor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_AsFileDescriptor.apply(null,arguments)};var real__Py_UniversalNewlineFgets=asm["Py_UniversalNewlineFgets"];asm["Py_UniversalNewlineFgets"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_UniversalNewlineFgets.apply(null,arguments)};var real__PyFile_NewStdPrinter=asm["PyFile_NewStdPrinter"];asm["PyFile_NewStdPrinter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFile_NewStdPrinter.apply(null,arguments)};var real__PyFile_SetOpenCodeHook=asm["PyFile_SetOpenCodeHook"];asm["PyFile_SetOpenCodeHook"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFile_SetOpenCodeHook.apply(null,arguments)};var real__PyFile_OpenCodeObject=asm["PyFile_OpenCodeObject"];asm["PyFile_OpenCodeObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFile_OpenCodeObject.apply(null,arguments)};var real__PyFile_OpenCode=asm["PyFile_OpenCode"];asm["PyFile_OpenCode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFile_OpenCode.apply(null,arguments)};var real__PyFloat_GetMax=asm["PyFloat_GetMax"];asm["PyFloat_GetMax"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFloat_GetMax.apply(null,arguments)};var real__PyFloat_GetMin=asm["PyFloat_GetMin"];asm["PyFloat_GetMin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFloat_GetMin.apply(null,arguments)};var real__PyFloat_GetInfo=asm["PyFloat_GetInfo"];asm["PyFloat_GetInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFloat_GetInfo.apply(null,arguments)};var real__PyStructSequence_New=asm["PyStructSequence_New"];asm["PyStructSequence_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStructSequence_New.apply(null,arguments)};var real___PyUnicode_TransformDecimalAndSpaceToASCII=asm["_PyUnicode_TransformDecimalAndSpaceToASCII"];asm["_PyUnicode_TransformDecimalAndSpaceToASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_TransformDecimalAndSpaceToASCII.apply(null,arguments)};var real___Py_string_to_number_with_underscores=asm["_Py_string_to_number_with_underscores"];asm["_Py_string_to_number_with_underscores"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_string_to_number_with_underscores.apply(null,arguments)};var real__PyOS_string_to_double=asm["PyOS_string_to_double"];asm["PyOS_string_to_double"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_string_to_double.apply(null,arguments)};var real___PyUnicode_FromASCII=asm["_PyUnicode_FromASCII"];asm["_PyUnicode_FromASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_FromASCII.apply(null,arguments)};var real___Py_HashDouble=asm["_Py_HashDouble"];asm["_Py_HashDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_HashDouble.apply(null,arguments)};var real___PyLong_NumBits=asm["_PyLong_NumBits"];asm["_PyLong_NumBits"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_NumBits.apply(null,arguments)};var real__frexp=asm["frexp"];asm["frexp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__frexp.apply(null,arguments)};var real__modf=asm["modf"];asm["modf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__modf.apply(null,arguments)};var real__PyLong_FromDouble=asm["PyLong_FromDouble"];asm["PyLong_FromDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_FromDouble.apply(null,arguments)};var real___PyLong_Lshift=asm["_PyLong_Lshift"];asm["_PyLong_Lshift"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_Lshift.apply(null,arguments)};var real___PyFloat_Init=asm["_PyFloat_Init"];asm["_PyFloat_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFloat_Init.apply(null,arguments)};var real__PyStructSequence_InitType2=asm["PyStructSequence_InitType2"];asm["PyStructSequence_InitType2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStructSequence_InitType2.apply(null,arguments)};var real__PyFloat_Fini=asm["PyFloat_Fini"];asm["PyFloat_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFloat_Fini.apply(null,arguments)};var real___PyFloat_DebugMallocStats=asm["_PyFloat_DebugMallocStats"];asm["_PyFloat_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFloat_DebugMallocStats.apply(null,arguments)};var real___PyFloat_Pack2=asm["_PyFloat_Pack2"];asm["_PyFloat_Pack2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFloat_Pack2.apply(null,arguments)};var real__ldexp=asm["ldexp"];asm["ldexp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ldexp.apply(null,arguments)};var real___PyFloat_Pack4=asm["_PyFloat_Pack4"];asm["_PyFloat_Pack4"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFloat_Pack4.apply(null,arguments)};var real___PyFloat_Pack8=asm["_PyFloat_Pack8"];asm["_PyFloat_Pack8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFloat_Pack8.apply(null,arguments)};var real___PyFloat_Unpack2=asm["_PyFloat_Unpack2"];asm["_PyFloat_Unpack2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFloat_Unpack2.apply(null,arguments)};var real___Py_dg_infinity=asm["_Py_dg_infinity"];asm["_Py_dg_infinity"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_dg_infinity.apply(null,arguments)};var real___Py_dg_stdnan=asm["_Py_dg_stdnan"];asm["_Py_dg_stdnan"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_dg_stdnan.apply(null,arguments)};var real___PyFloat_Unpack4=asm["_PyFloat_Unpack4"];asm["_PyFloat_Unpack4"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFloat_Unpack4.apply(null,arguments)};var real___PyFloat_Unpack8=asm["_PyFloat_Unpack8"];asm["_PyFloat_Unpack8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFloat_Unpack8.apply(null,arguments)};var real__fmod=asm["fmod"];asm["fmod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fmod.apply(null,arguments)};var real____errno_location=asm["__errno_location"];asm["__errno_location"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____errno_location.apply(null,arguments)};var real__hypot=asm["hypot"];asm["hypot"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__hypot.apply(null,arguments)};var real__pow=asm["pow"];asm["pow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pow.apply(null,arguments)};var real__atan2=asm["atan2"];asm["atan2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__atan2.apply(null,arguments)};var real__log=asm["log"];asm["log"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__log.apply(null,arguments)};var real__exp=asm["exp"];asm["exp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__exp.apply(null,arguments)};var real__sin=asm["sin"];asm["sin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__sin.apply(null,arguments)};var real__cos=asm["cos"];asm["cos"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__cos.apply(null,arguments)};var real__PyObject_RichCompare=asm["PyObject_RichCompare"];asm["PyObject_RichCompare"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_RichCompare.apply(null,arguments)};var real___PyComplex_FormatAdvancedWriter=asm["_PyComplex_FormatAdvancedWriter"];asm["_PyComplex_FormatAdvancedWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyComplex_FormatAdvancedWriter.apply(null,arguments)};var real___Py_dg_dtoa=asm["_Py_dg_dtoa"];asm["_Py_dg_dtoa"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_dg_dtoa.apply(null,arguments)};var real___Py_dg_strtod=asm["_Py_dg_strtod"];asm["_Py_dg_strtod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_dg_strtod.apply(null,arguments)};var real___Py_dg_freedtoa=asm["_Py_dg_freedtoa"];asm["_Py_dg_freedtoa"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_dg_freedtoa.apply(null,arguments)};var real___Py_parse_inf_or_nan=asm["_Py_parse_inf_or_nan"];asm["_Py_parse_inf_or_nan"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_parse_inf_or_nan.apply(null,arguments)};var real__strtol=asm["strtol"];asm["strtol"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strtol.apply(null,arguments)};var real___PyFloat_FormatAdvancedWriter=asm["_PyFloat_FormatAdvancedWriter"];asm["_PyFloat_FormatAdvancedWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFloat_FormatAdvancedWriter.apply(null,arguments)};var real__PyObject_Init=asm["PyObject_Init"];asm["PyObject_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Init.apply(null,arguments)};var real__PyFrozenSet_New=asm["PyFrozenSet_New"];asm["PyFrozenSet_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFrozenSet_New.apply(null,arguments)};var real__PyMem_Calloc=asm["PyMem_Calloc"];asm["PyMem_Calloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMem_Calloc.apply(null,arguments)};var real__PyUnicode_DecodeFSDefault=asm["PyUnicode_DecodeFSDefault"];asm["PyUnicode_DecodeFSDefault"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeFSDefault.apply(null,arguments)};var real__PyLong_FromVoidPtr=asm["PyLong_FromVoidPtr"];asm["PyLong_FromVoidPtr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_FromVoidPtr.apply(null,arguments)};var real__PySys_Audit=asm["PySys_Audit"];asm["PySys_Audit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_Audit.apply(null,arguments)};var real__PyMem_Realloc=asm["PyMem_Realloc"];asm["PyMem_Realloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMem_Realloc.apply(null,arguments)};var real___PyUnicode_Copy=asm["_PyUnicode_Copy"];asm["_PyUnicode_Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_Copy.apply(null,arguments)};var real__PyFrame_New=asm["PyFrame_New"];asm["PyFrame_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFrame_New.apply(null,arguments)};var real__PyFrame_BlockSetup=asm["PyFrame_BlockSetup"];asm["PyFrame_BlockSetup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFrame_BlockSetup.apply(null,arguments)};var real__PyFrame_BlockPop=asm["PyFrame_BlockPop"];asm["PyFrame_BlockPop"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFrame_BlockPop.apply(null,arguments)};var real__PyFrame_FastToLocalsWithError=asm["PyFrame_FastToLocalsWithError"];asm["PyFrame_FastToLocalsWithError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFrame_FastToLocalsWithError.apply(null,arguments)};var real__PyFrame_FastToLocals=asm["PyFrame_FastToLocals"];asm["PyFrame_FastToLocals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFrame_FastToLocals.apply(null,arguments)};var real__PyFrame_LocalsToFast=asm["PyFrame_LocalsToFast"];asm["PyFrame_LocalsToFast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFrame_LocalsToFast.apply(null,arguments)};var real__PyFrame_Fini=asm["PyFrame_Fini"];asm["PyFrame_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFrame_Fini.apply(null,arguments)};var real___PyFrame_DebugMallocStats=asm["_PyFrame_DebugMallocStats"];asm["_PyFrame_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyFrame_DebugMallocStats.apply(null,arguments)};var real___PyGen_Finalize=asm["_PyGen_Finalize"];asm["_PyGen_Finalize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGen_Finalize.apply(null,arguments)};var real__PyFunction_NewWithQualName=asm["PyFunction_NewWithQualName"];asm["PyFunction_NewWithQualName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFunction_NewWithQualName.apply(null,arguments)};var real__PyFunction_New=asm["PyFunction_New"];asm["PyFunction_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFunction_New.apply(null,arguments)};var real__PyFunction_GetCode=asm["PyFunction_GetCode"];asm["PyFunction_GetCode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFunction_GetCode.apply(null,arguments)};var real__PyFunction_GetGlobals=asm["PyFunction_GetGlobals"];asm["PyFunction_GetGlobals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFunction_GetGlobals.apply(null,arguments)};var real__PyFunction_GetModule=asm["PyFunction_GetModule"];asm["PyFunction_GetModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFunction_GetModule.apply(null,arguments)};var real__PyFunction_GetDefaults=asm["PyFunction_GetDefaults"];asm["PyFunction_GetDefaults"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFunction_GetDefaults.apply(null,arguments)};var real__PyFunction_SetDefaults=asm["PyFunction_SetDefaults"];asm["PyFunction_SetDefaults"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFunction_SetDefaults.apply(null,arguments)};var real__PyFunction_GetKwDefaults=asm["PyFunction_GetKwDefaults"];asm["PyFunction_GetKwDefaults"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFunction_GetKwDefaults.apply(null,arguments)};var real__PyFunction_SetKwDefaults=asm["PyFunction_SetKwDefaults"];asm["PyFunction_SetKwDefaults"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFunction_SetKwDefaults.apply(null,arguments)};var real__PyFunction_GetClosure=asm["PyFunction_GetClosure"];asm["PyFunction_GetClosure"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFunction_GetClosure.apply(null,arguments)};var real__PyFunction_SetClosure=asm["PyFunction_SetClosure"];asm["PyFunction_SetClosure"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFunction_SetClosure.apply(null,arguments)};var real__PyFunction_GetAnnotations=asm["PyFunction_GetAnnotations"];asm["PyFunction_GetAnnotations"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFunction_GetAnnotations.apply(null,arguments)};var real__PyFunction_SetAnnotations=asm["PyFunction_SetAnnotations"];asm["PyFunction_SetAnnotations"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFunction_SetAnnotations.apply(null,arguments)};var real__PyClassMethod_New=asm["PyClassMethod_New"];asm["PyClassMethod_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyClassMethod_New.apply(null,arguments)};var real__PyStaticMethod_New=asm["PyStaticMethod_New"];asm["PyStaticMethod_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStaticMethod_New.apply(null,arguments)};var real___PyErr_WarnUnawaitedCoroutine=asm["_PyErr_WarnUnawaitedCoroutine"];asm["_PyErr_WarnUnawaitedCoroutine"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_WarnUnawaitedCoroutine.apply(null,arguments)};var real__PyErr_SetNone=asm["PyErr_SetNone"];asm["PyErr_SetNone"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SetNone.apply(null,arguments)};var real___PyGen_Send=asm["_PyGen_Send"];asm["_PyGen_Send"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGen_Send.apply(null,arguments)};var real__PyErr_SetObject=asm["PyErr_SetObject"];asm["PyErr_SetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SetObject.apply(null,arguments)};var real___PyGen_yf=asm["_PyGen_yf"];asm["_PyGen_yf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGen_yf.apply(null,arguments)};var real___PyGen_SetStopIterationValue=asm["_PyGen_SetStopIterationValue"];asm["_PyGen_SetStopIterationValue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGen_SetStopIterationValue.apply(null,arguments)};var real___PyGen_FetchStopIterationValue=asm["_PyGen_FetchStopIterationValue"];asm["_PyGen_FetchStopIterationValue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGen_FetchStopIterationValue.apply(null,arguments)};var real__PyObject_CallFinalizerFromDealloc=asm["PyObject_CallFinalizerFromDealloc"];asm["PyObject_CallFinalizerFromDealloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_CallFinalizerFromDealloc.apply(null,arguments)};var real__PyGen_NewWithQualName=asm["PyGen_NewWithQualName"];asm["PyGen_NewWithQualName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyGen_NewWithQualName.apply(null,arguments)};var real__PyGen_New=asm["PyGen_New"];asm["PyGen_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyGen_New.apply(null,arguments)};var real__PyGen_NeedsFinalizing=asm["PyGen_NeedsFinalizing"];asm["PyGen_NeedsFinalizing"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyGen_NeedsFinalizing.apply(null,arguments)};var real___PyCoro_GetAwaitableIter=asm["_PyCoro_GetAwaitableIter"];asm["_PyCoro_GetAwaitableIter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCoro_GetAwaitableIter.apply(null,arguments)};var real__PyCoro_New=asm["PyCoro_New"];asm["PyCoro_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCoro_New.apply(null,arguments)};var real__PyEval_GetFrame=asm["PyEval_GetFrame"];asm["PyEval_GetFrame"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_GetFrame.apply(null,arguments)};var real__PyAsyncGen_New=asm["PyAsyncGen_New"];asm["PyAsyncGen_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyAsyncGen_New.apply(null,arguments)};var real__PyAsyncGen_Fini=asm["PyAsyncGen_Fini"];asm["PyAsyncGen_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyAsyncGen_Fini.apply(null,arguments)};var real___PyAsyncGenValueWrapperNew=asm["_PyAsyncGenValueWrapperNew"];asm["_PyAsyncGenValueWrapperNew"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyAsyncGenValueWrapperNew.apply(null,arguments)};var real___Py_CoerceID=asm["_Py_CoerceID"];asm["_Py_CoerceID"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_CoerceID.apply(null,arguments)};var real___PyInterpreterID_New=asm["_PyInterpreterID_New"];asm["_PyInterpreterID_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyInterpreterID_New.apply(null,arguments)};var real___PyInterpreterState_GetIDObject=asm["_PyInterpreterState_GetIDObject"];asm["_PyInterpreterState_GetIDObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyInterpreterState_GetIDObject.apply(null,arguments)};var real___PyInterpreterID_LookUp=asm["_PyInterpreterID_LookUp"];asm["_PyInterpreterID_LookUp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyInterpreterID_LookUp.apply(null,arguments)};var real__PyCallIter_New=asm["PyCallIter_New"];asm["PyCallIter_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCallIter_New.apply(null,arguments)};var real__PyList_Fini=asm["PyList_Fini"];asm["PyList_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyList_Fini.apply(null,arguments)};var real___PyList_DebugMallocStats=asm["_PyList_DebugMallocStats"];asm["_PyList_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyList_DebugMallocStats.apply(null,arguments)};var real__PyList_Size=asm["PyList_Size"];asm["PyList_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyList_Size.apply(null,arguments)};var real__PyList_GetItem=asm["PyList_GetItem"];asm["PyList_GetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyList_GetItem.apply(null,arguments)};var real__PyList_SetItem=asm["PyList_SetItem"];asm["PyList_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyList_SetItem.apply(null,arguments)};var real__PyList_Insert=asm["PyList_Insert"];asm["PyList_Insert"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyList_Insert.apply(null,arguments)};var real__PyList_GetSlice=asm["PyList_GetSlice"];asm["PyList_GetSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyList_GetSlice.apply(null,arguments)};var real__PyList_SetSlice=asm["PyList_SetSlice"];asm["PyList_SetSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyList_SetSlice.apply(null,arguments)};var real__PyList_Sort=asm["PyList_Sort"];asm["PyList_Sort"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyList_Sort.apply(null,arguments)};var real___PyEval_SliceIndexNotNone=asm["_PyEval_SliceIndexNotNone"];asm["_PyEval_SliceIndexNotNone"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_SliceIndexNotNone.apply(null,arguments)};var real___PyLong_New=asm["_PyLong_New"];asm["_PyLong_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_New.apply(null,arguments)};var real__PyLong_AsUnsignedLong=asm["PyLong_AsUnsignedLong"];asm["PyLong_AsUnsignedLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_AsUnsignedLong.apply(null,arguments)};var real__PyLong_AsSize_t=asm["PyLong_AsSize_t"];asm["PyLong_AsSize_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_AsSize_t.apply(null,arguments)};var real__PyLong_AsUnsignedLongMask=asm["PyLong_AsUnsignedLongMask"];asm["PyLong_AsUnsignedLongMask"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_AsUnsignedLongMask.apply(null,arguments)};var real___PyLong_FromByteArray=asm["_PyLong_FromByteArray"];asm["_PyLong_FromByteArray"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_FromByteArray.apply(null,arguments)};var real___PyLong_AsByteArray=asm["_PyLong_AsByteArray"];asm["_PyLong_AsByteArray"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_AsByteArray.apply(null,arguments)};var real__PyLong_AsVoidPtr=asm["PyLong_AsVoidPtr"];asm["PyLong_AsVoidPtr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_AsVoidPtr.apply(null,arguments)};var real__PyLong_FromLongLong=asm["PyLong_FromLongLong"];asm["PyLong_FromLongLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_FromLongLong.apply(null,arguments)};var real__PyLong_FromUnsignedLongLong=asm["PyLong_FromUnsignedLongLong"];asm["PyLong_FromUnsignedLongLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_FromUnsignedLongLong.apply(null,arguments)};var real__PyLong_AsLongLong=asm["PyLong_AsLongLong"];asm["PyLong_AsLongLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_AsLongLong.apply(null,arguments)};var real__PyLong_AsUnsignedLongLong=asm["PyLong_AsUnsignedLongLong"];asm["PyLong_AsUnsignedLongLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_AsUnsignedLongLong.apply(null,arguments)};var real__PyLong_AsUnsignedLongLongMask=asm["PyLong_AsUnsignedLongLongMask"];asm["PyLong_AsUnsignedLongLongMask"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_AsUnsignedLongLongMask.apply(null,arguments)};var real__PyLong_AsLongLongAndOverflow=asm["PyLong_AsLongLongAndOverflow"];asm["PyLong_AsLongLongAndOverflow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_AsLongLongAndOverflow.apply(null,arguments)};var real___PyLong_UnsignedShort_Converter=asm["_PyLong_UnsignedShort_Converter"];asm["_PyLong_UnsignedShort_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_UnsignedShort_Converter.apply(null,arguments)};var real___PyLong_UnsignedInt_Converter=asm["_PyLong_UnsignedInt_Converter"];asm["_PyLong_UnsignedInt_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_UnsignedInt_Converter.apply(null,arguments)};var real___PyLong_UnsignedLong_Converter=asm["_PyLong_UnsignedLong_Converter"];asm["_PyLong_UnsignedLong_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_UnsignedLong_Converter.apply(null,arguments)};var real___PyLong_UnsignedLongLong_Converter=asm["_PyLong_UnsignedLongLong_Converter"];asm["_PyLong_UnsignedLongLong_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_UnsignedLongLong_Converter.apply(null,arguments)};var real___PyLong_Size_t_Converter=asm["_PyLong_Size_t_Converter"];asm["_PyLong_Size_t_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_Size_t_Converter.apply(null,arguments)};var real___PyUnicodeWriter_PrepareInternal=asm["_PyUnicodeWriter_PrepareInternal"];asm["_PyUnicodeWriter_PrepareInternal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicodeWriter_PrepareInternal.apply(null,arguments)};var real__PyOS_getsig=asm["PyOS_getsig"];asm["PyOS_getsig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_getsig.apply(null,arguments)};var real__PyOS_setsig=asm["PyOS_setsig"];asm["PyOS_setsig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_setsig.apply(null,arguments)};var real__PyErr_NewException=asm["PyErr_NewException"];asm["PyErr_NewException"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_NewException.apply(null,arguments)};var real__PyThread_get_thread_ident=asm["PyThread_get_thread_ident"];asm["PyThread_get_thread_ident"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_get_thread_ident.apply(null,arguments)};var real___PyEval_SignalReceived=asm["_PyEval_SignalReceived"];asm["_PyEval_SignalReceived"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_SignalReceived.apply(null,arguments)};var real___PyEval_AddPendingCall=asm["_PyEval_AddPendingCall"];asm["_PyEval_AddPendingCall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_AddPendingCall.apply(null,arguments)};var real__PyImport_ImportModule=asm["PyImport_ImportModule"];asm["PyImport_ImportModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_ImportModule.apply(null,arguments)};var real___PyTime_FromSecondsObject=asm["_PyTime_FromSecondsObject"];asm["_PyTime_FromSecondsObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_FromSecondsObject.apply(null,arguments)};var real___PyTime_AsTimeval=asm["_PyTime_AsTimeval"];asm["_PyTime_AsTimeval"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_AsTimeval.apply(null,arguments)};var real__PyEval_SaveThread=asm["PyEval_SaveThread"];asm["PyEval_SaveThread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_SaveThread.apply(null,arguments)};var real__PyEval_RestoreThread=asm["PyEval_RestoreThread"];asm["PyEval_RestoreThread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_RestoreThread.apply(null,arguments)};var real__strsignal=asm["strsignal"];asm["strsignal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strsignal.apply(null,arguments)};var real__strstr=asm["strstr"];asm["strstr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strstr.apply(null,arguments)};var real__PyArg_ParseTupleAndKeywords=asm["PyArg_ParseTupleAndKeywords"];asm["PyArg_ParseTupleAndKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyArg_ParseTupleAndKeywords.apply(null,arguments)};var real___Py_fstat=asm["_Py_fstat"];asm["_Py_fstat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_fstat.apply(null,arguments)};var real___Py_get_blocking=asm["_Py_get_blocking"];asm["_Py_get_blocking"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_get_blocking.apply(null,arguments)};var real__PySet_Add=asm["PySet_Add"];asm["PySet_Add"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySet_Add.apply(null,arguments)};var real___PyLong_FormatWriter=asm["_PyLong_FormatWriter"];asm["_PyLong_FormatWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_FormatWriter.apply(null,arguments)};var real__PyLong_FromString=asm["PyLong_FromString"];asm["PyLong_FromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_FromString.apply(null,arguments)};var real__PyLong_FromUnicode=asm["PyLong_FromUnicode"];asm["PyLong_FromUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_FromUnicode.apply(null,arguments)};var real__PyUnicode_FromWideChar=asm["PyUnicode_FromWideChar"];asm["PyUnicode_FromWideChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_FromWideChar.apply(null,arguments)};var real___PyLong_Frexp=asm["_PyLong_Frexp"];asm["_PyLong_Frexp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_Frexp.apply(null,arguments)};var real___PyLong_Rshift=asm["_PyLong_Rshift"];asm["_PyLong_Rshift"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_Rshift.apply(null,arguments)};var real___PyLong_GCD=asm["_PyLong_GCD"];asm["_PyLong_GCD"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_GCD.apply(null,arguments)};var real___PyLong_DivmodNear=asm["_PyLong_DivmodNear"];asm["_PyLong_DivmodNear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_DivmodNear.apply(null,arguments)};var real__PyLong_GetInfo=asm["PyLong_GetInfo"];asm["PyLong_GetInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_GetInfo.apply(null,arguments)};var real___PyLong_Init=asm["_PyLong_Init"];asm["_PyLong_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_Init.apply(null,arguments)};var real__PyLong_Fini=asm["PyLong_Fini"];asm["PyLong_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyLong_Fini.apply(null,arguments)};var real___PyUnicode_EqualToASCIIId=asm["_PyUnicode_EqualToASCIIId"];asm["_PyUnicode_EqualToASCIIId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_EqualToASCIIId.apply(null,arguments)};var real__PyObject_Bytes=asm["PyObject_Bytes"];asm["PyObject_Bytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Bytes.apply(null,arguments)};var real___PyLong_FormatAdvancedWriter=asm["_PyLong_FormatAdvancedWriter"];asm["_PyLong_FormatAdvancedWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_FormatAdvancedWriter.apply(null,arguments)};var real__PyMemoryView_FromMemory=asm["PyMemoryView_FromMemory"];asm["PyMemoryView_FromMemory"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMemoryView_FromMemory.apply(null,arguments)};var real__PyMemoryView_FromBuffer=asm["PyMemoryView_FromBuffer"];asm["PyMemoryView_FromBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMemoryView_FromBuffer.apply(null,arguments)};var real__PyMemoryView_FromObject=asm["PyMemoryView_FromObject"];asm["PyMemoryView_FromObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMemoryView_FromObject.apply(null,arguments)};var real__PyMemoryView_GetContiguous=asm["PyMemoryView_GetContiguous"];asm["PyMemoryView_GetContiguous"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMemoryView_GetContiguous.apply(null,arguments)};var real__strcpy=asm["strcpy"];asm["strcpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strcpy.apply(null,arguments)};var real__PyUnicode_AsASCIIString=asm["PyUnicode_AsASCIIString"];asm["PyUnicode_AsASCIIString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsASCIIString.apply(null,arguments)};var real__PyCFunction_New=asm["PyCFunction_New"];asm["PyCFunction_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCFunction_New.apply(null,arguments)};var real__PyCFunction_NewEx=asm["PyCFunction_NewEx"];asm["PyCFunction_NewEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCFunction_NewEx.apply(null,arguments)};var real__PyCFunction_GetFunction=asm["PyCFunction_GetFunction"];asm["PyCFunction_GetFunction"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCFunction_GetFunction.apply(null,arguments)};var real__PyCFunction_GetSelf=asm["PyCFunction_GetSelf"];asm["PyCFunction_GetSelf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCFunction_GetSelf.apply(null,arguments)};var real__PyCFunction_GetFlags=asm["PyCFunction_GetFlags"];asm["PyCFunction_GetFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCFunction_GetFlags.apply(null,arguments)};var real__PyCFunction_Fini=asm["PyCFunction_Fini"];asm["PyCFunction_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCFunction_Fini.apply(null,arguments)};var real___PyCFunction_DebugMallocStats=asm["_PyCFunction_DebugMallocStats"];asm["_PyCFunction_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCFunction_DebugMallocStats.apply(null,arguments)};var real___PyType_GetDocFromInternalDoc=asm["_PyType_GetDocFromInternalDoc"];asm["_PyType_GetDocFromInternalDoc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyType_GetDocFromInternalDoc.apply(null,arguments)};var real___PyType_GetTextSignatureFromInternalDoc=asm["_PyType_GetTextSignatureFromInternalDoc"];asm["_PyType_GetTextSignatureFromInternalDoc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyType_GetTextSignatureFromInternalDoc.apply(null,arguments)};var real__PyModuleDef_Init=asm["PyModuleDef_Init"];asm["PyModuleDef_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModuleDef_Init.apply(null,arguments)};var real__PyModule_NewObject=asm["PyModule_NewObject"];asm["PyModule_NewObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_NewObject.apply(null,arguments)};var real__PyModule_New=asm["PyModule_New"];asm["PyModule_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_New.apply(null,arguments)};var real___PyInterpreterState_Get=asm["_PyInterpreterState_Get"];asm["_PyInterpreterState_Get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyInterpreterState_Get.apply(null,arguments)};var real___PyImport_IsInitialized=asm["_PyImport_IsInitialized"];asm["_PyImport_IsInitialized"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_IsInitialized.apply(null,arguments)};var real___PyModule_CreateInitialized=asm["_PyModule_CreateInitialized"];asm["_PyModule_CreateInitialized"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyModule_CreateInitialized.apply(null,arguments)};var real__strrchr=asm["strrchr"];asm["strrchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strrchr.apply(null,arguments)};var real__PyModule_AddFunctions=asm["PyModule_AddFunctions"];asm["PyModule_AddFunctions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_AddFunctions.apply(null,arguments)};var real___PyObject_SetAttrId=asm["_PyObject_SetAttrId"];asm["_PyObject_SetAttrId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_SetAttrId.apply(null,arguments)};var real__PyObject_SetAttrString=asm["PyObject_SetAttrString"];asm["PyObject_SetAttrString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_SetAttrString.apply(null,arguments)};var real__PyModule_SetDocString=asm["PyModule_SetDocString"];asm["PyModule_SetDocString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_SetDocString.apply(null,arguments)};var real__PyModule_FromDefAndSpec2=asm["PyModule_FromDefAndSpec2"];asm["PyModule_FromDefAndSpec2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_FromDefAndSpec2.apply(null,arguments)};var real__PyUnicode_AsUTF8=asm["PyUnicode_AsUTF8"];asm["PyUnicode_AsUTF8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsUTF8.apply(null,arguments)};var real__PyModule_ExecDef=asm["PyModule_ExecDef"];asm["PyModule_ExecDef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_ExecDef.apply(null,arguments)};var real__PyModule_GetName=asm["PyModule_GetName"];asm["PyModule_GetName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_GetName.apply(null,arguments)};var real__PyModule_GetNameObject=asm["PyModule_GetNameObject"];asm["PyModule_GetNameObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_GetNameObject.apply(null,arguments)};var real__PyModule_GetFilenameObject=asm["PyModule_GetFilenameObject"];asm["PyModule_GetFilenameObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_GetFilenameObject.apply(null,arguments)};var real__PyModule_GetFilename=asm["PyModule_GetFilename"];asm["PyModule_GetFilename"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_GetFilename.apply(null,arguments)};var real__PyModule_GetDef=asm["PyModule_GetDef"];asm["PyModule_GetDef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_GetDef.apply(null,arguments)};var real__PyModule_GetState=asm["PyModule_GetState"];asm["PyModule_GetState"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_GetState.apply(null,arguments)};var real___PyModule_Clear=asm["_PyModule_Clear"];asm["_PyModule_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyModule_Clear.apply(null,arguments)};var real___PyModule_ClearDict=asm["_PyModule_ClearDict"];asm["_PyModule_ClearDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyModule_ClearDict.apply(null,arguments)};var real___PyUnicode_EqualToASCIIString=asm["_PyUnicode_EqualToASCIIString"];asm["_PyUnicode_EqualToASCIIString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_EqualToASCIIString.apply(null,arguments)};var real___PyModuleSpec_IsInitializing=asm["_PyModuleSpec_IsInitializing"];asm["_PyModuleSpec_IsInitializing"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyModuleSpec_IsInitializing.apply(null,arguments)};var real___PyNamespace_New=asm["_PyNamespace_New"];asm["_PyNamespace_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyNamespace_New.apply(null,arguments)};var real___PyObject_CheckConsistency=asm["_PyObject_CheckConsistency"];asm["_PyObject_CheckConsistency"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_CheckConsistency.apply(null,arguments)};var real__Py_IncRef=asm["Py_IncRef"];asm["Py_IncRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_IncRef.apply(null,arguments)};var real__Py_DecRef=asm["Py_DecRef"];asm["Py_DecRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_DecRef.apply(null,arguments)};var real___PyType_CheckConsistency=asm["_PyType_CheckConsistency"];asm["_PyType_CheckConsistency"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyType_CheckConsistency.apply(null,arguments)};var real___PyUnicode_CheckConsistency=asm["_PyUnicode_CheckConsistency"];asm["_PyUnicode_CheckConsistency"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_CheckConsistency.apply(null,arguments)};var real__PyObject_InitVar=asm["PyObject_InitVar"];asm["PyObject_InitVar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_InitVar.apply(null,arguments)};var real___PyObject_NewVar=asm["_PyObject_NewVar"];asm["_PyObject_NewVar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_NewVar.apply(null,arguments)};var real__PyObject_CallFinalizer=asm["PyObject_CallFinalizer"];asm["PyObject_CallFinalizer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_CallFinalizer.apply(null,arguments)};var real__PyObject_Print=asm["PyObject_Print"];asm["PyObject_Print"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Print.apply(null,arguments)};var real__clearerr=asm["clearerr"];asm["clearerr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__clearerr.apply(null,arguments)};var real__ferror=asm["ferror"];asm["ferror"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ferror.apply(null,arguments)};var real___Py_BreakPoint=asm["_Py_BreakPoint"];asm["_Py_BreakPoint"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_BreakPoint.apply(null,arguments)};var real___PyObject_IsFreed=asm["_PyObject_IsFreed"];asm["_PyObject_IsFreed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_IsFreed.apply(null,arguments)};var real__fflush=asm["fflush"];asm["fflush"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fflush.apply(null,arguments)};var real___PyUnicode_AsASCIIString=asm["_PyUnicode_AsASCIIString"];asm["_PyUnicode_AsASCIIString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_AsASCIIString.apply(null,arguments)};var real__PyUnicode_DecodeASCII=asm["PyUnicode_DecodeASCII"];asm["PyUnicode_DecodeASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeASCII.apply(null,arguments)};var real__PyObject_HasAttrString=asm["PyObject_HasAttrString"];asm["PyObject_HasAttrString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_HasAttrString.apply(null,arguments)};var real___PyObject_IsAbstract=asm["_PyObject_IsAbstract"];asm["_PyObject_IsAbstract"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_IsAbstract.apply(null,arguments)};var real___PyObject_LookupAttr=asm["_PyObject_LookupAttr"];asm["_PyObject_LookupAttr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_LookupAttr.apply(null,arguments)};var real___PyObject_HasAttrId=asm["_PyObject_HasAttrId"];asm["_PyObject_HasAttrId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_HasAttrId.apply(null,arguments)};var real__PyObject_HasAttr=asm["PyObject_HasAttr"];asm["PyObject_HasAttr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_HasAttr.apply(null,arguments)};var real___PyObject_GenericGetAttrWithDict=asm["_PyObject_GenericGetAttrWithDict"];asm["_PyObject_GenericGetAttrWithDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_GenericGetAttrWithDict.apply(null,arguments)};var real___PyObject_GenericSetAttrWithDict=asm["_PyObject_GenericSetAttrWithDict"];asm["_PyObject_GenericSetAttrWithDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_GenericSetAttrWithDict.apply(null,arguments)};var real__PyObject_Not=asm["PyObject_Not"];asm["PyObject_Not"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Not.apply(null,arguments)};var real__PyObject_Dir=asm["PyObject_Dir"];asm["PyObject_Dir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_Dir.apply(null,arguments)};var real__PyEval_GetLocals=asm["PyEval_GetLocals"];asm["PyEval_GetLocals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_GetLocals.apply(null,arguments)};var real___PyTypes_Init=asm["_PyTypes_Init"];asm["_PyTypes_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTypes_Init.apply(null,arguments)};var real__PyTuple_Size=asm["PyTuple_Size"];asm["PyTuple_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTuple_Size.apply(null,arguments)};var real__PyMember_GetOne=asm["PyMember_GetOne"];asm["PyMember_GetOne"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMember_GetOne.apply(null,arguments)};var real__PyMember_SetOne=asm["PyMember_SetOne"];asm["PyMember_SetOne"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMember_SetOne.apply(null,arguments)};var real__getc=asm["getc"];asm["getc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getc.apply(null,arguments)};var real__ungetc=asm["ungetc"];asm["ungetc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ungetc.apply(null,arguments)};var real__fileno=asm["fileno"];asm["fileno"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fileno.apply(null,arguments)};var real__Py_IsInitialized=asm["Py_IsInitialized"];asm["Py_IsInitialized"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_IsInitialized.apply(null,arguments)};var real__isatty=asm["isatty"];asm["isatty"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__isatty.apply(null,arguments)};var real___PyUnicode_AsUTF8String=asm["_PyUnicode_AsUTF8String"];asm["_PyUnicode_AsUTF8String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_AsUTF8String.apply(null,arguments)};var real___Py_write=asm["_Py_write"];asm["_Py_write"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_write.apply(null,arguments)};var real__PyUnicode_Join=asm["PyUnicode_Join"];asm["PyUnicode_Join"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Join.apply(null,arguments)};var real__strchr=asm["strchr"];asm["strchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strchr.apply(null,arguments)};var real__PyImport_ImportModuleNoBlock=asm["PyImport_ImportModuleNoBlock"];asm["PyImport_ImportModuleNoBlock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_ImportModuleNoBlock.apply(null,arguments)};var real___PyInterpreterState_LookUpID=asm["_PyInterpreterState_LookUpID"];asm["_PyInterpreterState_LookUpID"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyInterpreterState_LookUpID.apply(null,arguments)};var real___PyInterpreterState_IDDecref=asm["_PyInterpreterState_IDDecref"];asm["_PyInterpreterState_IDDecref"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyInterpreterState_IDDecref.apply(null,arguments)};var real___PyInterpreterState_IDIncref=asm["_PyInterpreterState_IDIncref"];asm["_PyInterpreterState_IDIncref"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyInterpreterState_IDIncref.apply(null,arguments)};var real___PyInterpreterState_IDInitref=asm["_PyInterpreterState_IDInitref"];asm["_PyInterpreterState_IDInitref"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyInterpreterState_IDInitref.apply(null,arguments)};var real__PyInterpreterState_GetID=asm["PyInterpreterState_GetID"];asm["PyInterpreterState_GetID"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInterpreterState_GetID.apply(null,arguments)};var real___PyObject_DebugTypeStats=asm["_PyObject_DebugTypeStats"];asm["_PyObject_DebugTypeStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_DebugTypeStats.apply(null,arguments)};var real___PyTuple_DebugMallocStats=asm["_PyTuple_DebugMallocStats"];asm["_PyTuple_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTuple_DebugMallocStats.apply(null,arguments)};var real__PyThreadState_GetDict=asm["PyThreadState_GetDict"];asm["PyThreadState_GetDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThreadState_GetDict.apply(null,arguments)};var real___PyTrash_deposit_object=asm["_PyTrash_deposit_object"];asm["_PyTrash_deposit_object"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTrash_deposit_object.apply(null,arguments)};var real___PyTrash_destroy_chain=asm["_PyTrash_destroy_chain"];asm["_PyTrash_destroy_chain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTrash_destroy_chain.apply(null,arguments)};var real__fputc=asm["fputc"];asm["fputc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fputc.apply(null,arguments)};var real___PyMem_SetDefaultAllocator=asm["_PyMem_SetDefaultAllocator"];asm["_PyMem_SetDefaultAllocator"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyMem_SetDefaultAllocator.apply(null,arguments)};var real___PyMem_GetAllocatorName=asm["_PyMem_GetAllocatorName"];asm["_PyMem_GetAllocatorName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyMem_GetAllocatorName.apply(null,arguments)};var real___PyMem_SetupAllocators=asm["_PyMem_SetupAllocators"];asm["_PyMem_SetupAllocators"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyMem_SetupAllocators.apply(null,arguments)};var real__calloc=asm["calloc"];asm["calloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__calloc.apply(null,arguments)};var real__realloc=asm["realloc"];asm["realloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__realloc.apply(null,arguments)};var real__PyMem_SetupDebugHooks=asm["PyMem_SetupDebugHooks"];asm["PyMem_SetupDebugHooks"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMem_SetupDebugHooks.apply(null,arguments)};var real___PyMem_GetCurrentAllocatorName=asm["_PyMem_GetCurrentAllocatorName"];asm["_PyMem_GetCurrentAllocatorName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyMem_GetCurrentAllocatorName.apply(null,arguments)};var real__PyGILState_Check=asm["PyGILState_Check"];asm["PyGILState_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyGILState_Check.apply(null,arguments)};var real__PyObject_GetArenaAllocator=asm["PyObject_GetArenaAllocator"];asm["PyObject_GetArenaAllocator"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_GetArenaAllocator.apply(null,arguments)};var real__PyObject_SetArenaAllocator=asm["PyObject_SetArenaAllocator"];asm["PyObject_SetArenaAllocator"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyObject_SetArenaAllocator.apply(null,arguments)};var real__PyMem_RawCalloc=asm["PyMem_RawCalloc"];asm["PyMem_RawCalloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMem_RawCalloc.apply(null,arguments)};var real__PyMem_RawRealloc=asm["PyMem_RawRealloc"];asm["PyMem_RawRealloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMem_RawRealloc.apply(null,arguments)};var real___PyMem_RawWcsdup=asm["_PyMem_RawWcsdup"];asm["_PyMem_RawWcsdup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyMem_RawWcsdup.apply(null,arguments)};var real__wcslen=asm["wcslen"];asm["wcslen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcslen.apply(null,arguments)};var real___PyMem_RawStrdup=asm["_PyMem_RawStrdup"];asm["_PyMem_RawStrdup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyMem_RawStrdup.apply(null,arguments)};var real___PyMem_Strdup=asm["_PyMem_Strdup"];asm["_PyMem_Strdup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyMem_Strdup.apply(null,arguments)};var real___Py_GetAllocatedBlocks=asm["_Py_GetAllocatedBlocks"];asm["_Py_GetAllocatedBlocks"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_GetAllocatedBlocks.apply(null,arguments)};var real__fputs=asm["fputs"];asm["fputs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fputs.apply(null,arguments)};var real__snprintf=asm["snprintf"];asm["snprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__snprintf.apply(null,arguments)};var real__PyODict_New=asm["PyODict_New"];asm["PyODict_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyODict_New.apply(null,arguments)};var real__PyODict_SetItem=asm["PyODict_SetItem"];asm["PyODict_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyODict_SetItem.apply(null,arguments)};var real___PyErr_ChainExceptions=asm["_PyErr_ChainExceptions"];asm["_PyErr_ChainExceptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_ChainExceptions.apply(null,arguments)};var real__PyODict_DelItem=asm["PyODict_DelItem"];asm["PyODict_DelItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyODict_DelItem.apply(null,arguments)};var real__PyPickleBuffer_FromObject=asm["PyPickleBuffer_FromObject"];asm["PyPickleBuffer_FromObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyPickleBuffer_FromObject.apply(null,arguments)};var real__PyPickleBuffer_GetBuffer=asm["PyPickleBuffer_GetBuffer"];asm["PyPickleBuffer_GetBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyPickleBuffer_GetBuffer.apply(null,arguments)};var real__PyPickleBuffer_Release=asm["PyPickleBuffer_Release"];asm["PyPickleBuffer_Release"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyPickleBuffer_Release.apply(null,arguments)};var real___PySlice_GetLongIndices=asm["_PySlice_GetLongIndices"];asm["_PySlice_GetLongIndices"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySlice_GetLongIndices.apply(null,arguments)};var real__PySet_Size=asm["PySet_Size"];asm["PySet_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySet_Size.apply(null,arguments)};var real__PySet_Clear=asm["PySet_Clear"];asm["PySet_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySet_Clear.apply(null,arguments)};var real__PySet_Contains=asm["PySet_Contains"];asm["PySet_Contains"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySet_Contains.apply(null,arguments)};var real__PySet_Discard=asm["PySet_Discard"];asm["PySet_Discard"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySet_Discard.apply(null,arguments)};var real__PySet_Fini=asm["PySet_Fini"];asm["PySet_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySet_Fini.apply(null,arguments)};var real__PySet_Pop=asm["PySet_Pop"];asm["PySet_Pop"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySet_Pop.apply(null,arguments)};var real___PySet_Update=asm["_PySet_Update"];asm["_PySet_Update"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySet_Update.apply(null,arguments)};var real___PyUnicode_EQ=asm["_PyUnicode_EQ"];asm["_PyUnicode_EQ"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_EQ.apply(null,arguments)};var real__PySlice_Fini=asm["PySlice_Fini"];asm["PySlice_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySlice_Fini.apply(null,arguments)};var real__PySlice_New=asm["PySlice_New"];asm["PySlice_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySlice_New.apply(null,arguments)};var real__PySlice_GetIndices=asm["PySlice_GetIndices"];asm["PySlice_GetIndices"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySlice_GetIndices.apply(null,arguments)};var real__PySlice_GetIndicesEx=asm["PySlice_GetIndicesEx"];asm["PySlice_GetIndicesEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySlice_GetIndicesEx.apply(null,arguments)};var real__PyStructSequence_SetItem=asm["PyStructSequence_SetItem"];asm["PyStructSequence_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStructSequence_SetItem.apply(null,arguments)};var real__PyStructSequence_GetItem=asm["PyStructSequence_GetItem"];asm["PyStructSequence_GetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStructSequence_GetItem.apply(null,arguments)};var real__PyStructSequence_InitType=asm["PyStructSequence_InitType"];asm["PyStructSequence_InitType"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStructSequence_InitType.apply(null,arguments)};var real__PyStructSequence_NewType=asm["PyStructSequence_NewType"];asm["PyStructSequence_NewType"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStructSequence_NewType.apply(null,arguments)};var real__PyType_FromSpecWithBases=asm["PyType_FromSpecWithBases"];asm["PyType_FromSpecWithBases"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyType_FromSpecWithBases.apply(null,arguments)};var real___PyStructSequence_Init=asm["_PyStructSequence_Init"];asm["_PyStructSequence_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyStructSequence_Init.apply(null,arguments)};var real__PyTuple_SetItem=asm["PyTuple_SetItem"];asm["PyTuple_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTuple_SetItem.apply(null,arguments)};var real__PyTuple_Fini=asm["PyTuple_Fini"];asm["PyTuple_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTuple_Fini.apply(null,arguments)};var real__strncmp=asm["strncmp"];asm["strncmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strncmp.apply(null,arguments)};var real__PyType_ClearCache=asm["PyType_ClearCache"];asm["PyType_ClearCache"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyType_ClearCache.apply(null,arguments)};var real__PyType_Modified=asm["PyType_Modified"];asm["PyType_Modified"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyType_Modified.apply(null,arguments)};var real___PyType_Fini=asm["_PyType_Fini"];asm["_PyType_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyType_Fini.apply(null,arguments)};var real___PyType_LookupId=asm["_PyType_LookupId"];asm["_PyType_LookupId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyType_LookupId.apply(null,arguments)};var real___PyType_CalculateMetaclass=asm["_PyType_CalculateMetaclass"];asm["_PyType_CalculateMetaclass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyType_CalculateMetaclass.apply(null,arguments)};var real__PyWeakref_NewRef=asm["PyWeakref_NewRef"];asm["PyWeakref_NewRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyWeakref_NewRef.apply(null,arguments)};var real__PyType_FromSpec=asm["PyType_FromSpec"];asm["PyType_FromSpec"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyType_FromSpec.apply(null,arguments)};var real__PyType_GetSlot=asm["PyType_GetSlot"];asm["PyType_GetSlot"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyType_GetSlot.apply(null,arguments)};var real__PyUnicode_IsIdentifier=asm["PyUnicode_IsIdentifier"];asm["PyUnicode_IsIdentifier"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_IsIdentifier.apply(null,arguments)};var real___Py_Mangle=asm["_Py_Mangle"];asm["_Py_Mangle"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Mangle.apply(null,arguments)};var real__PyEval_GetGlobals=asm["PyEval_GetGlobals"];asm["PyEval_GetGlobals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_GetGlobals.apply(null,arguments)};var real__PyImport_GetModule=asm["PyImport_GetModule"];asm["PyImport_GetModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_GetModule.apply(null,arguments)};var real__PyImport_Import=asm["PyImport_Import"];asm["PyImport_Import"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_Import.apply(null,arguments)};var real___PyUnicode_ToNumeric=asm["_PyUnicode_ToNumeric"];asm["_PyUnicode_ToNumeric"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_ToNumeric.apply(null,arguments)};var real___PyUnicode_IsLinebreak=asm["_PyUnicode_IsLinebreak"];asm["_PyUnicode_IsLinebreak"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsLinebreak.apply(null,arguments)};var real___PyUnicode_ToTitlecase=asm["_PyUnicode_ToTitlecase"];asm["_PyUnicode_ToTitlecase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_ToTitlecase.apply(null,arguments)};var real___PyUnicode_IsTitlecase=asm["_PyUnicode_IsTitlecase"];asm["_PyUnicode_IsTitlecase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsTitlecase.apply(null,arguments)};var real___PyUnicode_IsXidStart=asm["_PyUnicode_IsXidStart"];asm["_PyUnicode_IsXidStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsXidStart.apply(null,arguments)};var real___PyUnicode_IsXidContinue=asm["_PyUnicode_IsXidContinue"];asm["_PyUnicode_IsXidContinue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsXidContinue.apply(null,arguments)};var real___PyUnicode_ToDecimalDigit=asm["_PyUnicode_ToDecimalDigit"];asm["_PyUnicode_ToDecimalDigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_ToDecimalDigit.apply(null,arguments)};var real___PyUnicode_IsDecimalDigit=asm["_PyUnicode_IsDecimalDigit"];asm["_PyUnicode_IsDecimalDigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsDecimalDigit.apply(null,arguments)};var real___PyUnicode_ToDigit=asm["_PyUnicode_ToDigit"];asm["_PyUnicode_ToDigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_ToDigit.apply(null,arguments)};var real___PyUnicode_IsDigit=asm["_PyUnicode_IsDigit"];asm["_PyUnicode_IsDigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsDigit.apply(null,arguments)};var real___PyUnicode_IsNumeric=asm["_PyUnicode_IsNumeric"];asm["_PyUnicode_IsNumeric"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsNumeric.apply(null,arguments)};var real___PyUnicode_IsPrintable=asm["_PyUnicode_IsPrintable"];asm["_PyUnicode_IsPrintable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsPrintable.apply(null,arguments)};var real___PyUnicode_IsLowercase=asm["_PyUnicode_IsLowercase"];asm["_PyUnicode_IsLowercase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsLowercase.apply(null,arguments)};var real___PyUnicode_IsUppercase=asm["_PyUnicode_IsUppercase"];asm["_PyUnicode_IsUppercase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsUppercase.apply(null,arguments)};var real___PyUnicode_ToUppercase=asm["_PyUnicode_ToUppercase"];asm["_PyUnicode_ToUppercase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_ToUppercase.apply(null,arguments)};var real___PyUnicode_ToLowercase=asm["_PyUnicode_ToLowercase"];asm["_PyUnicode_ToLowercase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_ToLowercase.apply(null,arguments)};var real___PyUnicode_ToLowerFull=asm["_PyUnicode_ToLowerFull"];asm["_PyUnicode_ToLowerFull"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_ToLowerFull.apply(null,arguments)};var real___PyUnicode_ToTitleFull=asm["_PyUnicode_ToTitleFull"];asm["_PyUnicode_ToTitleFull"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_ToTitleFull.apply(null,arguments)};var real___PyUnicode_ToUpperFull=asm["_PyUnicode_ToUpperFull"];asm["_PyUnicode_ToUpperFull"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_ToUpperFull.apply(null,arguments)};var real___PyUnicode_ToFoldedFull=asm["_PyUnicode_ToFoldedFull"];asm["_PyUnicode_ToFoldedFull"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_ToFoldedFull.apply(null,arguments)};var real___PyUnicode_IsCased=asm["_PyUnicode_IsCased"];asm["_PyUnicode_IsCased"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsCased.apply(null,arguments)};var real___PyUnicode_IsCaseIgnorable=asm["_PyUnicode_IsCaseIgnorable"];asm["_PyUnicode_IsCaseIgnorable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsCaseIgnorable.apply(null,arguments)};var real___PyUnicode_IsAlpha=asm["_PyUnicode_IsAlpha"];asm["_PyUnicode_IsAlpha"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_IsAlpha.apply(null,arguments)};var real___Py_GetErrorHandler=asm["_Py_GetErrorHandler"];asm["_Py_GetErrorHandler"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_GetErrorHandler.apply(null,arguments)};var real__PyUnicode_GetMax=asm["PyUnicode_GetMax"];asm["PyUnicode_GetMax"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_GetMax.apply(null,arguments)};var real___PyUnicode_FastCopyCharacters=asm["_PyUnicode_FastCopyCharacters"];asm["_PyUnicode_FastCopyCharacters"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_FastCopyCharacters.apply(null,arguments)};var real__PyUnicode_CopyCharacters=asm["PyUnicode_CopyCharacters"];asm["PyUnicode_CopyCharacters"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_CopyCharacters.apply(null,arguments)};var real__PyUnicode_Resize=asm["PyUnicode_Resize"];asm["PyUnicode_Resize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Resize.apply(null,arguments)};var real__PyUnicode_FromUnicode=asm["PyUnicode_FromUnicode"];asm["PyUnicode_FromUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_FromUnicode.apply(null,arguments)};var real__PyUnicode_DecodeUTF8Stateful=asm["PyUnicode_DecodeUTF8Stateful"];asm["PyUnicode_DecodeUTF8Stateful"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeUTF8Stateful.apply(null,arguments)};var real___PyUnicode_ClearStaticStrings=asm["_PyUnicode_ClearStaticStrings"];asm["_PyUnicode_ClearStaticStrings"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_ClearStaticStrings.apply(null,arguments)};var real__PyUnicode_FromKindAndData=asm["PyUnicode_FromKindAndData"];asm["PyUnicode_FromKindAndData"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_FromKindAndData.apply(null,arguments)};var real___PyUnicode_FindMaxChar=asm["_PyUnicode_FindMaxChar"];asm["_PyUnicode_FindMaxChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_FindMaxChar.apply(null,arguments)};var real___PyUnicode_AsKind=asm["_PyUnicode_AsKind"];asm["_PyUnicode_AsKind"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_AsKind.apply(null,arguments)};var real__PyUnicode_AsUCS4=asm["PyUnicode_AsUCS4"];asm["PyUnicode_AsUCS4"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsUCS4.apply(null,arguments)};var real__PyUnicode_AsUCS4Copy=asm["PyUnicode_AsUCS4Copy"];asm["PyUnicode_AsUCS4Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsUCS4Copy.apply(null,arguments)};var real__PyUnicode_Fill=asm["PyUnicode_Fill"];asm["PyUnicode_Fill"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Fill.apply(null,arguments)};var real___PyUnicodeWriter_WriteLatin1String=asm["_PyUnicodeWriter_WriteLatin1String"];asm["_PyUnicodeWriter_WriteLatin1String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicodeWriter_WriteLatin1String.apply(null,arguments)};var real__PyUnicode_AsWideChar=asm["PyUnicode_AsWideChar"];asm["PyUnicode_AsWideChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsWideChar.apply(null,arguments)};var real__PyUnicode_AsWideCharString=asm["PyUnicode_AsWideCharString"];asm["PyUnicode_AsWideCharString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsWideCharString.apply(null,arguments)};var real__PyUnicode_FromOrdinal=asm["PyUnicode_FromOrdinal"];asm["PyUnicode_FromOrdinal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_FromOrdinal.apply(null,arguments)};var real__PyUnicode_FromObject=asm["PyUnicode_FromObject"];asm["PyUnicode_FromObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_FromObject.apply(null,arguments)};var real__PyUnicode_Decode=asm["PyUnicode_Decode"];asm["PyUnicode_Decode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Decode.apply(null,arguments)};var real__PyUnicode_DecodeUTF16Stateful=asm["PyUnicode_DecodeUTF16Stateful"];asm["PyUnicode_DecodeUTF16Stateful"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeUTF16Stateful.apply(null,arguments)};var real__PyUnicode_DecodeUTF32Stateful=asm["PyUnicode_DecodeUTF32Stateful"];asm["PyUnicode_DecodeUTF32Stateful"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeUTF32Stateful.apply(null,arguments)};var real___PyCodec_DecodeText=asm["_PyCodec_DecodeText"];asm["_PyCodec_DecodeText"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCodec_DecodeText.apply(null,arguments)};var real___Py_normalize_encoding=asm["_Py_normalize_encoding"];asm["_Py_normalize_encoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_normalize_encoding.apply(null,arguments)};var real__PyUnicode_DecodeUTF16=asm["PyUnicode_DecodeUTF16"];asm["PyUnicode_DecodeUTF16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeUTF16.apply(null,arguments)};var real__PyUnicode_DecodeUTF32=asm["PyUnicode_DecodeUTF32"];asm["PyUnicode_DecodeUTF32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeUTF32.apply(null,arguments)};var real__PyUnicode_AsDecodedObject=asm["PyUnicode_AsDecodedObject"];asm["PyUnicode_AsDecodedObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsDecodedObject.apply(null,arguments)};var real__PyCodec_Decode=asm["PyCodec_Decode"];asm["PyCodec_Decode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_Decode.apply(null,arguments)};var real__PyUnicode_AsDecodedUnicode=asm["PyUnicode_AsDecodedUnicode"];asm["PyUnicode_AsDecodedUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsDecodedUnicode.apply(null,arguments)};var real__PyUnicode_Encode=asm["PyUnicode_Encode"];asm["PyUnicode_Encode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Encode.apply(null,arguments)};var real___PyUnicode_EncodeUTF16=asm["_PyUnicode_EncodeUTF16"];asm["_PyUnicode_EncodeUTF16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_EncodeUTF16.apply(null,arguments)};var real___PyUnicode_EncodeUTF32=asm["_PyUnicode_EncodeUTF32"];asm["_PyUnicode_EncodeUTF32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_EncodeUTF32.apply(null,arguments)};var real___PyCodec_EncodeText=asm["_PyCodec_EncodeText"];asm["_PyCodec_EncodeText"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCodec_EncodeText.apply(null,arguments)};var real__PyUnicode_AsEncodedObject=asm["PyUnicode_AsEncodedObject"];asm["PyUnicode_AsEncodedObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsEncodedObject.apply(null,arguments)};var real__PyCodec_Encode=asm["PyCodec_Encode"];asm["PyCodec_Encode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_Encode.apply(null,arguments)};var real__PyUnicode_EncodeLocale=asm["PyUnicode_EncodeLocale"];asm["PyUnicode_EncodeLocale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_EncodeLocale.apply(null,arguments)};var real___Py_EncodeLocaleEx=asm["_Py_EncodeLocaleEx"];asm["_Py_EncodeLocaleEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_EncodeLocaleEx.apply(null,arguments)};var real__PyCodec_StrictErrors=asm["PyCodec_StrictErrors"];asm["PyCodec_StrictErrors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_StrictErrors.apply(null,arguments)};var real__wcscmp=asm["wcscmp"];asm["wcscmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcscmp.apply(null,arguments)};var real___PyUnicode_AsLatin1String=asm["_PyUnicode_AsLatin1String"];asm["_PyUnicode_AsLatin1String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_AsLatin1String.apply(null,arguments)};var real__PyUnicode_AsEncodedUnicode=asm["PyUnicode_AsEncodedUnicode"];asm["PyUnicode_AsEncodedUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsEncodedUnicode.apply(null,arguments)};var real__PyUnicode_DecodeLocaleAndSize=asm["PyUnicode_DecodeLocaleAndSize"];asm["PyUnicode_DecodeLocaleAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeLocaleAndSize.apply(null,arguments)};var real___Py_DecodeLocaleEx=asm["_Py_DecodeLocaleEx"];asm["_Py_DecodeLocaleEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_DecodeLocaleEx.apply(null,arguments)};var real__PyUnicode_DecodeLocale=asm["PyUnicode_DecodeLocale"];asm["PyUnicode_DecodeLocale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeLocale.apply(null,arguments)};var real__PyUnicode_DecodeFSDefaultAndSize=asm["PyUnicode_DecodeFSDefaultAndSize"];asm["PyUnicode_DecodeFSDefaultAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeFSDefaultAndSize.apply(null,arguments)};var real__PyUnicode_FSConverter=asm["PyUnicode_FSConverter"];asm["PyUnicode_FSConverter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_FSConverter.apply(null,arguments)};var real___PyImport_AcquireLock=asm["_PyImport_AcquireLock"];asm["_PyImport_AcquireLock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_AcquireLock.apply(null,arguments)};var real___PyImport_ReleaseLock=asm["_PyImport_ReleaseLock"];asm["_PyImport_ReleaseLock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_ReleaseLock.apply(null,arguments)};var real___PyGILState_Reinit=asm["_PyGILState_Reinit"];asm["_PyGILState_Reinit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGILState_Reinit.apply(null,arguments)};var real___PyEval_ReInitThreads=asm["_PyEval_ReInitThreads"];asm["_PyEval_ReInitThreads"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_ReInitThreads.apply(null,arguments)};var real___PyImport_ReInitLock=asm["_PyImport_ReInitLock"];asm["_PyImport_ReInitLock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_ReInitLock.apply(null,arguments)};var real___PyRuntimeState_ReInitThreads=asm["_PyRuntimeState_ReInitThreads"];asm["_PyRuntimeState_ReInitThreads"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyRuntimeState_ReInitThreads.apply(null,arguments)};var real___PyInterpreterState_DeleteExceptMain=asm["_PyInterpreterState_DeleteExceptMain"];asm["_PyInterpreterState_DeleteExceptMain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyInterpreterState_DeleteExceptMain.apply(null,arguments)};var real__access=asm["access"];asm["access"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__access.apply(null,arguments)};var real__ttyname=asm["ttyname"];asm["ttyname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ttyname.apply(null,arguments)};var real__fchdir=asm["fchdir"];asm["fchdir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fchdir.apply(null,arguments)};var real__PyErr_SetFromErrnoWithFilenameObject=asm["PyErr_SetFromErrnoWithFilenameObject"];asm["PyErr_SetFromErrnoWithFilenameObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SetFromErrnoWithFilenameObject.apply(null,arguments)};var real__chmod=asm["chmod"];asm["chmod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__chmod.apply(null,arguments)};var real__ctermid=asm["ctermid"];asm["ctermid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ctermid.apply(null,arguments)};var real__link=asm["link"];asm["link"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__link.apply(null,arguments)};var real__PyErr_SetFromErrnoWithFilenameObjects=asm["PyErr_SetFromErrnoWithFilenameObjects"];asm["PyErr_SetFromErrnoWithFilenameObjects"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SetFromErrnoWithFilenameObjects.apply(null,arguments)};var real__opendir=asm["opendir"];asm["opendir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__opendir.apply(null,arguments)};var real__readdir=asm["readdir"];asm["readdir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__readdir.apply(null,arguments)};var real__closedir=asm["closedir"];asm["closedir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__closedir.apply(null,arguments)};var real__mkdir=asm["mkdir"];asm["mkdir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__mkdir.apply(null,arguments)};var real__rmdir=asm["rmdir"];asm["rmdir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__rmdir.apply(null,arguments)};var real__symlink=asm["symlink"];asm["symlink"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__symlink.apply(null,arguments)};var real__umask=asm["umask"];asm["umask"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__umask.apply(null,arguments)};var real__unlink=asm["unlink"];asm["unlink"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__unlink.apply(null,arguments)};var real___PyTime_ObjectToTimespec=asm["_PyTime_ObjectToTimespec"];asm["_PyTime_ObjectToTimespec"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_ObjectToTimespec.apply(null,arguments)};var real__PyInterpreterState_Main=asm["PyInterpreterState_Main"];asm["PyInterpreterState_Main"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInterpreterState_Main.apply(null,arguments)};var real__getegid=asm["getegid"];asm["getegid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getegid.apply(null,arguments)};var real__geteuid=asm["geteuid"];asm["geteuid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__geteuid.apply(null,arguments)};var real__getgid=asm["getgid"];asm["getgid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getgid.apply(null,arguments)};var real__getppid=asm["getppid"];asm["getppid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getppid.apply(null,arguments)};var real__getuid=asm["getuid"];asm["getuid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getuid.apply(null,arguments)};var real__getlogin=asm["getlogin"];asm["getlogin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getlogin.apply(null,arguments)};var real___PyArg_ParseStack_SizeT=asm["_PyArg_ParseStack_SizeT"];asm["_PyArg_ParseStack_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_ParseStack_SizeT.apply(null,arguments)};var real__setgid=asm["setgid"];asm["setgid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__setgid.apply(null,arguments)};var real__setegid=asm["setegid"];asm["setegid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__setegid.apply(null,arguments)};var real__setregid=asm["setregid"];asm["setregid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__setregid.apply(null,arguments)};var real___PyArg_ParseStackAndKeywords_SizeT=asm["_PyArg_ParseStackAndKeywords_SizeT"];asm["_PyArg_ParseStackAndKeywords_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_ParseStackAndKeywords_SizeT.apply(null,arguments)};var real__tcgetpgrp=asm["tcgetpgrp"];asm["tcgetpgrp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__tcgetpgrp.apply(null,arguments)};var real__tcsetpgrp=asm["tcsetpgrp"];asm["tcsetpgrp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__tcsetpgrp.apply(null,arguments)};var real__open=asm["open"];asm["open"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__open.apply(null,arguments)};var real___Py_set_inheritable=asm["_Py_set_inheritable"];asm["_Py_set_inheritable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_set_inheritable.apply(null,arguments)};var real__close=asm["close"];asm["close"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__close.apply(null,arguments)};var real___Py_device_encoding=asm["_Py_device_encoding"];asm["_Py_device_encoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_device_encoding.apply(null,arguments)};var real___Py_dup=asm["_Py_dup"];asm["_Py_dup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_dup.apply(null,arguments)};var real__dup2=asm["dup2"];asm["dup2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__dup2.apply(null,arguments)};var real__lseek=asm["lseek"];asm["lseek"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__lseek.apply(null,arguments)};var real___Py_read=asm["_Py_read"];asm["_Py_read"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_read.apply(null,arguments)};var real__fstat=asm["fstat"];asm["fstat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fstat.apply(null,arguments)};var real__pipe=asm["pipe"];asm["pipe"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pipe.apply(null,arguments)};var real__strerror=asm["strerror"];asm["strerror"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strerror.apply(null,arguments)};var real__fsync=asm["fsync"];asm["fsync"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fsync.apply(null,arguments)};var real__fdatasync=asm["fdatasync"];asm["fdatasync"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fdatasync.apply(null,arguments)};var real___PyOS_URandom=asm["_PyOS_URandom"];asm["_PyOS_URandom"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyOS_URandom.apply(null,arguments)};var real__setresgid=asm["setresgid"];asm["setresgid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__setresgid.apply(null,arguments)};var real__ioctl=asm["ioctl"];asm["ioctl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ioctl.apply(null,arguments)};var real___Py_get_inheritable=asm["_Py_get_inheritable"];asm["_Py_get_inheritable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_get_inheritable.apply(null,arguments)};var real___Py_set_blocking=asm["_Py_set_blocking"];asm["_Py_set_blocking"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_set_blocking.apply(null,arguments)};var real__stat=asm["stat"];asm["stat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__stat.apply(null,arguments)};var real___PyLong_FromTime_t=asm["_PyLong_FromTime_t"];asm["_PyLong_FromTime_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_FromTime_t.apply(null,arguments)};var real__getcwd=asm["getcwd"];asm["getcwd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getcwd.apply(null,arguments)};var real__rename=asm["rename"];asm["rename"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__rename.apply(null,arguments)};var real___PyLong_AsTime_t=asm["_PyLong_AsTime_t"];asm["_PyLong_AsTime_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyLong_AsTime_t.apply(null,arguments)};var real__writev=asm["writev"];asm["writev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__writev.apply(null,arguments)};var real__qsort=asm["qsort"];asm["qsort"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__qsort.apply(null,arguments)};var real__PyErr_ResourceWarning=asm["PyErr_ResourceWarning"];asm["PyErr_ResourceWarning"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_ResourceWarning.apply(null,arguments)};var real__lstat=asm["lstat"];asm["lstat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__lstat.apply(null,arguments)};var real__PyUnicode_FSDecoder=asm["PyUnicode_FSDecoder"];asm["PyUnicode_FSDecoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_FSDecoder.apply(null,arguments)};var real__PyUnicode_AsUnicodeAndSize=asm["PyUnicode_AsUnicodeAndSize"];asm["PyUnicode_AsUnicodeAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsUnicodeAndSize.apply(null,arguments)};var real__PyUnicode_AsUnicode=asm["PyUnicode_AsUnicode"];asm["PyUnicode_AsUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsUnicode.apply(null,arguments)};var real___PyUnicode_AsUnicode=asm["_PyUnicode_AsUnicode"];asm["_PyUnicode_AsUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_AsUnicode.apply(null,arguments)};var real__PyUnicode_GetSize=asm["PyUnicode_GetSize"];asm["PyUnicode_GetSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_GetSize.apply(null,arguments)};var real__PyUnicode_GetLength=asm["PyUnicode_GetLength"];asm["PyUnicode_GetLength"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_GetLength.apply(null,arguments)};var real__PyUnicode_WriteChar=asm["PyUnicode_WriteChar"];asm["PyUnicode_WriteChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_WriteChar.apply(null,arguments)};var real__PyUnicode_DecodeUTF7=asm["PyUnicode_DecodeUTF7"];asm["PyUnicode_DecodeUTF7"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeUTF7.apply(null,arguments)};var real__PyUnicode_DecodeUTF7Stateful=asm["PyUnicode_DecodeUTF7Stateful"];asm["PyUnicode_DecodeUTF7Stateful"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeUTF7Stateful.apply(null,arguments)};var real__PyCodec_LookupError=asm["PyCodec_LookupError"];asm["PyCodec_LookupError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_LookupError.apply(null,arguments)};var real___PyUnicode_EncodeUTF7=asm["_PyUnicode_EncodeUTF7"];asm["_PyUnicode_EncodeUTF7"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_EncodeUTF7.apply(null,arguments)};var real__PyUnicode_EncodeUTF7=asm["PyUnicode_EncodeUTF7"];asm["PyUnicode_EncodeUTF7"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_EncodeUTF7.apply(null,arguments)};var real___Py_DecodeUTF8Ex=asm["_Py_DecodeUTF8Ex"];asm["_Py_DecodeUTF8Ex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_DecodeUTF8Ex.apply(null,arguments)};var real___Py_DecodeUTF8_surrogateescape=asm["_Py_DecodeUTF8_surrogateescape"];asm["_Py_DecodeUTF8_surrogateescape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_DecodeUTF8_surrogateescape.apply(null,arguments)};var real___Py_EncodeUTF8Ex=asm["_Py_EncodeUTF8Ex"];asm["_Py_EncodeUTF8Ex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_EncodeUTF8Ex.apply(null,arguments)};var real__PyUnicode_EncodeUTF8=asm["PyUnicode_EncodeUTF8"];asm["PyUnicode_EncodeUTF8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_EncodeUTF8.apply(null,arguments)};var real__PyUnicode_AsUTF8String=asm["PyUnicode_AsUTF8String"];asm["PyUnicode_AsUTF8String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsUTF8String.apply(null,arguments)};var real__PyUnicode_EncodeUTF32=asm["PyUnicode_EncodeUTF32"];asm["PyUnicode_EncodeUTF32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_EncodeUTF32.apply(null,arguments)};var real__PyUnicode_AsUTF32String=asm["PyUnicode_AsUTF32String"];asm["PyUnicode_AsUTF32String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsUTF32String.apply(null,arguments)};var real__PyUnicode_EncodeUTF16=asm["PyUnicode_EncodeUTF16"];asm["PyUnicode_EncodeUTF16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_EncodeUTF16.apply(null,arguments)};var real__PyUnicode_AsUTF16String=asm["PyUnicode_AsUTF16String"];asm["PyUnicode_AsUTF16String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsUTF16String.apply(null,arguments)};var real___PyUnicode_DecodeUnicodeEscape=asm["_PyUnicode_DecodeUnicodeEscape"];asm["_PyUnicode_DecodeUnicodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_DecodeUnicodeEscape.apply(null,arguments)};var real__PyUnicode_DecodeUnicodeEscape=asm["PyUnicode_DecodeUnicodeEscape"];asm["PyUnicode_DecodeUnicodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeUnicodeEscape.apply(null,arguments)};var real__PyUnicode_AsUnicodeEscapeString=asm["PyUnicode_AsUnicodeEscapeString"];asm["PyUnicode_AsUnicodeEscapeString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsUnicodeEscapeString.apply(null,arguments)};var real__PyUnicode_EncodeUnicodeEscape=asm["PyUnicode_EncodeUnicodeEscape"];asm["PyUnicode_EncodeUnicodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_EncodeUnicodeEscape.apply(null,arguments)};var real__PyUnicode_DecodeRawUnicodeEscape=asm["PyUnicode_DecodeRawUnicodeEscape"];asm["PyUnicode_DecodeRawUnicodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeRawUnicodeEscape.apply(null,arguments)};var real__PyUnicode_AsRawUnicodeEscapeString=asm["PyUnicode_AsRawUnicodeEscapeString"];asm["PyUnicode_AsRawUnicodeEscapeString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsRawUnicodeEscapeString.apply(null,arguments)};var real__PyUnicode_EncodeRawUnicodeEscape=asm["PyUnicode_EncodeRawUnicodeEscape"];asm["PyUnicode_EncodeRawUnicodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_EncodeRawUnicodeEscape.apply(null,arguments)};var real__PyUnicode_EncodeLatin1=asm["PyUnicode_EncodeLatin1"];asm["PyUnicode_EncodeLatin1"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_EncodeLatin1.apply(null,arguments)};var real__PyUnicode_AsLatin1String=asm["PyUnicode_AsLatin1String"];asm["PyUnicode_AsLatin1String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsLatin1String.apply(null,arguments)};var real___PyUnicodeWriter_PrepareKindInternal=asm["_PyUnicodeWriter_PrepareKindInternal"];asm["_PyUnicodeWriter_PrepareKindInternal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicodeWriter_PrepareKindInternal.apply(null,arguments)};var real__PyUnicode_EncodeASCII=asm["PyUnicode_EncodeASCII"];asm["PyUnicode_EncodeASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_EncodeASCII.apply(null,arguments)};var real__PyUnicode_DecodeCharmap=asm["PyUnicode_DecodeCharmap"];asm["PyUnicode_DecodeCharmap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_DecodeCharmap.apply(null,arguments)};var real__PyUnicode_BuildEncodingMap=asm["PyUnicode_BuildEncodingMap"];asm["PyUnicode_BuildEncodingMap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_BuildEncodingMap.apply(null,arguments)};var real___PyUnicode_EncodeCharmap=asm["_PyUnicode_EncodeCharmap"];asm["_PyUnicode_EncodeCharmap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_EncodeCharmap.apply(null,arguments)};var real__PyUnicode_EncodeCharmap=asm["PyUnicode_EncodeCharmap"];asm["PyUnicode_EncodeCharmap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_EncodeCharmap.apply(null,arguments)};var real__PyUnicode_AsCharmapString=asm["PyUnicode_AsCharmapString"];asm["PyUnicode_AsCharmapString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsCharmapString.apply(null,arguments)};var real__PyUnicode_TranslateCharmap=asm["PyUnicode_TranslateCharmap"];asm["PyUnicode_TranslateCharmap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_TranslateCharmap.apply(null,arguments)};var real__PyUnicode_Translate=asm["PyUnicode_Translate"];asm["PyUnicode_Translate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Translate.apply(null,arguments)};var real__PyUnicode_TransformDecimalToASCII=asm["PyUnicode_TransformDecimalToASCII"];asm["PyUnicode_TransformDecimalToASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_TransformDecimalToASCII.apply(null,arguments)};var real__PyUnicode_EncodeDecimal=asm["PyUnicode_EncodeDecimal"];asm["PyUnicode_EncodeDecimal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_EncodeDecimal.apply(null,arguments)};var real___PyUnicode_InsertThousandsGrouping=asm["_PyUnicode_InsertThousandsGrouping"];asm["_PyUnicode_InsertThousandsGrouping"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_InsertThousandsGrouping.apply(null,arguments)};var real__PyUnicode_Count=asm["PyUnicode_Count"];asm["PyUnicode_Count"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Count.apply(null,arguments)};var real__PyUnicode_Find=asm["PyUnicode_Find"];asm["PyUnicode_Find"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Find.apply(null,arguments)};var real___PyUnicode_JoinArray=asm["_PyUnicode_JoinArray"];asm["_PyUnicode_JoinArray"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_JoinArray.apply(null,arguments)};var real___PyUnicode_FastFill=asm["_PyUnicode_FastFill"];asm["_PyUnicode_FastFill"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_FastFill.apply(null,arguments)};var real__PyUnicode_Splitlines=asm["PyUnicode_Splitlines"];asm["PyUnicode_Splitlines"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Splitlines.apply(null,arguments)};var real__wmemcmp=asm["wmemcmp"];asm["wmemcmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wmemcmp.apply(null,arguments)};var real__PyUnicode_CompareWithASCIIString=asm["PyUnicode_CompareWithASCIIString"];asm["PyUnicode_CompareWithASCIIString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_CompareWithASCIIString.apply(null,arguments)};var real__PyUnicode_RichCompare=asm["PyUnicode_RichCompare"];asm["PyUnicode_RichCompare"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_RichCompare.apply(null,arguments)};var real__PyUnicode_Contains=asm["PyUnicode_Contains"];asm["PyUnicode_Contains"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Contains.apply(null,arguments)};var real__PyUnicode_Concat=asm["PyUnicode_Concat"];asm["PyUnicode_Concat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Concat.apply(null,arguments)};var real__PyUnicode_Append=asm["PyUnicode_Append"];asm["PyUnicode_Append"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Append.apply(null,arguments)};var real__PyUnicode_AppendAndDel=asm["PyUnicode_AppendAndDel"];asm["PyUnicode_AppendAndDel"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AppendAndDel.apply(null,arguments)};var real__PyUnicode_Replace=asm["PyUnicode_Replace"];asm["PyUnicode_Replace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Replace.apply(null,arguments)};var real__PyUnicode_Split=asm["PyUnicode_Split"];asm["PyUnicode_Split"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Split.apply(null,arguments)};var real__PyUnicode_Partition=asm["PyUnicode_Partition"];asm["PyUnicode_Partition"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Partition.apply(null,arguments)};var real__PyUnicode_RPartition=asm["PyUnicode_RPartition"];asm["PyUnicode_RPartition"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_RPartition.apply(null,arguments)};var real__PyUnicode_RSplit=asm["PyUnicode_RSplit"];asm["PyUnicode_RSplit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_RSplit.apply(null,arguments)};var real___PyUnicodeWriter_WriteSubstring=asm["_PyUnicodeWriter_WriteSubstring"];asm["_PyUnicodeWriter_WriteSubstring"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicodeWriter_WriteSubstring.apply(null,arguments)};var real__PyUnicode_Format=asm["PyUnicode_Format"];asm["PyUnicode_Format"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_Format.apply(null,arguments)};var real___PyUnicode_Init=asm["_PyUnicode_Init"];asm["_PyUnicode_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_Init.apply(null,arguments)};var real__PyUnicode_InternImmortal=asm["PyUnicode_InternImmortal"];asm["PyUnicode_InternImmortal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_InternImmortal.apply(null,arguments)};var real__Py_UNICODE_strlen=asm["Py_UNICODE_strlen"];asm["Py_UNICODE_strlen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_UNICODE_strlen.apply(null,arguments)};var real__Py_UNICODE_strcpy=asm["Py_UNICODE_strcpy"];asm["Py_UNICODE_strcpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_UNICODE_strcpy.apply(null,arguments)};var real__Py_UNICODE_strncpy=asm["Py_UNICODE_strncpy"];asm["Py_UNICODE_strncpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_UNICODE_strncpy.apply(null,arguments)};var real__Py_UNICODE_strcat=asm["Py_UNICODE_strcat"];asm["Py_UNICODE_strcat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_UNICODE_strcat.apply(null,arguments)};var real__Py_UNICODE_strcmp=asm["Py_UNICODE_strcmp"];asm["Py_UNICODE_strcmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_UNICODE_strcmp.apply(null,arguments)};var real__Py_UNICODE_strncmp=asm["Py_UNICODE_strncmp"];asm["Py_UNICODE_strncmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_UNICODE_strncmp.apply(null,arguments)};var real__Py_UNICODE_strchr=asm["Py_UNICODE_strchr"];asm["Py_UNICODE_strchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_UNICODE_strchr.apply(null,arguments)};var real__Py_UNICODE_strrchr=asm["Py_UNICODE_strrchr"];asm["Py_UNICODE_strrchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_UNICODE_strrchr.apply(null,arguments)};var real__PyUnicode_AsUnicodeCopy=asm["PyUnicode_AsUnicodeCopy"];asm["PyUnicode_AsUnicodeCopy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyUnicode_AsUnicodeCopy.apply(null,arguments)};var real___PyUnicode_InitEncodings=asm["_PyUnicode_InitEncodings"];asm["_PyUnicode_InitEncodings"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_InitEncodings.apply(null,arguments)};var real___Py_SetFileSystemEncoding=asm["_Py_SetFileSystemEncoding"];asm["_Py_SetFileSystemEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_SetFileSystemEncoding.apply(null,arguments)};var real___PyUnicode_Fini=asm["_PyUnicode_Fini"];asm["_PyUnicode_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_Fini.apply(null,arguments)};var real__PyInit__string=asm["PyInit__string"];asm["PyInit__string"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__string.apply(null,arguments)};var real___PyUnicode_FormatAdvancedWriter=asm["_PyUnicode_FormatAdvancedWriter"];asm["_PyUnicode_FormatAdvancedWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyUnicode_FormatAdvancedWriter.apply(null,arguments)};var real___PyCodec_Lookup=asm["_PyCodec_Lookup"];asm["_PyCodec_Lookup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCodec_Lookup.apply(null,arguments)};var real___PyWeakref_GetWeakrefCount=asm["_PyWeakref_GetWeakrefCount"];asm["_PyWeakref_GetWeakrefCount"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyWeakref_GetWeakrefCount.apply(null,arguments)};var real__PyWeakref_NewProxy=asm["PyWeakref_NewProxy"];asm["PyWeakref_NewProxy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyWeakref_NewProxy.apply(null,arguments)};var real__PyWeakref_GetObject=asm["PyWeakref_GetObject"];asm["PyWeakref_GetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyWeakref_GetObject.apply(null,arguments)};var real__PyGrammar_AddAccelerators=asm["PyGrammar_AddAccelerators"];asm["PyGrammar_AddAccelerators"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyGrammar_AddAccelerators.apply(null,arguments)};var real__PyGrammar_RemoveAccelerators=asm["PyGrammar_RemoveAccelerators"];asm["PyGrammar_RemoveAccelerators"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyGrammar_RemoveAccelerators.apply(null,arguments)};var real__PyGrammar_FindDFA=asm["PyGrammar_FindDFA"];asm["PyGrammar_FindDFA"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyGrammar_FindDFA.apply(null,arguments)};var real__PyGrammar_LabelRepr=asm["PyGrammar_LabelRepr"];asm["PyGrammar_LabelRepr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyGrammar_LabelRepr.apply(null,arguments)};var real__PyOS_StdioReadline=asm["PyOS_StdioReadline"];asm["PyOS_StdioReadline"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_StdioReadline.apply(null,arguments)};var real__PyOS_Readline=asm["PyOS_Readline"];asm["PyOS_Readline"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_Readline.apply(null,arguments)};var real__PyNode_New=asm["PyNode_New"];asm["PyNode_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNode_New.apply(null,arguments)};var real___PyNode_FinalizeEndPos=asm["_PyNode_FinalizeEndPos"];asm["_PyNode_FinalizeEndPos"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyNode_FinalizeEndPos.apply(null,arguments)};var real__PyNode_AddChild=asm["PyNode_AddChild"];asm["PyNode_AddChild"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNode_AddChild.apply(null,arguments)};var real__PyNode_Free=asm["PyNode_Free"];asm["PyNode_Free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNode_Free.apply(null,arguments)};var real___PyNode_SizeOf=asm["_PyNode_SizeOf"];asm["_PyNode_SizeOf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyNode_SizeOf.apply(null,arguments)};var real__PyParser_New=asm["PyParser_New"];asm["PyParser_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_New.apply(null,arguments)};var real__PyParser_Delete=asm["PyParser_Delete"];asm["PyParser_Delete"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_Delete.apply(null,arguments)};var real__PyParser_AddToken=asm["PyParser_AddToken"];asm["PyParser_AddToken"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_AddToken.apply(null,arguments)};var real__PyParser_ParseString=asm["PyParser_ParseString"];asm["PyParser_ParseString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ParseString.apply(null,arguments)};var real__PyParser_ParseStringObject=asm["PyParser_ParseStringObject"];asm["PyParser_ParseStringObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ParseStringObject.apply(null,arguments)};var real__PyParser_ParseStringFlagsFilename=asm["PyParser_ParseStringFlagsFilename"];asm["PyParser_ParseStringFlagsFilename"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ParseStringFlagsFilename.apply(null,arguments)};var real__PyParser_ParseStringFlags=asm["PyParser_ParseStringFlags"];asm["PyParser_ParseStringFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ParseStringFlags.apply(null,arguments)};var real__PyParser_ParseStringFlagsFilenameEx=asm["PyParser_ParseStringFlagsFilenameEx"];asm["PyParser_ParseStringFlagsFilenameEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ParseStringFlagsFilenameEx.apply(null,arguments)};var real__PyParser_ParseFile=asm["PyParser_ParseFile"];asm["PyParser_ParseFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ParseFile.apply(null,arguments)};var real__PyParser_ParseFileFlags=asm["PyParser_ParseFileFlags"];asm["PyParser_ParseFileFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ParseFileFlags.apply(null,arguments)};var real__PyParser_ParseFileFlagsEx=asm["PyParser_ParseFileFlagsEx"];asm["PyParser_ParseFileFlagsEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ParseFileFlagsEx.apply(null,arguments)};var real__PyParser_ParseFileObject=asm["PyParser_ParseFileObject"];asm["PyParser_ParseFileObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ParseFileObject.apply(null,arguments)};var real__PyToken_OneChar=asm["PyToken_OneChar"];asm["PyToken_OneChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyToken_OneChar.apply(null,arguments)};var real__PyToken_TwoChars=asm["PyToken_TwoChars"];asm["PyToken_TwoChars"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyToken_TwoChars.apply(null,arguments)};var real__PyToken_ThreeChars=asm["PyToken_ThreeChars"];asm["PyToken_ThreeChars"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyToken_ThreeChars.apply(null,arguments)};var real__PyTokenizer_FromString=asm["PyTokenizer_FromString"];asm["PyTokenizer_FromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTokenizer_FromString.apply(null,arguments)};var real__PyTokenizer_Free=asm["PyTokenizer_Free"];asm["PyTokenizer_Free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTokenizer_Free.apply(null,arguments)};var real__PyTokenizer_FromUTF8=asm["PyTokenizer_FromUTF8"];asm["PyTokenizer_FromUTF8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTokenizer_FromUTF8.apply(null,arguments)};var real__PyTokenizer_FromFile=asm["PyTokenizer_FromFile"];asm["PyTokenizer_FromFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTokenizer_FromFile.apply(null,arguments)};var real__PyTokenizer_Get=asm["PyTokenizer_Get"];asm["PyTokenizer_Get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTokenizer_Get.apply(null,arguments)};var real__PyTokenizer_FindEncodingFilename=asm["PyTokenizer_FindEncodingFilename"];asm["PyTokenizer_FindEncodingFilename"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTokenizer_FindEncodingFilename.apply(null,arguments)};var real__PyTokenizer_FindEncoding=asm["PyTokenizer_FindEncoding"];asm["PyTokenizer_FindEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTokenizer_FindEncoding.apply(null,arguments)};var real___Py_Module=asm["_Py_Module"];asm["_Py_Module"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Module.apply(null,arguments)};var real___Py_Interactive=asm["_Py_Interactive"];asm["_Py_Interactive"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Interactive.apply(null,arguments)};var real___Py_Expression=asm["_Py_Expression"];asm["_Py_Expression"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Expression.apply(null,arguments)};var real___Py_FunctionType=asm["_Py_FunctionType"];asm["_Py_FunctionType"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_FunctionType.apply(null,arguments)};var real___Py_Suite=asm["_Py_Suite"];asm["_Py_Suite"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Suite.apply(null,arguments)};var real___Py_FunctionDef=asm["_Py_FunctionDef"];asm["_Py_FunctionDef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_FunctionDef.apply(null,arguments)};var real___Py_AsyncFunctionDef=asm["_Py_AsyncFunctionDef"];asm["_Py_AsyncFunctionDef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_AsyncFunctionDef.apply(null,arguments)};var real___Py_ClassDef=asm["_Py_ClassDef"];asm["_Py_ClassDef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_ClassDef.apply(null,arguments)};var real___Py_Return=asm["_Py_Return"];asm["_Py_Return"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Return.apply(null,arguments)};var real___Py_Delete=asm["_Py_Delete"];asm["_Py_Delete"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Delete.apply(null,arguments)};var real___Py_Assign=asm["_Py_Assign"];asm["_Py_Assign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Assign.apply(null,arguments)};var real___Py_AugAssign=asm["_Py_AugAssign"];asm["_Py_AugAssign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_AugAssign.apply(null,arguments)};var real___Py_AnnAssign=asm["_Py_AnnAssign"];asm["_Py_AnnAssign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_AnnAssign.apply(null,arguments)};var real___Py_For=asm["_Py_For"];asm["_Py_For"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_For.apply(null,arguments)};var real___Py_AsyncFor=asm["_Py_AsyncFor"];asm["_Py_AsyncFor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_AsyncFor.apply(null,arguments)};var real___Py_While=asm["_Py_While"];asm["_Py_While"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_While.apply(null,arguments)};var real___Py_If=asm["_Py_If"];asm["_Py_If"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_If.apply(null,arguments)};var real___Py_With=asm["_Py_With"];asm["_Py_With"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_With.apply(null,arguments)};var real___Py_AsyncWith=asm["_Py_AsyncWith"];asm["_Py_AsyncWith"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_AsyncWith.apply(null,arguments)};var real___Py_Raise=asm["_Py_Raise"];asm["_Py_Raise"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Raise.apply(null,arguments)};var real___Py_Try=asm["_Py_Try"];asm["_Py_Try"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Try.apply(null,arguments)};var real___Py_Assert=asm["_Py_Assert"];asm["_Py_Assert"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Assert.apply(null,arguments)};var real___Py_Import=asm["_Py_Import"];asm["_Py_Import"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Import.apply(null,arguments)};var real___Py_ImportFrom=asm["_Py_ImportFrom"];asm["_Py_ImportFrom"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_ImportFrom.apply(null,arguments)};var real___Py_Global=asm["_Py_Global"];asm["_Py_Global"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Global.apply(null,arguments)};var real___Py_Nonlocal=asm["_Py_Nonlocal"];asm["_Py_Nonlocal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Nonlocal.apply(null,arguments)};var real___Py_Expr=asm["_Py_Expr"];asm["_Py_Expr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Expr.apply(null,arguments)};var real___Py_Pass=asm["_Py_Pass"];asm["_Py_Pass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Pass.apply(null,arguments)};var real___Py_Break=asm["_Py_Break"];asm["_Py_Break"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Break.apply(null,arguments)};var real___Py_Continue=asm["_Py_Continue"];asm["_Py_Continue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Continue.apply(null,arguments)};var real___Py_BoolOp=asm["_Py_BoolOp"];asm["_Py_BoolOp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_BoolOp.apply(null,arguments)};var real___Py_NamedExpr=asm["_Py_NamedExpr"];asm["_Py_NamedExpr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_NamedExpr.apply(null,arguments)};var real___Py_BinOp=asm["_Py_BinOp"];asm["_Py_BinOp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_BinOp.apply(null,arguments)};var real___Py_UnaryOp=asm["_Py_UnaryOp"];asm["_Py_UnaryOp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_UnaryOp.apply(null,arguments)};var real___Py_Lambda=asm["_Py_Lambda"];asm["_Py_Lambda"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Lambda.apply(null,arguments)};var real___Py_IfExp=asm["_Py_IfExp"];asm["_Py_IfExp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_IfExp.apply(null,arguments)};var real___Py_Dict=asm["_Py_Dict"];asm["_Py_Dict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Dict.apply(null,arguments)};var real___Py_Set=asm["_Py_Set"];asm["_Py_Set"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Set.apply(null,arguments)};var real___Py_ListComp=asm["_Py_ListComp"];asm["_Py_ListComp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_ListComp.apply(null,arguments)};var real___Py_SetComp=asm["_Py_SetComp"];asm["_Py_SetComp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_SetComp.apply(null,arguments)};var real___Py_DictComp=asm["_Py_DictComp"];asm["_Py_DictComp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_DictComp.apply(null,arguments)};var real___Py_GeneratorExp=asm["_Py_GeneratorExp"];asm["_Py_GeneratorExp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_GeneratorExp.apply(null,arguments)};var real___Py_Await=asm["_Py_Await"];asm["_Py_Await"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Await.apply(null,arguments)};var real___Py_Yield=asm["_Py_Yield"];asm["_Py_Yield"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Yield.apply(null,arguments)};var real___Py_YieldFrom=asm["_Py_YieldFrom"];asm["_Py_YieldFrom"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_YieldFrom.apply(null,arguments)};var real___Py_Compare=asm["_Py_Compare"];asm["_Py_Compare"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Compare.apply(null,arguments)};var real___Py_Call=asm["_Py_Call"];asm["_Py_Call"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Call.apply(null,arguments)};var real___Py_FormattedValue=asm["_Py_FormattedValue"];asm["_Py_FormattedValue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_FormattedValue.apply(null,arguments)};var real___Py_JoinedStr=asm["_Py_JoinedStr"];asm["_Py_JoinedStr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_JoinedStr.apply(null,arguments)};var real___Py_Constant=asm["_Py_Constant"];asm["_Py_Constant"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Constant.apply(null,arguments)};var real___Py_Attribute=asm["_Py_Attribute"];asm["_Py_Attribute"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Attribute.apply(null,arguments)};var real___Py_Subscript=asm["_Py_Subscript"];asm["_Py_Subscript"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Subscript.apply(null,arguments)};var real___Py_Starred=asm["_Py_Starred"];asm["_Py_Starred"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Starred.apply(null,arguments)};var real___Py_Name=asm["_Py_Name"];asm["_Py_Name"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Name.apply(null,arguments)};var real___Py_List=asm["_Py_List"];asm["_Py_List"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_List.apply(null,arguments)};var real___Py_Tuple=asm["_Py_Tuple"];asm["_Py_Tuple"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Tuple.apply(null,arguments)};var real___Py_Slice=asm["_Py_Slice"];asm["_Py_Slice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Slice.apply(null,arguments)};var real___Py_ExtSlice=asm["_Py_ExtSlice"];asm["_Py_ExtSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_ExtSlice.apply(null,arguments)};var real___Py_Index=asm["_Py_Index"];asm["_Py_Index"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_Index.apply(null,arguments)};var real___Py_comprehension=asm["_Py_comprehension"];asm["_Py_comprehension"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_comprehension.apply(null,arguments)};var real___Py_ExceptHandler=asm["_Py_ExceptHandler"];asm["_Py_ExceptHandler"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_ExceptHandler.apply(null,arguments)};var real___Py_arguments=asm["_Py_arguments"];asm["_Py_arguments"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_arguments.apply(null,arguments)};var real___Py_arg=asm["_Py_arg"];asm["_Py_arg"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_arg.apply(null,arguments)};var real___Py_keyword=asm["_Py_keyword"];asm["_Py_keyword"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_keyword.apply(null,arguments)};var real___Py_alias=asm["_Py_alias"];asm["_Py_alias"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_alias.apply(null,arguments)};var real___Py_withitem=asm["_Py_withitem"];asm["_Py_withitem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_withitem.apply(null,arguments)};var real___Py_TypeIgnore=asm["_Py_TypeIgnore"];asm["_Py_TypeIgnore"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_TypeIgnore.apply(null,arguments)};var real__PyInit__ast=asm["PyInit__ast"];asm["PyInit__ast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__ast.apply(null,arguments)};var real__PyAST_mod2obj=asm["PyAST_mod2obj"];asm["PyAST_mod2obj"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyAST_mod2obj.apply(null,arguments)};var real__PyAST_obj2mod=asm["PyAST_obj2mod"];asm["PyAST_obj2mod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyAST_obj2mod.apply(null,arguments)};var real__PyAST_Check=asm["PyAST_Check"];asm["PyAST_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyAST_Check.apply(null,arguments)};var real__PyErr_Warn=asm["PyErr_Warn"];asm["PyErr_Warn"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_Warn.apply(null,arguments)};var real__PyErr_WarnExplicitObject=asm["PyErr_WarnExplicitObject"];asm["PyErr_WarnExplicitObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_WarnExplicitObject.apply(null,arguments)};var real___PySys_GetObjectId=asm["_PySys_GetObjectId"];asm["_PySys_GetObjectId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySys_GetObjectId.apply(null,arguments)};var real___Py_DisplaySourceLine=asm["_Py_DisplaySourceLine"];asm["_Py_DisplaySourceLine"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_DisplaySourceLine.apply(null,arguments)};var real__PyErr_WarnExplicit=asm["PyErr_WarnExplicit"];asm["PyErr_WarnExplicit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_WarnExplicit.apply(null,arguments)};var real___Py_IsFinalizing=asm["_Py_IsFinalizing"];asm["_Py_IsFinalizing"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_IsFinalizing.apply(null,arguments)};var real___PyWarnings_Init=asm["_PyWarnings_Init"];asm["_PyWarnings_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyWarnings_Init.apply(null,arguments)};var real___PyWarnings_Fini=asm["_PyWarnings_Fini"];asm["_PyWarnings_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyWarnings_Fini.apply(null,arguments)};var real___Py_asdl_seq_new=asm["_Py_asdl_seq_new"];asm["_Py_asdl_seq_new"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_asdl_seq_new.apply(null,arguments)};var real___Py_asdl_int_seq_new=asm["_Py_asdl_int_seq_new"];asm["_Py_asdl_int_seq_new"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_asdl_int_seq_new.apply(null,arguments)};var real__PyAST_Validate=asm["PyAST_Validate"];asm["PyAST_Validate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyAST_Validate.apply(null,arguments)};var real__PyAST_FromNodeObject=asm["PyAST_FromNodeObject"];asm["PyAST_FromNodeObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyAST_FromNodeObject.apply(null,arguments)};var real__PyAST_FromNode=asm["PyAST_FromNode"];asm["PyAST_FromNode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyAST_FromNode.apply(null,arguments)};var real___PyAST_GetDocString=asm["_PyAST_GetDocString"];asm["_PyAST_GetDocString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyAST_GetDocString.apply(null,arguments)};var real___PyAST_Optimize=asm["_PyAST_Optimize"];asm["_PyAST_Optimize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyAST_Optimize.apply(null,arguments)};var real___PyAST_ExprAsUnicode=asm["_PyAST_ExprAsUnicode"];asm["_PyAST_ExprAsUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyAST_ExprAsUnicode.apply(null,arguments)};var real___PyBuiltin_Init=asm["_PyBuiltin_Init"];asm["_PyBuiltin_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyBuiltin_Init.apply(null,arguments)};var real___Py_fstat_noraise=asm["_Py_fstat_noraise"];asm["_Py_fstat_noraise"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_fstat_noraise.apply(null,arguments)};var real___Py_open=asm["_Py_open"];asm["_Py_open"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_open.apply(null,arguments)};var real___Py_open_noraise=asm["_Py_open_noraise"];asm["_Py_open_noraise"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_open_noraise.apply(null,arguments)};var real__read=asm["read"];asm["read"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__read.apply(null,arguments)};var real___PyOS_URandomNonblock=asm["_PyOS_URandomNonblock"];asm["_PyOS_URandomNonblock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyOS_URandomNonblock.apply(null,arguments)};var real___Py_HashRandomization_Init=asm["_Py_HashRandomization_Init"];asm["_Py_HashRandomization_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_HashRandomization_Init.apply(null,arguments)};var real___Py_HashRandomization_Fini=asm["_Py_HashRandomization_Fini"];asm["_Py_HashRandomization_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_HashRandomization_Fini.apply(null,arguments)};var real___PyEval_SetSwitchInterval=asm["_PyEval_SetSwitchInterval"];asm["_PyEval_SetSwitchInterval"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_SetSwitchInterval.apply(null,arguments)};var real___PyEval_GetSwitchInterval=asm["_PyEval_GetSwitchInterval"];asm["_PyEval_GetSwitchInterval"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_GetSwitchInterval.apply(null,arguments)};var real__PyEval_ThreadsInitialized=asm["PyEval_ThreadsInitialized"];asm["PyEval_ThreadsInitialized"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_ThreadsInitialized.apply(null,arguments)};var real__PyEval_InitThreads=asm["PyEval_InitThreads"];asm["PyEval_InitThreads"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_InitThreads.apply(null,arguments)};var real___PyEval_FiniThreads=asm["_PyEval_FiniThreads"];asm["_PyEval_FiniThreads"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_FiniThreads.apply(null,arguments)};var real___PyEval_Fini=asm["_PyEval_Fini"];asm["_PyEval_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_Fini.apply(null,arguments)};var real__PyEval_AcquireLock=asm["PyEval_AcquireLock"];asm["PyEval_AcquireLock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_AcquireLock.apply(null,arguments)};var real__PyEval_ReleaseLock=asm["PyEval_ReleaseLock"];asm["PyEval_ReleaseLock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_ReleaseLock.apply(null,arguments)};var real__PyEval_AcquireThread=asm["PyEval_AcquireThread"];asm["PyEval_AcquireThread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_AcquireThread.apply(null,arguments)};var real__PyEval_ReleaseThread=asm["PyEval_ReleaseThread"];asm["PyEval_ReleaseThread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_ReleaseThread.apply(null,arguments)};var real__PyThread_init_thread=asm["PyThread_init_thread"];asm["PyThread_init_thread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_init_thread.apply(null,arguments)};var real__pthread_mutex_init=asm["pthread_mutex_init"];asm["pthread_mutex_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_mutex_init.apply(null,arguments)};var real___PyThread_cond_init=asm["_PyThread_cond_init"];asm["_PyThread_cond_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyThread_cond_init.apply(null,arguments)};var real__pthread_mutex_lock=asm["pthread_mutex_lock"];asm["pthread_mutex_lock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_mutex_lock.apply(null,arguments)};var real___PyThread_cond_after=asm["_PyThread_cond_after"];asm["_PyThread_cond_after"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyThread_cond_after.apply(null,arguments)};var real__pthread_mutex_unlock=asm["pthread_mutex_unlock"];asm["pthread_mutex_unlock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_mutex_unlock.apply(null,arguments)};var real__pthread_mutex_destroy=asm["pthread_mutex_destroy"];asm["pthread_mutex_destroy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_mutex_destroy.apply(null,arguments)};var real__PyThread_exit_thread=asm["PyThread_exit_thread"];asm["PyThread_exit_thread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_exit_thread.apply(null,arguments)};var real___PyThreadState_Swap=asm["_PyThreadState_Swap"];asm["_PyThreadState_Swap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyThreadState_Swap.apply(null,arguments)};var real___PyThreadState_DeleteExcept=asm["_PyThreadState_DeleteExcept"];asm["_PyThreadState_DeleteExcept"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyThreadState_DeleteExcept.apply(null,arguments)};var real___PyEval_SignalAsyncExc=asm["_PyEval_SignalAsyncExc"];asm["_PyEval_SignalAsyncExc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_SignalAsyncExc.apply(null,arguments)};var real___PyErr_Fetch=asm["_PyErr_Fetch"];asm["_PyErr_Fetch"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_Fetch.apply(null,arguments)};var real___PyErr_SetString=asm["_PyErr_SetString"];asm["_PyErr_SetString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_SetString.apply(null,arguments)};var real___PyErr_Print=asm["_PyErr_Print"];asm["_PyErr_Print"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_Print.apply(null,arguments)};var real___PyErr_Restore=asm["_PyErr_Restore"];asm["_PyErr_Restore"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_Restore.apply(null,arguments)};var real__Py_AddPendingCall=asm["Py_AddPendingCall"];asm["Py_AddPendingCall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_AddPendingCall.apply(null,arguments)};var real___Py_FinishPendingCalls=asm["_Py_FinishPendingCalls"];asm["_Py_FinishPendingCalls"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_FinishPendingCalls.apply(null,arguments)};var real__Py_MakePendingCalls=asm["Py_MakePendingCalls"];asm["Py_MakePendingCalls"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_MakePendingCalls.apply(null,arguments)};var real___PyEval_Initialize=asm["_PyEval_Initialize"];asm["_PyEval_Initialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_Initialize.apply(null,arguments)};var real__Py_GetRecursionLimit=asm["Py_GetRecursionLimit"];asm["Py_GetRecursionLimit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_GetRecursionLimit.apply(null,arguments)};var real__Py_SetRecursionLimit=asm["Py_SetRecursionLimit"];asm["Py_SetRecursionLimit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_SetRecursionLimit.apply(null,arguments)};var real___PyErr_Format=asm["_PyErr_Format"];asm["_PyErr_Format"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_Format.apply(null,arguments)};var real__PyEval_EvalCode=asm["PyEval_EvalCode"];asm["PyEval_EvalCode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_EvalCode.apply(null,arguments)};var real__PyEval_EvalCodeEx=asm["PyEval_EvalCodeEx"];asm["PyEval_EvalCodeEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_EvalCodeEx.apply(null,arguments)};var real__PyEval_EvalFrame=asm["PyEval_EvalFrame"];asm["PyEval_EvalFrame"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_EvalFrame.apply(null,arguments)};var real___PyEval_EvalFrameDefault=asm["_PyEval_EvalFrameDefault"];asm["_PyEval_EvalFrameDefault"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_EvalFrameDefault.apply(null,arguments)};var real___PyErr_SetNone=asm["_PyErr_SetNone"];asm["_PyErr_SetNone"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_SetNone.apply(null,arguments)};var real___PyErr_GetTopmostException=asm["_PyErr_GetTopmostException"];asm["_PyErr_GetTopmostException"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_GetTopmostException.apply(null,arguments)};var real___PyErr_SetObject=asm["_PyErr_SetObject"];asm["_PyErr_SetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_SetObject.apply(null,arguments)};var real___PyErr_ExceptionMatches=asm["_PyErr_ExceptionMatches"];asm["_PyErr_ExceptionMatches"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_ExceptionMatches.apply(null,arguments)};var real___PyErr_Clear=asm["_PyErr_Clear"];asm["_PyErr_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_Clear.apply(null,arguments)};var real__PyImport_ImportModuleLevelObject=asm["PyImport_ImportModuleLevelObject"];asm["PyImport_ImportModuleLevelObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_ImportModuleLevelObject.apply(null,arguments)};var real__PyErr_SetImportError=asm["PyErr_SetImportError"];asm["PyErr_SetImportError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SetImportError.apply(null,arguments)};var real__PyTraceBack_Here=asm["PyTraceBack_Here"];asm["PyTraceBack_Here"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTraceBack_Here.apply(null,arguments)};var real___PyErr_NormalizeException=asm["_PyErr_NormalizeException"];asm["_PyErr_NormalizeException"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_NormalizeException.apply(null,arguments)};var real___PyEval_CallTracing=asm["_PyEval_CallTracing"];asm["_PyEval_CallTracing"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_CallTracing.apply(null,arguments)};var real__PyEval_SetProfile=asm["PyEval_SetProfile"];asm["PyEval_SetProfile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_SetProfile.apply(null,arguments)};var real__PyEval_SetTrace=asm["PyEval_SetTrace"];asm["PyEval_SetTrace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_SetTrace.apply(null,arguments)};var real___PyEval_SetCoroutineOriginTrackingDepth=asm["_PyEval_SetCoroutineOriginTrackingDepth"];asm["_PyEval_SetCoroutineOriginTrackingDepth"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_SetCoroutineOriginTrackingDepth.apply(null,arguments)};var real___PyEval_GetCoroutineOriginTrackingDepth=asm["_PyEval_GetCoroutineOriginTrackingDepth"];asm["_PyEval_GetCoroutineOriginTrackingDepth"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_GetCoroutineOriginTrackingDepth.apply(null,arguments)};var real___PyEval_SetAsyncGenFirstiter=asm["_PyEval_SetAsyncGenFirstiter"];asm["_PyEval_SetAsyncGenFirstiter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_SetAsyncGenFirstiter.apply(null,arguments)};var real___PyEval_GetAsyncGenFirstiter=asm["_PyEval_GetAsyncGenFirstiter"];asm["_PyEval_GetAsyncGenFirstiter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_GetAsyncGenFirstiter.apply(null,arguments)};var real___PyEval_SetAsyncGenFinalizer=asm["_PyEval_SetAsyncGenFinalizer"];asm["_PyEval_SetAsyncGenFinalizer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_SetAsyncGenFinalizer.apply(null,arguments)};var real___PyEval_GetAsyncGenFinalizer=asm["_PyEval_GetAsyncGenFinalizer"];asm["_PyEval_GetAsyncGenFinalizer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_GetAsyncGenFinalizer.apply(null,arguments)};var real__PyEval_GetBuiltins=asm["PyEval_GetBuiltins"];asm["PyEval_GetBuiltins"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_GetBuiltins.apply(null,arguments)};var real__PyEval_MergeCompilerFlags=asm["PyEval_MergeCompilerFlags"];asm["PyEval_MergeCompilerFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_MergeCompilerFlags.apply(null,arguments)};var real__PyEval_GetFuncName=asm["PyEval_GetFuncName"];asm["PyEval_GetFuncName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_GetFuncName.apply(null,arguments)};var real__PyEval_GetFuncDesc=asm["PyEval_GetFuncDesc"];asm["PyEval_GetFuncDesc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyEval_GetFuncDesc.apply(null,arguments)};var real___PyEval_RequestCodeExtraIndex=asm["_PyEval_RequestCodeExtraIndex"];asm["_PyEval_RequestCodeExtraIndex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyEval_RequestCodeExtraIndex.apply(null,arguments)};var real__PyCodec_Register=asm["PyCodec_Register"];asm["PyCodec_Register"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_Register.apply(null,arguments)};var real___PyCodec_Forget=asm["_PyCodec_Forget"];asm["_PyCodec_Forget"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCodec_Forget.apply(null,arguments)};var real__PyCodec_KnownEncoding=asm["PyCodec_KnownEncoding"];asm["PyCodec_KnownEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_KnownEncoding.apply(null,arguments)};var real___PyCodecInfo_GetIncrementalDecoder=asm["_PyCodecInfo_GetIncrementalDecoder"];asm["_PyCodecInfo_GetIncrementalDecoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCodecInfo_GetIncrementalDecoder.apply(null,arguments)};var real___PyCodecInfo_GetIncrementalEncoder=asm["_PyCodecInfo_GetIncrementalEncoder"];asm["_PyCodecInfo_GetIncrementalEncoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCodecInfo_GetIncrementalEncoder.apply(null,arguments)};var real__PyCodec_Encoder=asm["PyCodec_Encoder"];asm["PyCodec_Encoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_Encoder.apply(null,arguments)};var real__PyCodec_Decoder=asm["PyCodec_Decoder"];asm["PyCodec_Decoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_Decoder.apply(null,arguments)};var real__PyCodec_IncrementalEncoder=asm["PyCodec_IncrementalEncoder"];asm["PyCodec_IncrementalEncoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_IncrementalEncoder.apply(null,arguments)};var real__PyCodec_IncrementalDecoder=asm["PyCodec_IncrementalDecoder"];asm["PyCodec_IncrementalDecoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_IncrementalDecoder.apply(null,arguments)};var real__PyCodec_StreamReader=asm["PyCodec_StreamReader"];asm["PyCodec_StreamReader"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_StreamReader.apply(null,arguments)};var real__PyCodec_StreamWriter=asm["PyCodec_StreamWriter"];asm["PyCodec_StreamWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_StreamWriter.apply(null,arguments)};var real___PyCodec_LookupTextEncoding=asm["_PyCodec_LookupTextEncoding"];asm["_PyCodec_LookupTextEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCodec_LookupTextEncoding.apply(null,arguments)};var real__PyCodec_RegisterError=asm["PyCodec_RegisterError"];asm["PyCodec_RegisterError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_RegisterError.apply(null,arguments)};var real__PyCodec_IgnoreErrors=asm["PyCodec_IgnoreErrors"];asm["PyCodec_IgnoreErrors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_IgnoreErrors.apply(null,arguments)};var real__PyCodec_ReplaceErrors=asm["PyCodec_ReplaceErrors"];asm["PyCodec_ReplaceErrors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_ReplaceErrors.apply(null,arguments)};var real__PyCodec_XMLCharRefReplaceErrors=asm["PyCodec_XMLCharRefReplaceErrors"];asm["PyCodec_XMLCharRefReplaceErrors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_XMLCharRefReplaceErrors.apply(null,arguments)};var real__PyCodec_BackslashReplaceErrors=asm["PyCodec_BackslashReplaceErrors"];asm["PyCodec_BackslashReplaceErrors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_BackslashReplaceErrors.apply(null,arguments)};var real__PyCodec_NameReplaceErrors=asm["PyCodec_NameReplaceErrors"];asm["PyCodec_NameReplaceErrors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCodec_NameReplaceErrors.apply(null,arguments)};var real__PyAST_CompileObject=asm["PyAST_CompileObject"];asm["PyAST_CompileObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyAST_CompileObject.apply(null,arguments)};var real__PyFuture_FromASTObject=asm["PyFuture_FromASTObject"];asm["PyFuture_FromASTObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFuture_FromASTObject.apply(null,arguments)};var real__PyArena_Malloc=asm["PyArena_Malloc"];asm["PyArena_Malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyArena_Malloc.apply(null,arguments)};var real__PyArena_AddPyObject=asm["PyArena_AddPyObject"];asm["PyArena_AddPyObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyArena_AddPyObject.apply(null,arguments)};var real__PyErr_ProgramTextObject=asm["PyErr_ProgramTextObject"];asm["PyErr_ProgramTextObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_ProgramTextObject.apply(null,arguments)};var real__PyParser_SimpleParseStringFlagsFilename=asm["PyParser_SimpleParseStringFlagsFilename"];asm["PyParser_SimpleParseStringFlagsFilename"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_SimpleParseStringFlagsFilename.apply(null,arguments)};var real__PyOS_strtoul=asm["PyOS_strtoul"];asm["PyOS_strtoul"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_strtoul.apply(null,arguments)};var real__PyOS_strtol=asm["PyOS_strtol"];asm["PyOS_strtol"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_strtol.apply(null,arguments)};var real__PySymtable_BuildObject=asm["PySymtable_BuildObject"];asm["PySymtable_BuildObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySymtable_BuildObject.apply(null,arguments)};var real__PySymtable_Free=asm["PySymtable_Free"];asm["PySymtable_Free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySymtable_Free.apply(null,arguments)};var real__PyAST_CompileEx=asm["PyAST_CompileEx"];asm["PyAST_CompileEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyAST_CompileEx.apply(null,arguments)};var real__PyNode_Compile=asm["PyNode_Compile"];asm["PyNode_Compile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyNode_Compile.apply(null,arguments)};var real__PyArena_New=asm["PyArena_New"];asm["PyArena_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyArena_New.apply(null,arguments)};var real__PyArena_Free=asm["PyArena_Free"];asm["PyArena_Free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyArena_Free.apply(null,arguments)};var real__PyCompile_OpcodeStackEffectWithJump=asm["PyCompile_OpcodeStackEffectWithJump"];asm["PyCompile_OpcodeStackEffectWithJump"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCompile_OpcodeStackEffectWithJump.apply(null,arguments)};var real__PyCompile_OpcodeStackEffect=asm["PyCompile_OpcodeStackEffect"];asm["PyCompile_OpcodeStackEffect"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCompile_OpcodeStackEffect.apply(null,arguments)};var real__PyAST_Compile=asm["PyAST_Compile"];asm["PyAST_Compile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyAST_Compile.apply(null,arguments)};var real__PySymtable_Lookup=asm["PySymtable_Lookup"];asm["PySymtable_Lookup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySymtable_Lookup.apply(null,arguments)};var real__PyST_GetScope=asm["PyST_GetScope"];asm["PyST_GetScope"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyST_GetScope.apply(null,arguments)};var real__PyCode_Optimize=asm["PyCode_Optimize"];asm["PyCode_Optimize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCode_Optimize.apply(null,arguments)};var real___PyContext_NewHamtForTests=asm["_PyContext_NewHamtForTests"];asm["_PyContext_NewHamtForTests"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyContext_NewHamtForTests.apply(null,arguments)};var real__PyContext_New=asm["PyContext_New"];asm["PyContext_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyContext_New.apply(null,arguments)};var real__PyContext_Copy=asm["PyContext_Copy"];asm["PyContext_Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyContext_Copy.apply(null,arguments)};var real__PyContext_CopyCurrent=asm["PyContext_CopyCurrent"];asm["PyContext_CopyCurrent"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyContext_CopyCurrent.apply(null,arguments)};var real__PyContext_Enter=asm["PyContext_Enter"];asm["PyContext_Enter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyContext_Enter.apply(null,arguments)};var real__PyContext_Exit=asm["PyContext_Exit"];asm["PyContext_Exit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyContext_Exit.apply(null,arguments)};var real__PyContextVar_New=asm["PyContextVar_New"];asm["PyContextVar_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyContextVar_New.apply(null,arguments)};var real__PyContextVar_Get=asm["PyContextVar_Get"];asm["PyContextVar_Get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyContextVar_Get.apply(null,arguments)};var real__PyContextVar_Set=asm["PyContextVar_Set"];asm["PyContextVar_Set"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyContextVar_Set.apply(null,arguments)};var real__PyContextVar_Reset=asm["PyContextVar_Reset"];asm["PyContextVar_Reset"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyContextVar_Reset.apply(null,arguments)};var real___PyHamt_New=asm["_PyHamt_New"];asm["_PyHamt_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyHamt_New.apply(null,arguments)};var real___PyHamt_Find=asm["_PyHamt_Find"];asm["_PyHamt_Find"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyHamt_Find.apply(null,arguments)};var real__PyThreadState_Get=asm["PyThreadState_Get"];asm["PyThreadState_Get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThreadState_Get.apply(null,arguments)};var real___PyHamt_Assoc=asm["_PyHamt_Assoc"];asm["_PyHamt_Assoc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyHamt_Assoc.apply(null,arguments)};var real___PyHamt_Without=asm["_PyHamt_Without"];asm["_PyHamt_Without"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyHamt_Without.apply(null,arguments)};var real___PyHamt_Eq=asm["_PyHamt_Eq"];asm["_PyHamt_Eq"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyHamt_Eq.apply(null,arguments)};var real___PyHamt_NewIterKeys=asm["_PyHamt_NewIterKeys"];asm["_PyHamt_NewIterKeys"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyHamt_NewIterKeys.apply(null,arguments)};var real___PyContext_Fini=asm["_PyContext_Fini"];asm["_PyContext_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyContext_Fini.apply(null,arguments)};var real___PyHamt_Fini=asm["_PyHamt_Fini"];asm["_PyHamt_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyHamt_Fini.apply(null,arguments)};var real___PyContext_Init=asm["_PyContext_Init"];asm["_PyContext_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyContext_Init.apply(null,arguments)};var real___PyHamt_Init=asm["_PyHamt_Init"];asm["_PyHamt_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyHamt_Init.apply(null,arguments)};var real___PyHamt_Len=asm["_PyHamt_Len"];asm["_PyHamt_Len"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyHamt_Len.apply(null,arguments)};var real___PyHamt_NewIterItems=asm["_PyHamt_NewIterItems"];asm["_PyHamt_NewIterItems"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyHamt_NewIterItems.apply(null,arguments)};var real___PyHamt_NewIterValues=asm["_PyHamt_NewIterValues"];asm["_PyHamt_NewIterValues"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyHamt_NewIterValues.apply(null,arguments)};var real__fcntl=asm["fcntl"];asm["fcntl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fcntl.apply(null,arguments)};var real___PyImport_FindSharedFuncptr=asm["_PyImport_FindSharedFuncptr"];asm["_PyImport_FindSharedFuncptr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_FindSharedFuncptr.apply(null,arguments)};var real__PyErr_GetExcInfo=asm["PyErr_GetExcInfo"];asm["PyErr_GetExcInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_GetExcInfo.apply(null,arguments)};var real__PyErr_SetExcInfo=asm["PyErr_SetExcInfo"];asm["PyErr_SetExcInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SetExcInfo.apply(null,arguments)};var real__PyErr_SetFromErrnoWithFilename=asm["PyErr_SetFromErrnoWithFilename"];asm["PyErr_SetFromErrnoWithFilename"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SetFromErrnoWithFilename.apply(null,arguments)};var real__PyErr_SetImportErrorSubclass=asm["PyErr_SetImportErrorSubclass"];asm["PyErr_SetImportErrorSubclass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SetImportErrorSubclass.apply(null,arguments)};var real__PyErr_BadInternalCall=asm["PyErr_BadInternalCall"];asm["PyErr_BadInternalCall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_BadInternalCall.apply(null,arguments)};var real__PyErr_FormatV=asm["PyErr_FormatV"];asm["PyErr_FormatV"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_FormatV.apply(null,arguments)};var real__PyErr_NewExceptionWithDoc=asm["PyErr_NewExceptionWithDoc"];asm["PyErr_NewExceptionWithDoc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_NewExceptionWithDoc.apply(null,arguments)};var real___PyErr_Init=asm["_PyErr_Init"];asm["_PyErr_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_Init.apply(null,arguments)};var real___PyErr_WriteUnraisableDefaultHook=asm["_PyErr_WriteUnraisableDefaultHook"];asm["_PyErr_WriteUnraisableDefaultHook"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_WriteUnraisableDefaultHook.apply(null,arguments)};var real__PyTraceBack_Print=asm["PyTraceBack_Print"];asm["PyTraceBack_Print"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyTraceBack_Print.apply(null,arguments)};var real___PyTraceBack_FromFrame=asm["_PyTraceBack_FromFrame"];asm["_PyTraceBack_FromFrame"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTraceBack_FromFrame.apply(null,arguments)};var real__PyErr_SyntaxLocation=asm["PyErr_SyntaxLocation"];asm["PyErr_SyntaxLocation"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SyntaxLocation.apply(null,arguments)};var real__PyErr_SyntaxLocationEx=asm["PyErr_SyntaxLocationEx"];asm["PyErr_SyntaxLocationEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SyntaxLocationEx.apply(null,arguments)};var real__PyErr_SyntaxLocationObject=asm["PyErr_SyntaxLocationObject"];asm["PyErr_SyntaxLocationObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_SyntaxLocationObject.apply(null,arguments)};var real___Py_fopen_obj=asm["_Py_fopen_obj"];asm["_Py_fopen_obj"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_fopen_obj.apply(null,arguments)};var real__PyErr_ProgramText=asm["PyErr_ProgramText"];asm["PyErr_ProgramText"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_ProgramText.apply(null,arguments)};var real___Py_fopen=asm["_Py_fopen"];asm["_Py_fopen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_fopen.apply(null,arguments)};var real__fclose=asm["fclose"];asm["fclose"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fclose.apply(null,arguments)};var real__nl_langinfo=asm["nl_langinfo"];asm["nl_langinfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__nl_langinfo.apply(null,arguments)};var real___Py_GetForceASCII=asm["_Py_GetForceASCII"];asm["_Py_GetForceASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_GetForceASCII.apply(null,arguments)};var real__setlocale=asm["setlocale"];asm["setlocale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__setlocale.apply(null,arguments)};var real__mbstowcs=asm["mbstowcs"];asm["mbstowcs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__mbstowcs.apply(null,arguments)};var real___Py_ResetForceASCII=asm["_Py_ResetForceASCII"];asm["_Py_ResetForceASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_ResetForceASCII.apply(null,arguments)};var real__mbrtowc=asm["mbrtowc"];asm["mbrtowc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__mbrtowc.apply(null,arguments)};var real__Py_DecodeLocale=asm["Py_DecodeLocale"];asm["Py_DecodeLocale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_DecodeLocale.apply(null,arguments)};var real__Py_EncodeLocale=asm["Py_EncodeLocale"];asm["Py_EncodeLocale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_EncodeLocale.apply(null,arguments)};var real___Py_EncodeLocaleRaw=asm["_Py_EncodeLocaleRaw"];asm["_Py_EncodeLocaleRaw"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_EncodeLocaleRaw.apply(null,arguments)};var real___Py_stat=asm["_Py_stat"];asm["_Py_stat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_stat.apply(null,arguments)};var real___Py_set_inheritable_async_safe=asm["_Py_set_inheritable_async_safe"];asm["_Py_set_inheritable_async_safe"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_set_inheritable_async_safe.apply(null,arguments)};var real___Py_wfopen=asm["_Py_wfopen"];asm["_Py_wfopen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_wfopen.apply(null,arguments)};var real__wcstombs=asm["wcstombs"];asm["wcstombs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcstombs.apply(null,arguments)};var real__write=asm["write"];asm["write"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__write.apply(null,arguments)};var real___Py_wgetcwd=asm["_Py_wgetcwd"];asm["_Py_wgetcwd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_wgetcwd.apply(null,arguments)};var real__wcsncpy=asm["wcsncpy"];asm["wcsncpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcsncpy.apply(null,arguments)};var real___Py_GetLocaleconvNumeric=asm["_Py_GetLocaleconvNumeric"];asm["_Py_GetLocaleconvNumeric"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_GetLocaleconvNumeric.apply(null,arguments)};var real__localeconv=asm["localeconv"];asm["localeconv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__localeconv.apply(null,arguments)};var real__PyFuture_FromAST=asm["PyFuture_FromAST"];asm["PyFuture_FromAST"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyFuture_FromAST.apply(null,arguments)};var real__PyArg_Parse=asm["PyArg_Parse"];asm["PyArg_Parse"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyArg_Parse.apply(null,arguments)};var real___PyArg_Parse_SizeT=asm["_PyArg_Parse_SizeT"];asm["_PyArg_Parse_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_Parse_SizeT.apply(null,arguments)};var real___PyArg_ParseStack=asm["_PyArg_ParseStack"];asm["_PyArg_ParseStack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_ParseStack.apply(null,arguments)};var real__PyArg_VaParse=asm["PyArg_VaParse"];asm["PyArg_VaParse"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyArg_VaParse.apply(null,arguments)};var real___PyArg_VaParse_SizeT=asm["_PyArg_VaParse_SizeT"];asm["_PyArg_VaParse_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_VaParse_SizeT.apply(null,arguments)};var real__PyArg_VaParseTupleAndKeywords=asm["PyArg_VaParseTupleAndKeywords"];asm["PyArg_VaParseTupleAndKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyArg_VaParseTupleAndKeywords.apply(null,arguments)};var real___PyArg_VaParseTupleAndKeywords_SizeT=asm["_PyArg_VaParseTupleAndKeywords_SizeT"];asm["_PyArg_VaParseTupleAndKeywords_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_VaParseTupleAndKeywords_SizeT.apply(null,arguments)};var real___PyArg_ParseTupleAndKeywordsFast=asm["_PyArg_ParseTupleAndKeywordsFast"];asm["_PyArg_ParseTupleAndKeywordsFast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_ParseTupleAndKeywordsFast.apply(null,arguments)};var real___PyArg_ParseTupleAndKeywordsFast_SizeT=asm["_PyArg_ParseTupleAndKeywordsFast_SizeT"];asm["_PyArg_ParseTupleAndKeywordsFast_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_ParseTupleAndKeywordsFast_SizeT.apply(null,arguments)};var real___PyArg_ParseStackAndKeywords=asm["_PyArg_ParseStackAndKeywords"];asm["_PyArg_ParseStackAndKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_ParseStackAndKeywords.apply(null,arguments)};var real___PyArg_VaParseTupleAndKeywordsFast=asm["_PyArg_VaParseTupleAndKeywordsFast"];asm["_PyArg_VaParseTupleAndKeywordsFast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_VaParseTupleAndKeywordsFast.apply(null,arguments)};var real___PyArg_VaParseTupleAndKeywordsFast_SizeT=asm["_PyArg_VaParseTupleAndKeywordsFast_SizeT"];asm["_PyArg_VaParseTupleAndKeywordsFast_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_VaParseTupleAndKeywordsFast_SizeT.apply(null,arguments)};var real___PyArg_UnpackStack=asm["_PyArg_UnpackStack"];asm["_PyArg_UnpackStack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_UnpackStack.apply(null,arguments)};var real___PyArg_NoPositional=asm["_PyArg_NoPositional"];asm["_PyArg_NoPositional"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_NoPositional.apply(null,arguments)};var real___PyArg_Fini=asm["_PyArg_Fini"];asm["_PyArg_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArg_Fini.apply(null,arguments)};var real__Py_GetCompiler=asm["Py_GetCompiler"];asm["Py_GetCompiler"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_GetCompiler.apply(null,arguments)};var real__Py_GetCopyright=asm["Py_GetCopyright"];asm["Py_GetCopyright"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_GetCopyright.apply(null,arguments)};var real___PyOS_ResetGetOpt=asm["_PyOS_ResetGetOpt"];asm["_PyOS_ResetGetOpt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyOS_ResetGetOpt.apply(null,arguments)};var real___PyOS_GetOpt=asm["_PyOS_GetOpt"];asm["_PyOS_GetOpt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyOS_GetOpt.apply(null,arguments)};var real__Py_GetPlatform=asm["Py_GetPlatform"];asm["Py_GetPlatform"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_GetPlatform.apply(null,arguments)};var real__Py_GetVersion=asm["Py_GetVersion"];asm["Py_GetVersion"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_GetVersion.apply(null,arguments)};var real___PyImport_Init=asm["_PyImport_Init"];asm["_PyImport_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_Init.apply(null,arguments)};var real___PyImportHooks_Init=asm["_PyImportHooks_Init"];asm["_PyImportHooks_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImportHooks_Init.apply(null,arguments)};var real___PyImportZip_Init=asm["_PyImportZip_Init"];asm["_PyImportZip_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImportZip_Init.apply(null,arguments)};var real__PySys_SetObject=asm["PySys_SetObject"];asm["PySys_SetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_SetObject.apply(null,arguments)};var real__PySys_GetObject=asm["PySys_GetObject"];asm["PySys_GetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_GetObject.apply(null,arguments)};var real___PyImport_Fini=asm["_PyImport_Fini"];asm["_PyImport_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_Fini.apply(null,arguments)};var real___PyImport_Fini2=asm["_PyImport_Fini2"];asm["_PyImport_Fini2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_Fini2.apply(null,arguments)};var real__PyImport_GetModuleDict=asm["PyImport_GetModuleDict"];asm["PyImport_GetModuleDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_GetModuleDict.apply(null,arguments)};var real___PyImport_GetModuleId=asm["_PyImport_GetModuleId"];asm["_PyImport_GetModuleId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_GetModuleId.apply(null,arguments)};var real___PyImport_SetModule=asm["_PyImport_SetModule"];asm["_PyImport_SetModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_SetModule.apply(null,arguments)};var real___PyImport_SetModuleString=asm["_PyImport_SetModuleString"];asm["_PyImport_SetModuleString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_SetModuleString.apply(null,arguments)};var real__PyImport_Cleanup=asm["PyImport_Cleanup"];asm["PyImport_Cleanup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_Cleanup.apply(null,arguments)};var real___PyState_ClearModules=asm["_PyState_ClearModules"];asm["_PyState_ClearModules"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyState_ClearModules.apply(null,arguments)};var real__PyImport_GetMagicNumber=asm["PyImport_GetMagicNumber"];asm["PyImport_GetMagicNumber"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_GetMagicNumber.apply(null,arguments)};var real__PyImport_GetMagicTag=asm["PyImport_GetMagicTag"];asm["PyImport_GetMagicTag"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_GetMagicTag.apply(null,arguments)};var real___PyImport_FixupExtensionObject=asm["_PyImport_FixupExtensionObject"];asm["_PyImport_FixupExtensionObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_FixupExtensionObject.apply(null,arguments)};var real___PyState_AddModule=asm["_PyState_AddModule"];asm["_PyState_AddModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyState_AddModule.apply(null,arguments)};var real___PyImport_FixupBuiltin=asm["_PyImport_FixupBuiltin"];asm["_PyImport_FixupBuiltin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_FixupBuiltin.apply(null,arguments)};var real___PyImport_FindExtensionObject=asm["_PyImport_FindExtensionObject"];asm["_PyImport_FindExtensionObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_FindExtensionObject.apply(null,arguments)};var real___PyImport_FindExtensionObjectEx=asm["_PyImport_FindExtensionObjectEx"];asm["_PyImport_FindExtensionObjectEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_FindExtensionObjectEx.apply(null,arguments)};var real___PyImport_AddModuleObject=asm["_PyImport_AddModuleObject"];asm["_PyImport_AddModuleObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_AddModuleObject.apply(null,arguments)};var real___PyImport_FindBuiltin=asm["_PyImport_FindBuiltin"];asm["_PyImport_FindBuiltin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_FindBuiltin.apply(null,arguments)};var real__PyImport_AddModuleObject=asm["PyImport_AddModuleObject"];asm["PyImport_AddModuleObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_AddModuleObject.apply(null,arguments)};var real__PyImport_AddModule=asm["PyImport_AddModule"];asm["PyImport_AddModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_AddModule.apply(null,arguments)};var real__PyImport_ExecCodeModule=asm["PyImport_ExecCodeModule"];asm["PyImport_ExecCodeModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_ExecCodeModule.apply(null,arguments)};var real__PyImport_ExecCodeModuleObject=asm["PyImport_ExecCodeModuleObject"];asm["PyImport_ExecCodeModuleObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_ExecCodeModuleObject.apply(null,arguments)};var real__PyImport_ExecCodeModuleWithPathnames=asm["PyImport_ExecCodeModuleWithPathnames"];asm["PyImport_ExecCodeModuleWithPathnames"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_ExecCodeModuleWithPathnames.apply(null,arguments)};var real__PyImport_ExecCodeModuleEx=asm["PyImport_ExecCodeModuleEx"];asm["PyImport_ExecCodeModuleEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_ExecCodeModuleEx.apply(null,arguments)};var real__PyImport_GetImporter=asm["PyImport_GetImporter"];asm["PyImport_GetImporter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_GetImporter.apply(null,arguments)};var real__PyImport_ImportFrozenModuleObject=asm["PyImport_ImportFrozenModuleObject"];asm["PyImport_ImportFrozenModuleObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_ImportFrozenModuleObject.apply(null,arguments)};var real__PyMarshal_ReadObjectFromString=asm["PyMarshal_ReadObjectFromString"];asm["PyMarshal_ReadObjectFromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMarshal_ReadObjectFromString.apply(null,arguments)};var real__PyImport_ImportFrozenModule=asm["PyImport_ImportFrozenModule"];asm["PyImport_ImportFrozenModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_ImportFrozenModule.apply(null,arguments)};var real___PyTime_GetPerfCounter=asm["_PyTime_GetPerfCounter"];asm["_PyTime_GetPerfCounter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_GetPerfCounter.apply(null,arguments)};var real___PyTime_AsMicroseconds=asm["_PyTime_AsMicroseconds"];asm["_PyTime_AsMicroseconds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_AsMicroseconds.apply(null,arguments)};var real__PyImport_ImportModuleLevel=asm["PyImport_ImportModuleLevel"];asm["PyImport_ImportModuleLevel"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_ImportModuleLevel.apply(null,arguments)};var real__PyImport_ReloadModule=asm["PyImport_ReloadModule"];asm["PyImport_ReloadModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_ReloadModule.apply(null,arguments)};var real__PyInit__imp=asm["PyInit__imp"];asm["PyInit__imp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInit__imp.apply(null,arguments)};var real__PyImport_ExtendInittab=asm["PyImport_ExtendInittab"];asm["PyImport_ExtendInittab"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyImport_ExtendInittab.apply(null,arguments)};var real___PyImport_LoadDynamicModuleWithSpec=asm["_PyImport_LoadDynamicModuleWithSpec"];asm["_PyImport_LoadDynamicModuleWithSpec"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyImport_LoadDynamicModuleWithSpec.apply(null,arguments)};var real___Py_KeyedHash=asm["_Py_KeyedHash"];asm["_Py_KeyedHash"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_KeyedHash.apply(null,arguments)};var real__asinh=asm["asinh"];asm["asinh"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__asinh.apply(null,arguments)};var real__log1p=asm["log1p"];asm["log1p"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__log1p.apply(null,arguments)};var real__cosh=asm["cosh"];asm["cosh"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__cosh.apply(null,arguments)};var real__sinh=asm["sinh"];asm["sinh"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__sinh.apply(null,arguments)};var real__tanh=asm["tanh"];asm["tanh"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__tanh.apply(null,arguments)};var real__tan=asm["tan"];asm["tan"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__tan.apply(null,arguments)};var real__acos=asm["acos"];asm["acos"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__acos.apply(null,arguments)};var real__acosh=asm["acosh"];asm["acosh"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__acosh.apply(null,arguments)};var real__asin=asm["asin"];asm["asin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__asin.apply(null,arguments)};var real__atan=asm["atan"];asm["atan"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__atan.apply(null,arguments)};var real__atanh=asm["atanh"];asm["atanh"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__atanh.apply(null,arguments)};var real__copysign=asm["copysign"];asm["copysign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__copysign.apply(null,arguments)};var real__erf=asm["erf"];asm["erf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__erf.apply(null,arguments)};var real__erfc=asm["erfc"];asm["erfc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__erfc.apply(null,arguments)};var real__expm1=asm["expm1"];asm["expm1"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__expm1.apply(null,arguments)};var real__log10=asm["log10"];asm["log10"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__log10.apply(null,arguments)};var real__log2=asm["log2"];asm["log2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__log2.apply(null,arguments)};var real___PyTime_localtime=asm["_PyTime_localtime"];asm["_PyTime_localtime"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_localtime.apply(null,arguments)};var real___PyTime_GetSystemClock=asm["_PyTime_GetSystemClock"];asm["_PyTime_GetSystemClock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_GetSystemClock.apply(null,arguments)};var real___PyTime_AsNanosecondsObject=asm["_PyTime_AsNanosecondsObject"];asm["_PyTime_AsNanosecondsObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_AsNanosecondsObject.apply(null,arguments)};var real___PyTime_FromTimespec=asm["_PyTime_FromTimespec"];asm["_PyTime_FromTimespec"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_FromTimespec.apply(null,arguments)};var real___PyTime_AsTimespec=asm["_PyTime_AsTimespec"];asm["_PyTime_AsTimespec"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_AsTimespec.apply(null,arguments)};var real___PyTime_FromNanosecondsObject=asm["_PyTime_FromNanosecondsObject"];asm["_PyTime_FromNanosecondsObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_FromNanosecondsObject.apply(null,arguments)};var real__select=asm["select"];asm["select"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__select.apply(null,arguments)};var real___PyTime_ObjectToTime_t=asm["_PyTime_ObjectToTime_t"];asm["_PyTime_ObjectToTime_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_ObjectToTime_t.apply(null,arguments)};var real___PyTime_gmtime=asm["_PyTime_gmtime"];asm["_PyTime_gmtime"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_gmtime.apply(null,arguments)};var real___PyTime_GetPerfCounterWithInfo=asm["_PyTime_GetPerfCounterWithInfo"];asm["_PyTime_GetPerfCounterWithInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_GetPerfCounterWithInfo.apply(null,arguments)};var real___PyTime_GetSystemClockWithInfo=asm["_PyTime_GetSystemClockWithInfo"];asm["_PyTime_GetSystemClockWithInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_GetSystemClockWithInfo.apply(null,arguments)};var real___PyTime_GetMonotonicClockWithInfo=asm["_PyTime_GetMonotonicClockWithInfo"];asm["_PyTime_GetMonotonicClockWithInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_GetMonotonicClockWithInfo.apply(null,arguments)};var real__getrusage=asm["getrusage"];asm["getrusage"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getrusage.apply(null,arguments)};var real___PyTime_FromTimeval=asm["_PyTime_FromTimeval"];asm["_PyTime_FromTimeval"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_FromTimeval.apply(null,arguments)};var real___PyTime_MulDiv=asm["_PyTime_MulDiv"];asm["_PyTime_MulDiv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_MulDiv.apply(null,arguments)};var real__getpid=asm["getpid"];asm["getpid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getpid.apply(null,arguments)};var real__getsockname=asm["getsockname"];asm["getsockname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getsockname.apply(null,arguments)};var real__socket=asm["socket"];asm["socket"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__socket.apply(null,arguments)};var real__getsockopt=asm["getsockopt"];asm["getsockopt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getsockopt.apply(null,arguments)};var real___PyTime_FromSeconds=asm["_PyTime_FromSeconds"];asm["_PyTime_FromSeconds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_FromSeconds.apply(null,arguments)};var real__bind=asm["bind"];asm["bind"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__bind.apply(null,arguments)};var real__listen=asm["listen"];asm["listen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__listen.apply(null,arguments)};var real___PyTime_AsMilliseconds=asm["_PyTime_AsMilliseconds"];asm["_PyTime_AsMilliseconds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_AsMilliseconds.apply(null,arguments)};var real__setsockopt=asm["setsockopt"];asm["setsockopt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__setsockopt.apply(null,arguments)};var real__shutdown=asm["shutdown"];asm["shutdown"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__shutdown.apply(null,arguments)};var real__accept=asm["accept"];asm["accept"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__accept.apply(null,arguments)};var real__inet_ntop=asm["inet_ntop"];asm["inet_ntop"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inet_ntop.apply(null,arguments)};var real__ntohs=asm["ntohs"];asm["ntohs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ntohs.apply(null,arguments)};var real___PyTime_AsTimeval_noraise=asm["_PyTime_AsTimeval_noraise"];asm["_PyTime_AsTimeval_noraise"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_AsTimeval_noraise.apply(null,arguments)};var real__htons=asm["htons"];asm["htons"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__htons.apply(null,arguments)};var real__freeaddrinfo=asm["freeaddrinfo"];asm["freeaddrinfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__freeaddrinfo.apply(null,arguments)};var real__inet_pton=asm["inet_pton"];asm["inet_pton"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inet_pton.apply(null,arguments)};var real__connect=asm["connect"];asm["connect"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__connect.apply(null,arguments)};var real__recv=asm["recv"];asm["recv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__recv.apply(null,arguments)};var real__recvfrom=asm["recvfrom"];asm["recvfrom"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__recvfrom.apply(null,arguments)};var real__send=asm["send"];asm["send"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__send.apply(null,arguments)};var real__sendto=asm["sendto"];asm["sendto"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__sendto.apply(null,arguments)};var real__recvmsg=asm["recvmsg"];asm["recvmsg"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__recvmsg.apply(null,arguments)};var real__sendmsg=asm["sendmsg"];asm["sendmsg"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__sendmsg.apply(null,arguments)};var real__gethostname=asm["gethostname"];asm["gethostname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__gethostname.apply(null,arguments)};var real__getservbyname=asm["getservbyname"];asm["getservbyname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getservbyname.apply(null,arguments)};var real__getservbyport=asm["getservbyport"];asm["getservbyport"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getservbyport.apply(null,arguments)};var real__socketpair=asm["socketpair"];asm["socketpair"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__socketpair.apply(null,arguments)};var real__ntohl=asm["ntohl"];asm["ntohl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ntohl.apply(null,arguments)};var real__htonl=asm["htonl"];asm["htonl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__htonl.apply(null,arguments)};var real__inet_aton=asm["inet_aton"];asm["inet_aton"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inet_aton.apply(null,arguments)};var real__inet_ntoa=asm["inet_ntoa"];asm["inet_ntoa"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inet_ntoa.apply(null,arguments)};var real____h_errno_location=asm["__h_errno_location"];asm["__h_errno_location"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____h_errno_location.apply(null,arguments)};var real__hstrerror=asm["hstrerror"];asm["hstrerror"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__hstrerror.apply(null,arguments)};var real___Py_strhex_bytes_with_sep=asm["_Py_strhex_bytes_with_sep"];asm["_Py_strhex_bytes_with_sep"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_strhex_bytes_with_sep.apply(null,arguments)};var real___Py_strhex=asm["_Py_strhex"];asm["_Py_strhex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_strhex.apply(null,arguments)};var real__tcgetattr=asm["tcgetattr"];asm["tcgetattr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__tcgetattr.apply(null,arguments)};var real__cfgetispeed=asm["cfgetispeed"];asm["cfgetispeed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__cfgetispeed.apply(null,arguments)};var real__cfgetospeed=asm["cfgetospeed"];asm["cfgetospeed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__cfgetospeed.apply(null,arguments)};var real__cfsetispeed=asm["cfsetispeed"];asm["cfsetispeed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__cfsetispeed.apply(null,arguments)};var real__cfsetospeed=asm["cfsetospeed"];asm["cfsetospeed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__cfsetospeed.apply(null,arguments)};var real__tcsetattr=asm["tcsetattr"];asm["tcsetattr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__tcsetattr.apply(null,arguments)};var real__tcsendbreak=asm["tcsendbreak"];asm["tcsendbreak"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__tcsendbreak.apply(null,arguments)};var real__tcdrain=asm["tcdrain"];asm["tcdrain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__tcdrain.apply(null,arguments)};var real__tcflush=asm["tcflush"];asm["tcflush"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__tcflush.apply(null,arguments)};var real__tcflow=asm["tcflow"];asm["tcflow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__tcflow.apply(null,arguments)};var real__PyModule_AddStringConstant=asm["PyModule_AddStringConstant"];asm["PyModule_AddStringConstant"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_AddStringConstant.apply(null,arguments)};var real__zlibVersion=asm["zlibVersion"];asm["zlibVersion"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__zlibVersion.apply(null,arguments)};var real__deflateEnd=asm["deflateEnd"];asm["deflateEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflateEnd.apply(null,arguments)};var real__deflate=asm["deflate"];asm["deflate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflate.apply(null,arguments)};var real__inflateEnd=asm["inflateEnd"];asm["inflateEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateEnd.apply(null,arguments)};var real__inflate=asm["inflate"];asm["inflate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflate.apply(null,arguments)};var real__inflateSetDictionary=asm["inflateSetDictionary"];asm["inflateSetDictionary"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateSetDictionary.apply(null,arguments)};var real__adler32=asm["adler32"];asm["adler32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__adler32.apply(null,arguments)};var real__deflateInit_=asm["deflateInit_"];asm["deflateInit_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflateInit_.apply(null,arguments)};var real__deflateInit2_=asm["deflateInit2_"];asm["deflateInit2_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflateInit2_.apply(null,arguments)};var real__deflateSetDictionary=asm["deflateSetDictionary"];asm["deflateSetDictionary"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflateSetDictionary.apply(null,arguments)};var real__crc32=asm["crc32"];asm["crc32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__crc32.apply(null,arguments)};var real__inflateInit2_=asm["inflateInit2_"];asm["inflateInit2_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateInit2_.apply(null,arguments)};var real__isalnum=asm["isalnum"];asm["isalnum"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__isalnum.apply(null,arguments)};var real__tolower=asm["tolower"];asm["tolower"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__tolower.apply(null,arguments)};var real__toupper=asm["toupper"];asm["toupper"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__toupper.apply(null,arguments)};var real__PyErr_Display=asm["PyErr_Display"];asm["PyErr_Display"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_Display.apply(null,arguments)};var real___Py_PyAtExit=asm["_Py_PyAtExit"];asm["_Py_PyAtExit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_PyAtExit.apply(null,arguments)};var real__PyInterpreterState_ThreadHead=asm["PyInterpreterState_ThreadHead"];asm["PyInterpreterState_ThreadHead"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInterpreterState_ThreadHead.apply(null,arguments)};var real__PyThreadState_Next=asm["PyThreadState_Next"];asm["PyThreadState_Next"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThreadState_Next.apply(null,arguments)};var real__PyThread_acquire_lock_timed=asm["PyThread_acquire_lock_timed"];asm["PyThread_acquire_lock_timed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_acquire_lock_timed.apply(null,arguments)};var real___PyThreadState_Prealloc=asm["_PyThreadState_Prealloc"];asm["_PyThreadState_Prealloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyThreadState_Prealloc.apply(null,arguments)};var real__PyThread_start_new_thread=asm["PyThread_start_new_thread"];asm["PyThread_start_new_thread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_start_new_thread.apply(null,arguments)};var real__PyThreadState_Clear=asm["PyThreadState_Clear"];asm["PyThreadState_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThreadState_Clear.apply(null,arguments)};var real__PyThread_get_stacksize=asm["PyThread_get_stacksize"];asm["PyThread_get_stacksize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_get_stacksize.apply(null,arguments)};var real__PyThread_set_stacksize=asm["PyThread_set_stacksize"];asm["PyThread_set_stacksize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_set_stacksize.apply(null,arguments)};var real___PyThreadState_Init=asm["_PyThreadState_Init"];asm["_PyThreadState_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyThreadState_Init.apply(null,arguments)};var real__PyThreadState_DeleteCurrent=asm["PyThreadState_DeleteCurrent"];asm["PyThreadState_DeleteCurrent"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThreadState_DeleteCurrent.apply(null,arguments)};var real___PyErr_Display=asm["_PyErr_Display"];asm["_PyErr_Display"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyErr_Display.apply(null,arguments)};var real__wcscoll=asm["wcscoll"];asm["wcscoll"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcscoll.apply(null,arguments)};var real__wcsxfrm=asm["wcsxfrm"];asm["wcsxfrm"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcsxfrm.apply(null,arguments)};var real__gettext=asm["gettext"];asm["gettext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__gettext.apply(null,arguments)};var real__dgettext=asm["dgettext"];asm["dgettext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__dgettext.apply(null,arguments)};var real__dcgettext=asm["dcgettext"];asm["dcgettext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__dcgettext.apply(null,arguments)};var real__textdomain=asm["textdomain"];asm["textdomain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__textdomain.apply(null,arguments)};var real__bindtextdomain=asm["bindtextdomain"];asm["bindtextdomain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__bindtextdomain.apply(null,arguments)};var real__bind_textdomain_codeset=asm["bind_textdomain_codeset"];asm["bind_textdomain_codeset"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__bind_textdomain_codeset.apply(null,arguments)};var real__PyState_FindModule=asm["PyState_FindModule"];asm["PyState_FindModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyState_FindModule.apply(null,arguments)};var real___PySys_GetSizeOf=asm["_PySys_GetSizeOf"];asm["_PySys_GetSizeOf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySys_GetSizeOf.apply(null,arguments)};var real___PyThreadState_UncheckedGet=asm["_PyThreadState_UncheckedGet"];asm["_PyThreadState_UncheckedGet"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyThreadState_UncheckedGet.apply(null,arguments)};var real___Py_DumpTracebackThreads=asm["_Py_DumpTracebackThreads"];asm["_Py_DumpTracebackThreads"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_DumpTracebackThreads.apply(null,arguments)};var real___Py_DumpTraceback=asm["_Py_DumpTraceback"];asm["_Py_DumpTraceback"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_DumpTraceback.apply(null,arguments)};var real__getrlimit=asm["getrlimit"];asm["getrlimit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getrlimit.apply(null,arguments)};var real__setrlimit=asm["setrlimit"];asm["setrlimit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__setrlimit.apply(null,arguments)};var real___Py_SourceAsString=asm["_Py_SourceAsString"];asm["_Py_SourceAsString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_SourceAsString.apply(null,arguments)};var real___Py_SymtableStringObjectFlags=asm["_Py_SymtableStringObjectFlags"];asm["_Py_SymtableStringObjectFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_SymtableStringObjectFlags.apply(null,arguments)};var real__PyMarshal_Init=asm["PyMarshal_Init"];asm["PyMarshal_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMarshal_Init.apply(null,arguments)};var real__PyStatus_Ok=asm["PyStatus_Ok"];asm["PyStatus_Ok"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStatus_Ok.apply(null,arguments)};var real__PyStatus_Error=asm["PyStatus_Error"];asm["PyStatus_Error"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStatus_Error.apply(null,arguments)};var real__PyStatus_NoMemory=asm["PyStatus_NoMemory"];asm["PyStatus_NoMemory"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStatus_NoMemory.apply(null,arguments)};var real__PyStatus_Exit=asm["PyStatus_Exit"];asm["PyStatus_Exit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStatus_Exit.apply(null,arguments)};var real__PyStatus_IsError=asm["PyStatus_IsError"];asm["PyStatus_IsError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStatus_IsError.apply(null,arguments)};var real__PyStatus_IsExit=asm["PyStatus_IsExit"];asm["PyStatus_IsExit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStatus_IsExit.apply(null,arguments)};var real__PyStatus_Exception=asm["PyStatus_Exception"];asm["PyStatus_Exception"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyStatus_Exception.apply(null,arguments)};var real___PyWideStringList_Clear=asm["_PyWideStringList_Clear"];asm["_PyWideStringList_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyWideStringList_Clear.apply(null,arguments)};var real___PyWideStringList_Copy=asm["_PyWideStringList_Copy"];asm["_PyWideStringList_Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyWideStringList_Copy.apply(null,arguments)};var real__PyWideStringList_Insert=asm["PyWideStringList_Insert"];asm["PyWideStringList_Insert"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyWideStringList_Insert.apply(null,arguments)};var real__PyWideStringList_Append=asm["PyWideStringList_Append"];asm["PyWideStringList_Append"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyWideStringList_Append.apply(null,arguments)};var real___PyWideStringList_Extend=asm["_PyWideStringList_Extend"];asm["_PyWideStringList_Extend"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyWideStringList_Extend.apply(null,arguments)};var real___PyWideStringList_AsList=asm["_PyWideStringList_AsList"];asm["_PyWideStringList_AsList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyWideStringList_AsList.apply(null,arguments)};var real__Py_SetStandardStreamEncoding=asm["Py_SetStandardStreamEncoding"];asm["Py_SetStandardStreamEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_SetStandardStreamEncoding.apply(null,arguments)};var real___Py_ClearStandardStreamEncoding=asm["_Py_ClearStandardStreamEncoding"];asm["_Py_ClearStandardStreamEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_ClearStandardStreamEncoding.apply(null,arguments)};var real___Py_ClearArgcArgv=asm["_Py_ClearArgcArgv"];asm["_Py_ClearArgcArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_ClearArgcArgv.apply(null,arguments)};var real__Py_GetArgcArgv=asm["Py_GetArgcArgv"];asm["Py_GetArgcArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_GetArgcArgv.apply(null,arguments)};var real__PyConfig_Clear=asm["PyConfig_Clear"];asm["PyConfig_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyConfig_Clear.apply(null,arguments)};var real___PyConfig_InitCompatConfig=asm["_PyConfig_InitCompatConfig"];asm["_PyConfig_InitCompatConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyConfig_InitCompatConfig.apply(null,arguments)};var real__PyConfig_InitPythonConfig=asm["PyConfig_InitPythonConfig"];asm["PyConfig_InitPythonConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyConfig_InitPythonConfig.apply(null,arguments)};var real__PyConfig_InitIsolatedConfig=asm["PyConfig_InitIsolatedConfig"];asm["PyConfig_InitIsolatedConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyConfig_InitIsolatedConfig.apply(null,arguments)};var real__PyConfig_SetString=asm["PyConfig_SetString"];asm["PyConfig_SetString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyConfig_SetString.apply(null,arguments)};var real__PyConfig_SetBytesString=asm["PyConfig_SetBytesString"];asm["PyConfig_SetBytesString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyConfig_SetBytesString.apply(null,arguments)};var real___PyConfig_Copy=asm["_PyConfig_Copy"];asm["_PyConfig_Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyConfig_Copy.apply(null,arguments)};var real___PyConfig_Write=asm["_PyConfig_Write"];asm["_PyConfig_Write"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyConfig_Write.apply(null,arguments)};var real___PyConfig_SetPyArgv=asm["_PyConfig_SetPyArgv"];asm["_PyConfig_SetPyArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyConfig_SetPyArgv.apply(null,arguments)};var real__PyConfig_SetBytesArgv=asm["PyConfig_SetBytesArgv"];asm["PyConfig_SetBytesArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyConfig_SetBytesArgv.apply(null,arguments)};var real__PyConfig_SetArgv=asm["PyConfig_SetArgv"];asm["PyConfig_SetArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyConfig_SetArgv.apply(null,arguments)};var real__PyConfig_SetWideStringList=asm["PyConfig_SetWideStringList"];asm["PyConfig_SetWideStringList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyConfig_SetWideStringList.apply(null,arguments)};var real__PyConfig_Read=asm["PyConfig_Read"];asm["PyConfig_Read"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyConfig_Read.apply(null,arguments)};var real___Py_GetConfigsAsDict=asm["_Py_GetConfigsAsDict"];asm["_Py_GetConfigsAsDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_GetConfigsAsDict.apply(null,arguments)};var real___Py_PreInitializeFromConfig=asm["_Py_PreInitializeFromConfig"];asm["_Py_PreInitializeFromConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_PreInitializeFromConfig.apply(null,arguments)};var real__setvbuf=asm["setvbuf"];asm["setvbuf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__setvbuf.apply(null,arguments)};var real___PyArgv_AsWstrList=asm["_PyArgv_AsWstrList"];asm["_PyArgv_AsWstrList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyArgv_AsWstrList.apply(null,arguments)};var real___PyPreConfig_InitFromPreConfig=asm["_PyPreConfig_InitFromPreConfig"];asm["_PyPreConfig_InitFromPreConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPreConfig_InitFromPreConfig.apply(null,arguments)};var real___PyPreConfig_GetConfig=asm["_PyPreConfig_GetConfig"];asm["_PyPreConfig_GetConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPreConfig_GetConfig.apply(null,arguments)};var real___PyPreCmdline_Read=asm["_PyPreCmdline_Read"];asm["_PyPreCmdline_Read"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPreCmdline_Read.apply(null,arguments)};var real___PyPreCmdline_SetConfig=asm["_PyPreCmdline_SetConfig"];asm["_PyPreCmdline_SetConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPreCmdline_SetConfig.apply(null,arguments)};var real__wcschr=asm["wcschr"];asm["wcschr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcschr.apply(null,arguments)};var real__iprintf=asm["iprintf"];asm["iprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__iprintf.apply(null,arguments)};var real__wcstok=asm["wcstok"];asm["wcstok"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcstok.apply(null,arguments)};var real___PySys_ReadPreinitWarnOptions=asm["_PySys_ReadPreinitWarnOptions"];asm["_PySys_ReadPreinitWarnOptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySys_ReadPreinitWarnOptions.apply(null,arguments)};var real___PySys_ReadPreinitXOptions=asm["_PySys_ReadPreinitXOptions"];asm["_PySys_ReadPreinitXOptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySys_ReadPreinitXOptions.apply(null,arguments)};var real___Py_get_env_flag=asm["_Py_get_env_flag"];asm["_Py_get_env_flag"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_get_env_flag.apply(null,arguments)};var real___Py_GetEnv=asm["_Py_GetEnv"];asm["_Py_GetEnv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_GetEnv.apply(null,arguments)};var real__strtoul=asm["strtoul"];asm["strtoul"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strtoul.apply(null,arguments)};var real___Py_get_xoption=asm["_Py_get_xoption"];asm["_Py_get_xoption"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_get_xoption.apply(null,arguments)};var real___Py_str_to_int=asm["_Py_str_to_int"];asm["_Py_str_to_int"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_str_to_int.apply(null,arguments)};var real__wcstol=asm["wcstol"];asm["wcstol"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcstol.apply(null,arguments)};var real___PyConfig_InitPathConfig=asm["_PyConfig_InitPathConfig"];asm["_PyConfig_InitPathConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyConfig_InitPathConfig.apply(null,arguments)};var real___Py_IsLocaleCoercionTarget=asm["_Py_IsLocaleCoercionTarget"];asm["_Py_IsLocaleCoercionTarget"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_IsLocaleCoercionTarget.apply(null,arguments)};var real___PyPreCmdline_Clear=asm["_PyPreCmdline_Clear"];asm["_PyPreCmdline_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPreCmdline_Clear.apply(null,arguments)};var real___PyPreConfig_AsDict=asm["_PyPreConfig_AsDict"];asm["_PyPreConfig_AsDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPreConfig_AsDict.apply(null,arguments)};var real__PyMarshal_WriteLongToFile=asm["PyMarshal_WriteLongToFile"];asm["PyMarshal_WriteLongToFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMarshal_WriteLongToFile.apply(null,arguments)};var real__PyMarshal_WriteObjectToFile=asm["PyMarshal_WriteObjectToFile"];asm["PyMarshal_WriteObjectToFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMarshal_WriteObjectToFile.apply(null,arguments)};var real__PyMarshal_ReadShortFromFile=asm["PyMarshal_ReadShortFromFile"];asm["PyMarshal_ReadShortFromFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMarshal_ReadShortFromFile.apply(null,arguments)};var real__PyMarshal_ReadLongFromFile=asm["PyMarshal_ReadLongFromFile"];asm["PyMarshal_ReadLongFromFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMarshal_ReadLongFromFile.apply(null,arguments)};var real__PyMarshal_ReadLastObjectFromFile=asm["PyMarshal_ReadLastObjectFromFile"];asm["PyMarshal_ReadLastObjectFromFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMarshal_ReadLastObjectFromFile.apply(null,arguments)};var real__fread=asm["fread"];asm["fread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fread.apply(null,arguments)};var real__PyMarshal_ReadObjectFromFile=asm["PyMarshal_ReadObjectFromFile"];asm["PyMarshal_ReadObjectFromFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMarshal_ReadObjectFromFile.apply(null,arguments)};var real__PyMarshal_WriteObjectToString=asm["PyMarshal_WriteObjectToString"];asm["PyMarshal_WriteObjectToString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyMarshal_WriteObjectToString.apply(null,arguments)};var real__Py_VaBuildValue=asm["Py_VaBuildValue"];asm["Py_VaBuildValue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_VaBuildValue.apply(null,arguments)};var real___Py_VaBuildValue_SizeT=asm["_Py_VaBuildValue_SizeT"];asm["_Py_VaBuildValue_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_VaBuildValue_SizeT.apply(null,arguments)};var real__vsnprintf=asm["vsnprintf"];asm["vsnprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__vsnprintf.apply(null,arguments)};var real__PyOS_vsnprintf=asm["PyOS_vsnprintf"];asm["PyOS_vsnprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_vsnprintf.apply(null,arguments)};var real___PyPathConfig_SetGlobal=asm["_PyPathConfig_SetGlobal"];asm["_PyPathConfig_SetGlobal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPathConfig_SetGlobal.apply(null,arguments)};var real___PyPathConfig_ClearGlobal=asm["_PyPathConfig_ClearGlobal"];asm["_PyPathConfig_ClearGlobal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPathConfig_ClearGlobal.apply(null,arguments)};var real___PyConfig_SetPathConfig=asm["_PyConfig_SetPathConfig"];asm["_PyConfig_SetPathConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyConfig_SetPathConfig.apply(null,arguments)};var real___Py_FindEnvConfigValue=asm["_Py_FindEnvConfigValue"];asm["_Py_FindEnvConfigValue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_FindEnvConfigValue.apply(null,arguments)};var real__wcscat=asm["wcscat"];asm["wcscat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcscat.apply(null,arguments)};var real__wcscpy=asm["wcscpy"];asm["wcscpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcscpy.apply(null,arguments)};var real__wcsncat=asm["wcsncat"];asm["wcsncat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcsncat.apply(null,arguments)};var real__Py_SetPath=asm["Py_SetPath"];asm["Py_SetPath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_SetPath.apply(null,arguments)};var real__Py_GetProgramName=asm["Py_GetProgramName"];asm["Py_GetProgramName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_GetProgramName.apply(null,arguments)};var real__Py_SetPythonHome=asm["Py_SetPythonHome"];asm["Py_SetPythonHome"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_SetPythonHome.apply(null,arguments)};var real__Py_SetProgramName=asm["Py_SetProgramName"];asm["Py_SetProgramName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_SetProgramName.apply(null,arguments)};var real___Py_SetProgramFullPath=asm["_Py_SetProgramFullPath"];asm["_Py_SetProgramFullPath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_SetProgramFullPath.apply(null,arguments)};var real__Py_GetPath=asm["Py_GetPath"];asm["Py_GetPath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_GetPath.apply(null,arguments)};var real__Py_ExitStatusException=asm["Py_ExitStatusException"];asm["Py_ExitStatusException"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_ExitStatusException.apply(null,arguments)};var real__Py_GetPrefix=asm["Py_GetPrefix"];asm["Py_GetPrefix"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_GetPrefix.apply(null,arguments)};var real__Py_GetExecPrefix=asm["Py_GetExecPrefix"];asm["Py_GetExecPrefix"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_GetExecPrefix.apply(null,arguments)};var real__Py_GetProgramFullPath=asm["Py_GetProgramFullPath"];asm["Py_GetProgramFullPath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_GetProgramFullPath.apply(null,arguments)};var real__Py_GetPythonHome=asm["Py_GetPythonHome"];asm["Py_GetPythonHome"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_GetPythonHome.apply(null,arguments)};var real___PyPathConfig_ComputeSysPath0=asm["_PyPathConfig_ComputeSysPath0"];asm["_PyPathConfig_ComputeSysPath0"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPathConfig_ComputeSysPath0.apply(null,arguments)};var real__wcsrchr=asm["wcsrchr"];asm["wcsrchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcsrchr.apply(null,arguments)};var real__fseek=asm["fseek"];asm["fseek"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fseek.apply(null,arguments)};var real__feof=asm["feof"];asm["feof"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__feof.apply(null,arguments)};var real___Py_ClearFileSystemEncoding=asm["_Py_ClearFileSystemEncoding"];asm["_Py_ClearFileSystemEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_ClearFileSystemEncoding.apply(null,arguments)};var real___PyPreCmdline_SetArgv=asm["_PyPreCmdline_SetArgv"];asm["_PyPreCmdline_SetArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPreCmdline_SetArgv.apply(null,arguments)};var real__wcsncmp=asm["wcsncmp"];asm["wcsncmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcsncmp.apply(null,arguments)};var real___PyPreConfig_InitCompatConfig=asm["_PyPreConfig_InitCompatConfig"];asm["_PyPreConfig_InitCompatConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPreConfig_InitCompatConfig.apply(null,arguments)};var real__PyPreConfig_InitPythonConfig=asm["PyPreConfig_InitPythonConfig"];asm["PyPreConfig_InitPythonConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyPreConfig_InitPythonConfig.apply(null,arguments)};var real__PyPreConfig_InitIsolatedConfig=asm["PyPreConfig_InitIsolatedConfig"];asm["PyPreConfig_InitIsolatedConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyPreConfig_InitIsolatedConfig.apply(null,arguments)};var real___PyPreConfig_InitFromConfig=asm["_PyPreConfig_InitFromConfig"];asm["_PyPreConfig_InitFromConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPreConfig_InitFromConfig.apply(null,arguments)};var real___PyPreConfig_Read=asm["_PyPreConfig_Read"];asm["_PyPreConfig_Read"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPreConfig_Read.apply(null,arguments)};var real___PyRuntime_Initialize=asm["_PyRuntime_Initialize"];asm["_PyRuntime_Initialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyRuntime_Initialize.apply(null,arguments)};var real___Py_SetLocaleFromEnv=asm["_Py_SetLocaleFromEnv"];asm["_Py_SetLocaleFromEnv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_SetLocaleFromEnv.apply(null,arguments)};var real___Py_LegacyLocaleDetected=asm["_Py_LegacyLocaleDetected"];asm["_Py_LegacyLocaleDetected"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_LegacyLocaleDetected.apply(null,arguments)};var real___Py_CoerceLegacyLocale=asm["_Py_CoerceLegacyLocale"];asm["_Py_CoerceLegacyLocale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_CoerceLegacyLocale.apply(null,arguments)};var real___PyPreConfig_Write=asm["_PyPreConfig_Write"];asm["_PyPreConfig_Write"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyPreConfig_Write.apply(null,arguments)};var real___PyHash_Fini=asm["_PyHash_Fini"];asm["_PyHash_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyHash_Fini.apply(null,arguments)};var real__PyHash_GetFuncDef=asm["PyHash_GetFuncDef"];asm["PyHash_GetFuncDef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyHash_GetFuncDef.apply(null,arguments)};var real___PyRuntimeState_Init=asm["_PyRuntimeState_Init"];asm["_PyRuntimeState_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyRuntimeState_Init.apply(null,arguments)};var real___PyRuntime_Finalize=asm["_PyRuntime_Finalize"];asm["_PyRuntime_Finalize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyRuntime_Finalize.apply(null,arguments)};var real___PyRuntimeState_Fini=asm["_PyRuntimeState_Fini"];asm["_PyRuntimeState_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyRuntimeState_Fini.apply(null,arguments)};var real__PyModule_GetWarningsModule=asm["PyModule_GetWarningsModule"];asm["PyModule_GetWarningsModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyModule_GetWarningsModule.apply(null,arguments)};var real___Py_IsCoreInitialized=asm["_Py_IsCoreInitialized"];asm["_Py_IsCoreInitialized"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_IsCoreInitialized.apply(null,arguments)};var real___Py_PreInitializeFromPyArgv=asm["_Py_PreInitializeFromPyArgv"];asm["_Py_PreInitializeFromPyArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_PreInitializeFromPyArgv.apply(null,arguments)};var real__Py_PreInitializeFromBytesArgs=asm["Py_PreInitializeFromBytesArgs"];asm["Py_PreInitializeFromBytesArgs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_PreInitializeFromBytesArgs.apply(null,arguments)};var real__Py_PreInitializeFromArgs=asm["Py_PreInitializeFromArgs"];asm["Py_PreInitializeFromArgs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_PreInitializeFromArgs.apply(null,arguments)};var real__Py_PreInitialize=asm["Py_PreInitialize"];asm["Py_PreInitialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_PreInitialize.apply(null,arguments)};var real___Py_InitializeMain=asm["_Py_InitializeMain"];asm["_Py_InitializeMain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_InitializeMain.apply(null,arguments)};var real___PyTime_Init=asm["_PyTime_Init"];asm["_PyTime_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_Init.apply(null,arguments)};var real___PySys_InitMain=asm["_PySys_InitMain"];asm["_PySys_InitMain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySys_InitMain.apply(null,arguments)};var real__Py_InitializeFromConfig=asm["Py_InitializeFromConfig"];asm["Py_InitializeFromConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_InitializeFromConfig.apply(null,arguments)};var real___PyInterpreterState_Enable=asm["_PyInterpreterState_Enable"];asm["_PyInterpreterState_Enable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyInterpreterState_Enable.apply(null,arguments)};var real__PyInterpreterState_New=asm["PyInterpreterState_New"];asm["PyInterpreterState_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInterpreterState_New.apply(null,arguments)};var real__PyThreadState_New=asm["PyThreadState_New"];asm["PyThreadState_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThreadState_New.apply(null,arguments)};var real__PyThreadState_Swap=asm["PyThreadState_Swap"];asm["PyThreadState_Swap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThreadState_Swap.apply(null,arguments)};var real___PyGILState_Init=asm["_PyGILState_Init"];asm["_PyGILState_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGILState_Init.apply(null,arguments)};var real___PySys_Create=asm["_PySys_Create"];asm["_PySys_Create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySys_Create.apply(null,arguments)};var real__Py_CompileStringObject=asm["Py_CompileStringObject"];asm["Py_CompileStringObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_CompileStringObject.apply(null,arguments)};var real__PyRun_StringFlags=asm["PyRun_StringFlags"];asm["PyRun_StringFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_StringFlags.apply(null,arguments)};var real__Py_Initialize=asm["Py_Initialize"];asm["Py_Initialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_Initialize.apply(null,arguments)};var real__Py_FinalizeEx=asm["Py_FinalizeEx"];asm["Py_FinalizeEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_FinalizeEx.apply(null,arguments)};var real___PySys_ClearAuditHooks=asm["_PySys_ClearAuditHooks"];asm["_PySys_ClearAuditHooks"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySys_ClearAuditHooks.apply(null,arguments)};var real__PyInterpreterState_Clear=asm["PyInterpreterState_Clear"];asm["PyInterpreterState_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInterpreterState_Clear.apply(null,arguments)};var real___PyGILState_Fini=asm["_PyGILState_Fini"];asm["_PyGILState_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGILState_Fini.apply(null,arguments)};var real__PyInterpreterState_Delete=asm["PyInterpreterState_Delete"];asm["PyInterpreterState_Delete"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInterpreterState_Delete.apply(null,arguments)};var real__Py_Finalize=asm["Py_Finalize"];asm["Py_Finalize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_Finalize.apply(null,arguments)};var real__Py_NewInterpreter=asm["Py_NewInterpreter"];asm["Py_NewInterpreter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_NewInterpreter.apply(null,arguments)};var real___PySys_SetPreliminaryStderr=asm["_PySys_SetPreliminaryStderr"];asm["_PySys_SetPreliminaryStderr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySys_SetPreliminaryStderr.apply(null,arguments)};var real__PyErr_PrintEx=asm["PyErr_PrintEx"];asm["PyErr_PrintEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyErr_PrintEx.apply(null,arguments)};var real__PyThreadState_Delete=asm["PyThreadState_Delete"];asm["PyThreadState_Delete"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThreadState_Delete.apply(null,arguments)};var real__Py_EndInterpreter=asm["Py_EndInterpreter"];asm["Py_EndInterpreter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_EndInterpreter.apply(null,arguments)};var real__Py_AtExit=asm["Py_AtExit"];asm["Py_AtExit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_AtExit.apply(null,arguments)};var real__Py_Exit=asm["Py_Exit"];asm["Py_Exit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_Exit.apply(null,arguments)};var real___Py_RestoreSignals=asm["_Py_RestoreSignals"];asm["_Py_RestoreSignals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_RestoreSignals.apply(null,arguments)};var real__Py_FdIsInteractive=asm["Py_FdIsInteractive"];asm["Py_FdIsInteractive"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_FdIsInteractive.apply(null,arguments)};var real___PySys_SetObjectId=asm["_PySys_SetObjectId"];asm["_PySys_SetObjectId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PySys_SetObjectId.apply(null,arguments)};var real__PyOS_mystrnicmp=asm["PyOS_mystrnicmp"];asm["PyOS_mystrnicmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_mystrnicmp.apply(null,arguments)};var real___PyInterpreterState_RequiresIDRef=asm["_PyInterpreterState_RequiresIDRef"];asm["_PyInterpreterState_RequiresIDRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyInterpreterState_RequiresIDRef.apply(null,arguments)};var real___PyInterpreterState_RequireIDRef=asm["_PyInterpreterState_RequireIDRef"];asm["_PyInterpreterState_RequireIDRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyInterpreterState_RequireIDRef.apply(null,arguments)};var real___PyInterpreterState_GetMainModule=asm["_PyInterpreterState_GetMainModule"];asm["_PyInterpreterState_GetMainModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyInterpreterState_GetMainModule.apply(null,arguments)};var real__PyInterpreterState_GetDict=asm["PyInterpreterState_GetDict"];asm["PyInterpreterState_GetDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInterpreterState_GetDict.apply(null,arguments)};var real__PyState_AddModule=asm["PyState_AddModule"];asm["PyState_AddModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyState_AddModule.apply(null,arguments)};var real__PyState_RemoveModule=asm["PyState_RemoveModule"];asm["PyState_RemoveModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyState_RemoveModule.apply(null,arguments)};var real__PyThreadState_SetAsyncExc=asm["PyThreadState_SetAsyncExc"];asm["PyThreadState_SetAsyncExc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThreadState_SetAsyncExc.apply(null,arguments)};var real__PyInterpreterState_Head=asm["PyInterpreterState_Head"];asm["PyInterpreterState_Head"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInterpreterState_Head.apply(null,arguments)};var real__PyInterpreterState_Next=asm["PyInterpreterState_Next"];asm["PyInterpreterState_Next"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyInterpreterState_Next.apply(null,arguments)};var real___PyThread_CurrentFrames=asm["_PyThread_CurrentFrames"];asm["_PyThread_CurrentFrames"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyThread_CurrentFrames.apply(null,arguments)};var real___PyGILState_GetInterpreterStateUnsafe=asm["_PyGILState_GetInterpreterStateUnsafe"];asm["_PyGILState_GetInterpreterStateUnsafe"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyGILState_GetInterpreterStateUnsafe.apply(null,arguments)};var real__PyThread_tss_is_created=asm["PyThread_tss_is_created"];asm["PyThread_tss_is_created"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_tss_is_created.apply(null,arguments)};var real___PyObject_CheckCrossInterpreterData=asm["_PyObject_CheckCrossInterpreterData"];asm["_PyObject_CheckCrossInterpreterData"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_CheckCrossInterpreterData.apply(null,arguments)};var real___PyObject_GetCrossInterpreterData=asm["_PyObject_GetCrossInterpreterData"];asm["_PyObject_GetCrossInterpreterData"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyObject_GetCrossInterpreterData.apply(null,arguments)};var real___PyCrossInterpreterData_Release=asm["_PyCrossInterpreterData_Release"];asm["_PyCrossInterpreterData_Release"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCrossInterpreterData_Release.apply(null,arguments)};var real___PyCrossInterpreterData_NewObject=asm["_PyCrossInterpreterData_NewObject"];asm["_PyCrossInterpreterData_NewObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCrossInterpreterData_NewObject.apply(null,arguments)};var real___PyCrossInterpreterData_RegisterClass=asm["_PyCrossInterpreterData_RegisterClass"];asm["_PyCrossInterpreterData_RegisterClass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCrossInterpreterData_RegisterClass.apply(null,arguments)};var real___PyCrossInterpreterData_Lookup=asm["_PyCrossInterpreterData_Lookup"];asm["_PyCrossInterpreterData_Lookup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyCrossInterpreterData_Lookup.apply(null,arguments)};var real__PyOS_mystricmp=asm["PyOS_mystricmp"];asm["PyOS_mystricmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyOS_mystricmp.apply(null,arguments)};var real___Py_strhex_bytes=asm["_Py_strhex_bytes"];asm["_Py_strhex_bytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_strhex_bytes.apply(null,arguments)};var real__PyRun_AnyFileExFlags=asm["PyRun_AnyFileExFlags"];asm["PyRun_AnyFileExFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_AnyFileExFlags.apply(null,arguments)};var real__PyRun_InteractiveLoopFlags=asm["PyRun_InteractiveLoopFlags"];asm["PyRun_InteractiveLoopFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_InteractiveLoopFlags.apply(null,arguments)};var real__PyRun_SimpleFileExFlags=asm["PyRun_SimpleFileExFlags"];asm["PyRun_SimpleFileExFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_SimpleFileExFlags.apply(null,arguments)};var real__PyRun_FileExFlags=asm["PyRun_FileExFlags"];asm["PyRun_FileExFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_FileExFlags.apply(null,arguments)};var real__ftell=asm["ftell"];asm["ftell"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ftell.apply(null,arguments)};var real__rewind=asm["rewind"];asm["rewind"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__rewind.apply(null,arguments)};var real__PyParser_ASTFromFileObject=asm["PyParser_ASTFromFileObject"];asm["PyParser_ASTFromFileObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ASTFromFileObject.apply(null,arguments)};var real__PyRun_InteractiveOneObject=asm["PyRun_InteractiveOneObject"];asm["PyRun_InteractiveOneObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_InteractiveOneObject.apply(null,arguments)};var real__PyParser_ASTFromStringObject=asm["PyParser_ASTFromStringObject"];asm["PyParser_ASTFromStringObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ASTFromStringObject.apply(null,arguments)};var real___Py_HandleSystemExit=asm["_Py_HandleSystemExit"];asm["_Py_HandleSystemExit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_HandleSystemExit.apply(null,arguments)};var real__isxdigit=asm["isxdigit"];asm["isxdigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__isxdigit.apply(null,arguments)};var real__fdopen=asm["fdopen"];asm["fdopen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fdopen.apply(null,arguments)};var real__Py_CompileStringExFlags=asm["Py_CompileStringExFlags"];asm["Py_CompileStringExFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_CompileStringExFlags.apply(null,arguments)};var real__PyCompileString=asm["PyCompileString"];asm["PyCompileString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyCompileString.apply(null,arguments)};var real__Py_SymtableStringObject=asm["Py_SymtableStringObject"];asm["Py_SymtableStringObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_SymtableStringObject.apply(null,arguments)};var real__Py_SymtableString=asm["Py_SymtableString"];asm["Py_SymtableString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_SymtableString.apply(null,arguments)};var real__PyParser_ASTFromString=asm["PyParser_ASTFromString"];asm["PyParser_ASTFromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ASTFromString.apply(null,arguments)};var real__PyParser_ASTFromFile=asm["PyParser_ASTFromFile"];asm["PyParser_ASTFromFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ASTFromFile.apply(null,arguments)};var real__PyParser_SimpleParseFileFlags=asm["PyParser_SimpleParseFileFlags"];asm["PyParser_SimpleParseFileFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_SimpleParseFileFlags.apply(null,arguments)};var real__PyParser_SimpleParseStringFlags=asm["PyParser_SimpleParseStringFlags"];asm["PyParser_SimpleParseStringFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_SimpleParseStringFlags.apply(null,arguments)};var real__PyParser_ClearError=asm["PyParser_ClearError"];asm["PyParser_ClearError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_ClearError.apply(null,arguments)};var real__PyParser_SetError=asm["PyParser_SetError"];asm["PyParser_SetError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_SetError.apply(null,arguments)};var real__PyParser_SimpleParseFile=asm["PyParser_SimpleParseFile"];asm["PyParser_SimpleParseFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_SimpleParseFile.apply(null,arguments)};var real__PyParser_SimpleParseString=asm["PyParser_SimpleParseString"];asm["PyParser_SimpleParseString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyParser_SimpleParseString.apply(null,arguments)};var real__PyRun_AnyFile=asm["PyRun_AnyFile"];asm["PyRun_AnyFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_AnyFile.apply(null,arguments)};var real__PyRun_AnyFileEx=asm["PyRun_AnyFileEx"];asm["PyRun_AnyFileEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_AnyFileEx.apply(null,arguments)};var real__PyRun_AnyFileFlags=asm["PyRun_AnyFileFlags"];asm["PyRun_AnyFileFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_AnyFileFlags.apply(null,arguments)};var real__PyRun_File=asm["PyRun_File"];asm["PyRun_File"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_File.apply(null,arguments)};var real__PyRun_FileEx=asm["PyRun_FileEx"];asm["PyRun_FileEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_FileEx.apply(null,arguments)};var real__PyRun_FileFlags=asm["PyRun_FileFlags"];asm["PyRun_FileFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_FileFlags.apply(null,arguments)};var real__PyRun_SimpleFile=asm["PyRun_SimpleFile"];asm["PyRun_SimpleFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_SimpleFile.apply(null,arguments)};var real__PyRun_SimpleFileEx=asm["PyRun_SimpleFileEx"];asm["PyRun_SimpleFileEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_SimpleFileEx.apply(null,arguments)};var real__PyRun_String=asm["PyRun_String"];asm["PyRun_String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_String.apply(null,arguments)};var real__PyRun_SimpleString=asm["PyRun_SimpleString"];asm["PyRun_SimpleString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_SimpleString.apply(null,arguments)};var real__Py_CompileString=asm["Py_CompileString"];asm["Py_CompileString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_CompileString.apply(null,arguments)};var real__Py_CompileStringFlags=asm["Py_CompileStringFlags"];asm["Py_CompileStringFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__Py_CompileStringFlags.apply(null,arguments)};var real__PyRun_InteractiveOne=asm["PyRun_InteractiveOne"];asm["PyRun_InteractiveOne"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_InteractiveOne.apply(null,arguments)};var real__PyRun_InteractiveLoop=asm["PyRun_InteractiveLoop"];asm["PyRun_InteractiveLoop"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyRun_InteractiveLoop.apply(null,arguments)};var real___PyTime_ObjectToTimeval=asm["_PyTime_ObjectToTimeval"];asm["_PyTime_ObjectToTimeval"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_ObjectToTimeval.apply(null,arguments)};var real___PyTime_FromNanoseconds=asm["_PyTime_FromNanoseconds"];asm["_PyTime_FromNanoseconds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_FromNanoseconds.apply(null,arguments)};var real___PyTime_FromMillisecondsObject=asm["_PyTime_FromMillisecondsObject"];asm["_PyTime_FromMillisecondsObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_FromMillisecondsObject.apply(null,arguments)};var real___PyTime_AsTimevalTime_t=asm["_PyTime_AsTimevalTime_t"];asm["_PyTime_AsTimevalTime_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTime_AsTimevalTime_t.apply(null,arguments)};var real__PySymtable_Build=asm["PySymtable_Build"];asm["PySymtable_Build"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySymtable_Build.apply(null,arguments)};var real__PySys_AddAuditHook=asm["PySys_AddAuditHook"];asm["PySys_AddAuditHook"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_AddAuditHook.apply(null,arguments)};var real__PySys_ResetWarnOptions=asm["PySys_ResetWarnOptions"];asm["PySys_ResetWarnOptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_ResetWarnOptions.apply(null,arguments)};var real__PySys_AddWarnOptionUnicode=asm["PySys_AddWarnOptionUnicode"];asm["PySys_AddWarnOptionUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_AddWarnOptionUnicode.apply(null,arguments)};var real__PySys_AddWarnOption=asm["PySys_AddWarnOption"];asm["PySys_AddWarnOption"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_AddWarnOption.apply(null,arguments)};var real__PySys_HasWarnOptions=asm["PySys_HasWarnOptions"];asm["PySys_HasWarnOptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_HasWarnOptions.apply(null,arguments)};var real__PySys_AddXOption=asm["PySys_AddXOption"];asm["PySys_AddXOption"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_AddXOption.apply(null,arguments)};var real__PySys_GetXOptions=asm["PySys_GetXOptions"];asm["PySys_GetXOptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_GetXOptions.apply(null,arguments)};var real__PyThread_GetInfo=asm["PyThread_GetInfo"];asm["PyThread_GetInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_GetInfo.apply(null,arguments)};var real__PySys_SetPath=asm["PySys_SetPath"];asm["PySys_SetPath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_SetPath.apply(null,arguments)};var real__PySys_SetArgvEx=asm["PySys_SetArgvEx"];asm["PySys_SetArgvEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_SetArgvEx.apply(null,arguments)};var real__PySys_SetArgv=asm["PySys_SetArgv"];asm["PySys_SetArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_SetArgv.apply(null,arguments)};var real__PySys_WriteStdout=asm["PySys_WriteStdout"];asm["PySys_WriteStdout"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_WriteStdout.apply(null,arguments)};var real__PySys_FormatStdout=asm["PySys_FormatStdout"];asm["PySys_FormatStdout"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PySys_FormatStdout.apply(null,arguments)};var real__pthread_self=asm["pthread_self"];asm["pthread_self"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_self.apply(null,arguments)};var real__pthread_mutex_trylock=asm["pthread_mutex_trylock"];asm["pthread_mutex_trylock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_mutex_trylock.apply(null,arguments)};var real__PyThread_create_key=asm["PyThread_create_key"];asm["PyThread_create_key"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_create_key.apply(null,arguments)};var real__pthread_key_create=asm["pthread_key_create"];asm["pthread_key_create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_key_create.apply(null,arguments)};var real__pthread_key_delete=asm["pthread_key_delete"];asm["pthread_key_delete"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_key_delete.apply(null,arguments)};var real__PyThread_delete_key=asm["PyThread_delete_key"];asm["PyThread_delete_key"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_delete_key.apply(null,arguments)};var real__PyThread_delete_key_value=asm["PyThread_delete_key_value"];asm["PyThread_delete_key_value"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_delete_key_value.apply(null,arguments)};var real__pthread_setspecific=asm["pthread_setspecific"];asm["pthread_setspecific"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_setspecific.apply(null,arguments)};var real__PyThread_set_key_value=asm["PyThread_set_key_value"];asm["PyThread_set_key_value"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_set_key_value.apply(null,arguments)};var real__PyThread_get_key_value=asm["PyThread_get_key_value"];asm["PyThread_get_key_value"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_get_key_value.apply(null,arguments)};var real__pthread_getspecific=asm["pthread_getspecific"];asm["pthread_getspecific"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_getspecific.apply(null,arguments)};var real__PyThread_ReInitTLS=asm["PyThread_ReInitTLS"];asm["PyThread_ReInitTLS"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_ReInitTLS.apply(null,arguments)};var real__PyThread_tss_alloc=asm["PyThread_tss_alloc"];asm["PyThread_tss_alloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_tss_alloc.apply(null,arguments)};var real__PyThread_tss_free=asm["PyThread_tss_free"];asm["PyThread_tss_free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__PyThread_tss_free.apply(null,arguments)};var real___PyTraceback_Add=asm["_PyTraceback_Add"];asm["_PyTraceback_Add"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___PyTraceback_Add.apply(null,arguments)};var real___Py_DumpHexadecimal=asm["_Py_DumpHexadecimal"];asm["_Py_DumpHexadecimal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Py_DumpHexadecimal.apply(null,arguments)};var real__adler32_combine=asm["adler32_combine"];asm["adler32_combine"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__adler32_combine.apply(null,arguments)};var real__adler32_combine64=asm["adler32_combine64"];asm["adler32_combine64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__adler32_combine64.apply(null,arguments)};var real__get_crc_table=asm["get_crc_table"];asm["get_crc_table"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__get_crc_table.apply(null,arguments)};var real__crc32_combine=asm["crc32_combine"];asm["crc32_combine"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__crc32_combine.apply(null,arguments)};var real__crc32_combine64=asm["crc32_combine64"];asm["crc32_combine64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__crc32_combine64.apply(null,arguments)};var real__zcalloc=asm["zcalloc"];asm["zcalloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__zcalloc.apply(null,arguments)};var real__zcfree=asm["zcfree"];asm["zcfree"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__zcfree.apply(null,arguments)};var real__deflateResetKeep=asm["deflateResetKeep"];asm["deflateResetKeep"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflateResetKeep.apply(null,arguments)};var real__deflateReset=asm["deflateReset"];asm["deflateReset"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflateReset.apply(null,arguments)};var real___tr_init=asm["_tr_init"];asm["_tr_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___tr_init.apply(null,arguments)};var real__deflateSetHeader=asm["deflateSetHeader"];asm["deflateSetHeader"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflateSetHeader.apply(null,arguments)};var real__deflatePending=asm["deflatePending"];asm["deflatePending"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflatePending.apply(null,arguments)};var real__deflatePrime=asm["deflatePrime"];asm["deflatePrime"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflatePrime.apply(null,arguments)};var real___tr_flush_bits=asm["_tr_flush_bits"];asm["_tr_flush_bits"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___tr_flush_bits.apply(null,arguments)};var real__deflateParams=asm["deflateParams"];asm["deflateParams"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflateParams.apply(null,arguments)};var real___tr_flush_block=asm["_tr_flush_block"];asm["_tr_flush_block"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___tr_flush_block.apply(null,arguments)};var real___tr_align=asm["_tr_align"];asm["_tr_align"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___tr_align.apply(null,arguments)};var real___tr_stored_block=asm["_tr_stored_block"];asm["_tr_stored_block"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___tr_stored_block.apply(null,arguments)};var real__deflateTune=asm["deflateTune"];asm["deflateTune"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflateTune.apply(null,arguments)};var real__deflateBound=asm["deflateBound"];asm["deflateBound"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflateBound.apply(null,arguments)};var real__deflateCopy=asm["deflateCopy"];asm["deflateCopy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__deflateCopy.apply(null,arguments)};var real__inflate_fast=asm["inflate_fast"];asm["inflate_fast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflate_fast.apply(null,arguments)};var real__inflateResetKeep=asm["inflateResetKeep"];asm["inflateResetKeep"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateResetKeep.apply(null,arguments)};var real__inflateReset=asm["inflateReset"];asm["inflateReset"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateReset.apply(null,arguments)};var real__inflateReset2=asm["inflateReset2"];asm["inflateReset2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateReset2.apply(null,arguments)};var real__inflateInit_=asm["inflateInit_"];asm["inflateInit_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateInit_.apply(null,arguments)};var real__inflatePrime=asm["inflatePrime"];asm["inflatePrime"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflatePrime.apply(null,arguments)};var real__inflate_table=asm["inflate_table"];asm["inflate_table"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflate_table.apply(null,arguments)};var real__inflateGetDictionary=asm["inflateGetDictionary"];asm["inflateGetDictionary"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateGetDictionary.apply(null,arguments)};var real__inflateGetHeader=asm["inflateGetHeader"];asm["inflateGetHeader"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateGetHeader.apply(null,arguments)};var real__inflateSync=asm["inflateSync"];asm["inflateSync"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateSync.apply(null,arguments)};var real__inflateSyncPoint=asm["inflateSyncPoint"];asm["inflateSyncPoint"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateSyncPoint.apply(null,arguments)};var real__inflateCopy=asm["inflateCopy"];asm["inflateCopy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateCopy.apply(null,arguments)};var real__inflateUndermine=asm["inflateUndermine"];asm["inflateUndermine"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateUndermine.apply(null,arguments)};var real__inflateMark=asm["inflateMark"];asm["inflateMark"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__inflateMark.apply(null,arguments)};var real___tr_tally=asm["_tr_tally"];asm["_tr_tally"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___tr_tally.apply(null,arguments)};var real__zlibCompileFlags=asm["zlibCompileFlags"];asm["zlibCompileFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__zlibCompileFlags.apply(null,arguments)};var real__zError=asm["zError"];asm["zError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__zError.apply(null,arguments)};var real____synccall=asm["__synccall"];asm["__synccall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____synccall.apply(null,arguments)};var real____syscall_ret=asm["__syscall_ret"];asm["__syscall_ret"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____syscall_ret.apply(null,arguments)};var real____procfdname=asm["__procfdname"];asm["__procfdname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____procfdname.apply(null,arguments)};var real__fstat64=asm["fstat64"];asm["fstat64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fstat64.apply(null,arguments)};var real__stat64=asm["stat64"];asm["stat64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__stat64.apply(null,arguments)};var real__lstat64=asm["lstat64"];asm["lstat64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__lstat64.apply(null,arguments)};var real____cos=asm["__cos"];asm["__cos"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cos.apply(null,arguments)};var real__scalbn=asm["scalbn"];asm["scalbn"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__scalbn.apply(null,arguments)};var real____rem_pio2_large=asm["__rem_pio2_large"];asm["__rem_pio2_large"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____rem_pio2_large.apply(null,arguments)};var real____rem_pio2=asm["__rem_pio2"];asm["__rem_pio2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____rem_pio2.apply(null,arguments)};var real____expo2=asm["__expo2"];asm["__expo2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____expo2.apply(null,arguments)};var real__sqrt=asm["sqrt"];asm["sqrt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__sqrt.apply(null,arguments)};var real__fabs=asm["fabs"];asm["fabs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fabs.apply(null,arguments)};var real____tan=asm["__tan"];asm["__tan"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____tan.apply(null,arguments)};var real__floor=asm["floor"];asm["floor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__floor.apply(null,arguments)};var real____sin=asm["__sin"];asm["__sin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____sin.apply(null,arguments)};var real____strerror_l=asm["__strerror_l"];asm["__strerror_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____strerror_l.apply(null,arguments)};var real____lctrans=asm["__lctrans"];asm["__lctrans"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____lctrans.apply(null,arguments)};var real__strerror_l=asm["strerror_l"];asm["strerror_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strerror_l.apply(null,arguments)};var real__wcsrtombs=asm["wcsrtombs"];asm["wcsrtombs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcsrtombs.apply(null,arguments)};var real__mbsrtowcs=asm["mbsrtowcs"];asm["mbsrtowcs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__mbsrtowcs.apply(null,arguments)};var real__wctomb=asm["wctomb"];asm["wctomb"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wctomb.apply(null,arguments)};var real__wcrtomb=asm["wcrtomb"];asm["wcrtomb"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcrtomb.apply(null,arguments)};var real____mo_lookup=asm["__mo_lookup"];asm["__mo_lookup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____mo_lookup.apply(null,arguments)};var real__isalnum_l=asm["isalnum_l"];asm["isalnum_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__isalnum_l.apply(null,arguments)};var real____lctrans_impl=asm["__lctrans_impl"];asm["__lctrans_impl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____lctrans_impl.apply(null,arguments)};var real____lctrans_cur=asm["__lctrans_cur"];asm["__lctrans_cur"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____lctrans_cur.apply(null,arguments)};var real__iswspace_l=asm["iswspace_l"];asm["iswspace_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__iswspace_l.apply(null,arguments)};var real__isspace_l=asm["isspace_l"];asm["isspace_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__isspace_l.apply(null,arguments)};var real____gettextdomain=asm["__gettextdomain"];asm["__gettextdomain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____gettextdomain.apply(null,arguments)};var real__ngettext=asm["ngettext"];asm["ngettext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ngettext.apply(null,arguments)};var real__dngettext=asm["dngettext"];asm["dngettext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__dngettext.apply(null,arguments)};var real__strcasecmp=asm["strcasecmp"];asm["strcasecmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strcasecmp.apply(null,arguments)};var real____strchrnul=asm["__strchrnul"];asm["__strchrnul"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____strchrnul.apply(null,arguments)};var real____get_locale=asm["__get_locale"];asm["__get_locale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____get_locale.apply(null,arguments)};var real__strcasecmp_l=asm["strcasecmp_l"];asm["strcasecmp_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strcasecmp_l.apply(null,arguments)};var real____nl_langinfo_l=asm["__nl_langinfo_l"];asm["__nl_langinfo_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____nl_langinfo_l.apply(null,arguments)};var real____nl_langinfo=asm["__nl_langinfo"];asm["__nl_langinfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____nl_langinfo.apply(null,arguments)};var real__nl_langinfo_l=asm["nl_langinfo_l"];asm["nl_langinfo_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__nl_langinfo_l.apply(null,arguments)};var real__dcngettext=asm["dcngettext"];asm["dcngettext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__dcngettext.apply(null,arguments)};var real____munmap=asm["__munmap"];asm["__munmap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____munmap.apply(null,arguments)};var real__isspace=asm["isspace"];asm["isspace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__isspace.apply(null,arguments)};var real____pleval=asm["__pleval"];asm["__pleval"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____pleval.apply(null,arguments)};var real__strnlen=asm["strnlen"];asm["strnlen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strnlen.apply(null,arguments)};var real__islower_l=asm["islower_l"];asm["islower_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__islower_l.apply(null,arguments)};var real__isxdigit_l=asm["isxdigit_l"];asm["isxdigit_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__isxdigit_l.apply(null,arguments)};var real____wcsxfrm_l=asm["__wcsxfrm_l"];asm["__wcsxfrm_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____wcsxfrm_l.apply(null,arguments)};var real__wmemcpy=asm["wmemcpy"];asm["wmemcpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wmemcpy.apply(null,arguments)};var real__wcsxfrm_l=asm["wcsxfrm_l"];asm["wcsxfrm_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcsxfrm_l.apply(null,arguments)};var real__isdigit=asm["isdigit"];asm["isdigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__isdigit.apply(null,arguments)};var real__toupper_l=asm["toupper_l"];asm["toupper_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__toupper_l.apply(null,arguments)};var real____wcscoll_l=asm["__wcscoll_l"];asm["__wcscoll_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____wcscoll_l.apply(null,arguments)};var real__wcscoll_l=asm["wcscoll_l"];asm["wcscoll_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcscoll_l.apply(null,arguments)};var real__tolower_l=asm["tolower_l"];asm["tolower_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__tolower_l.apply(null,arguments)};var real__isupper_l=asm["isupper_l"];asm["isupper_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__isupper_l.apply(null,arguments)};var real__isalpha_l=asm["isalpha_l"];asm["isalpha_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__isalpha_l.apply(null,arguments)};var real__isdigit_l=asm["isdigit_l"];asm["isdigit_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__isdigit_l.apply(null,arguments)};var real__readdir64=asm["readdir64"];asm["readdir64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__readdir64.apply(null,arguments)};var real__open64=asm["open64"];asm["open64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__open64.apply(null,arguments)};var real__cfsetspeed=asm["cfsetspeed"];asm["cfsetspeed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__cfsetspeed.apply(null,arguments)};var real____intscan=asm["__intscan"];asm["__intscan"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____intscan.apply(null,arguments)};var real____shlim=asm["__shlim"];asm["__shlim"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____shlim.apply(null,arguments)};var real____shgetc=asm["__shgetc"];asm["__shgetc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____shgetc.apply(null,arguments)};var real__readlink=asm["readlink"];asm["readlink"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__readlink.apply(null,arguments)};var real__ttyname_r=asm["ttyname_r"];asm["ttyname_r"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ttyname_r.apply(null,arguments)};var real____setxid=asm["__setxid"];asm["__setxid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____setxid.apply(null,arguments)};var real____aio_close=asm["__aio_close"];asm["__aio_close"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____aio_close.apply(null,arguments)};var real__lseek64=asm["lseek64"];asm["lseek64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__lseek64.apply(null,arguments)};var real__uname=asm["uname"];asm["uname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__uname.apply(null,arguments)};var real__strdup=asm["strdup"];asm["strdup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strdup.apply(null,arguments)};var real____vm_wait=asm["__vm_wait"];asm["__vm_wait"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____vm_wait.apply(null,arguments)};var real__munmap=asm["munmap"];asm["munmap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__munmap.apply(null,arguments)};var real__strtoull=asm["strtoull"];asm["strtoull"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strtoull.apply(null,arguments)};var real__strtoll=asm["strtoll"];asm["strtoll"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strtoll.apply(null,arguments)};var real____uflow=asm["__uflow"];asm["__uflow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____uflow.apply(null,arguments)};var real____multi3=asm["__multi3"];asm["__multi3"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____multi3.apply(null,arguments)};var real__strtoimax=asm["strtoimax"];asm["strtoimax"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strtoimax.apply(null,arguments)};var real__strtoumax=asm["strtoumax"];asm["strtoumax"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strtoumax.apply(null,arguments)};var real____strtol_internal=asm["__strtol_internal"];asm["__strtol_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____strtol_internal.apply(null,arguments)};var real____strtoul_internal=asm["__strtoul_internal"];asm["__strtoul_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____strtoul_internal.apply(null,arguments)};var real____strtoll_internal=asm["__strtoll_internal"];asm["__strtoll_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____strtoll_internal.apply(null,arguments)};var real____strtoull_internal=asm["__strtoull_internal"];asm["__strtoull_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____strtoull_internal.apply(null,arguments)};var real____strtoimax_internal=asm["__strtoimax_internal"];asm["__strtoimax_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____strtoimax_internal.apply(null,arguments)};var real____strtoumax_internal=asm["__strtoumax_internal"];asm["__strtoumax_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____strtoumax_internal.apply(null,arguments)};var real__wcstoull=asm["wcstoull"];asm["wcstoull"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcstoull.apply(null,arguments)};var real__wcstoll=asm["wcstoll"];asm["wcstoll"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcstoll.apply(null,arguments)};var real__wcstoul=asm["wcstoul"];asm["wcstoul"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcstoul.apply(null,arguments)};var real__iswspace=asm["iswspace"];asm["iswspace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__iswspace.apply(null,arguments)};var real__wcstoimax=asm["wcstoimax"];asm["wcstoimax"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcstoimax.apply(null,arguments)};var real__wcstoumax=asm["wcstoumax"];asm["wcstoumax"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcstoumax.apply(null,arguments)};var real__getservbyport_r=asm["getservbyport_r"];asm["getservbyport_r"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getservbyport_r.apply(null,arguments)};var real__getservbyname_r=asm["getservbyname_r"];asm["getservbyname_r"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getservbyname_r.apply(null,arguments)};var real__strspn=asm["strspn"];asm["strspn"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strspn.apply(null,arguments)};var real____lookup_serv=asm["__lookup_serv"];asm["__lookup_serv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____lookup_serv.apply(null,arguments)};var real____fopen_rb_ca=asm["__fopen_rb_ca"];asm["__fopen_rb_ca"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____fopen_rb_ca.apply(null,arguments)};var real____fclose_ca=asm["__fclose_ca"];asm["__fclose_ca"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____fclose_ca.apply(null,arguments)};var real____inet_aton=asm["__inet_aton"];asm["__inet_aton"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____inet_aton.apply(null,arguments)};var real____setrlimit=asm["__setrlimit"];asm["__setrlimit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____setrlimit.apply(null,arguments)};var real__setrlimit64=asm["setrlimit64"];asm["setrlimit64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__setrlimit64.apply(null,arguments)};var real____emscripten_pthread_data_constructor=asm["__emscripten_pthread_data_constructor"];asm["__emscripten_pthread_data_constructor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____emscripten_pthread_data_constructor.apply(null,arguments)};var real__getrlimit64=asm["getrlimit64"];asm["getrlimit64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__getrlimit64.apply(null,arguments)};var real____stdio_close=asm["__stdio_close"];asm["__stdio_close"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____stdio_close.apply(null,arguments)};var real__fprintf=asm["fprintf"];asm["fprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fprintf.apply(null,arguments)};var real__vfprintf=asm["vfprintf"];asm["vfprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__vfprintf.apply(null,arguments)};var real__vfiprintf=asm["vfiprintf"];asm["vfiprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__vfiprintf.apply(null,arguments)};var real____small_fprintf=asm["__small_fprintf"];asm["__small_fprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____small_fprintf.apply(null,arguments)};var real____small_vfprintf=asm["__small_vfprintf"];asm["__small_vfprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____small_vfprintf.apply(null,arguments)};var real____lockfile=asm["__lockfile"];asm["__lockfile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____lockfile.apply(null,arguments)};var real____overflow=asm["__overflow"];asm["__overflow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____overflow.apply(null,arguments)};var real____unlockfile=asm["__unlockfile"];asm["__unlockfile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____unlockfile.apply(null,arguments)};var real____fseeko_unlocked=asm["__fseeko_unlocked"];asm["__fseeko_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____fseeko_unlocked.apply(null,arguments)};var real____stdio_write=asm["__stdio_write"];asm["__stdio_write"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____stdio_write.apply(null,arguments)};var real____towrite=asm["__towrite"];asm["__towrite"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____towrite.apply(null,arguments)};var real____fseeko=asm["__fseeko"];asm["__fseeko"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____fseeko.apply(null,arguments)};var real__fseeko=asm["fseeko"];asm["fseeko"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fseeko.apply(null,arguments)};var real__fseeko64=asm["fseeko64"];asm["fseeko64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fseeko64.apply(null,arguments)};var real____stdio_exit=asm["__stdio_exit"];asm["__stdio_exit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____stdio_exit.apply(null,arguments)};var real____stdio_exit_needed=asm["__stdio_exit_needed"];asm["__stdio_exit_needed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____stdio_exit_needed.apply(null,arguments)};var real____towrite_needs_stdio_exit=asm["__towrite_needs_stdio_exit"];asm["__towrite_needs_stdio_exit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____towrite_needs_stdio_exit.apply(null,arguments)};var real____ofl_lock=asm["__ofl_lock"];asm["__ofl_lock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____ofl_lock.apply(null,arguments)};var real____toread=asm["__toread"];asm["__toread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____toread.apply(null,arguments)};var real____fwritex=asm["__fwritex"];asm["__fwritex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____fwritex.apply(null,arguments)};var real__fwrite_unlocked=asm["fwrite_unlocked"];asm["fwrite_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fwrite_unlocked.apply(null,arguments)};var real____fdopen=asm["__fdopen"];asm["__fdopen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____fdopen.apply(null,arguments)};var real____stdio_seek=asm["__stdio_seek"];asm["__stdio_seek"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____stdio_seek.apply(null,arguments)};var real____stdio_read=asm["__stdio_read"];asm["__stdio_read"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____stdio_read.apply(null,arguments)};var real____ofl_add=asm["__ofl_add"];asm["__ofl_add"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____ofl_add.apply(null,arguments)};var real__fread_unlocked=asm["fread_unlocked"];asm["fread_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fread_unlocked.apply(null,arguments)};var real__sprintf=asm["sprintf"];asm["sprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__sprintf.apply(null,arguments)};var real__vsprintf=asm["vsprintf"];asm["vsprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__vsprintf.apply(null,arguments)};var real__vsiprintf=asm["vsiprintf"];asm["vsiprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__vsiprintf.apply(null,arguments)};var real____small_sprintf=asm["__small_sprintf"];asm["__small_sprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____small_sprintf.apply(null,arguments)};var real____small_vsprintf=asm["__small_vsprintf"];asm["__small_vsprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____small_vsprintf.apply(null,arguments)};var real__fileno_unlocked=asm["fileno_unlocked"];asm["fileno_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fileno_unlocked.apply(null,arguments)};var real____unlist_locked_file=asm["__unlist_locked_file"];asm["__unlist_locked_file"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____unlist_locked_file.apply(null,arguments)};var real____ofl_unlock=asm["__ofl_unlock"];asm["__ofl_unlock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____ofl_unlock.apply(null,arguments)};var real____toread_needs_stdio_exit=asm["__toread_needs_stdio_exit"];asm["__toread_needs_stdio_exit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____toread_needs_stdio_exit.apply(null,arguments)};var real____ftello_unlocked=asm["__ftello_unlocked"];asm["__ftello_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____ftello_unlocked.apply(null,arguments)};var real____ftello=asm["__ftello"];asm["__ftello"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____ftello.apply(null,arguments)};var real__ftello=asm["ftello"];asm["ftello"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ftello.apply(null,arguments)};var real__ftello64=asm["ftello64"];asm["ftello64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ftello64.apply(null,arguments)};var real__vsniprintf=asm["vsniprintf"];asm["vsniprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__vsniprintf.apply(null,arguments)};var real____small_vsnprintf=asm["__small_vsnprintf"];asm["__small_vsnprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____small_vsnprintf.apply(null,arguments)};var real____vfprintf_internal=asm["__vfprintf_internal"];asm["__vfprintf_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____vfprintf_internal.apply(null,arguments)};var real____trunctfdf2=asm["__trunctfdf2"];asm["__trunctfdf2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____trunctfdf2.apply(null,arguments)};var real__ferror_unlocked=asm["ferror_unlocked"];asm["ferror_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__ferror_unlocked.apply(null,arguments)};var real___IO_ferror_unlocked=asm["_IO_ferror_unlocked"];asm["_IO_ferror_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___IO_ferror_unlocked.apply(null,arguments)};var real__fgets_unlocked=asm["fgets_unlocked"];asm["fgets_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fgets_unlocked.apply(null,arguments)};var real__clearerr_unlocked=asm["clearerr_unlocked"];asm["clearerr_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__clearerr_unlocked.apply(null,arguments)};var real__feof_unlocked=asm["feof_unlocked"];asm["feof_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__feof_unlocked.apply(null,arguments)};var real___IO_feof_unlocked=asm["_IO_feof_unlocked"];asm["_IO_feof_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___IO_feof_unlocked.apply(null,arguments)};var real__printf=asm["printf"];asm["printf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__printf.apply(null,arguments)};var real____small_printf=asm["__small_printf"];asm["__small_printf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____small_printf.apply(null,arguments)};var real____fmodeflags=asm["__fmodeflags"];asm["__fmodeflags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____fmodeflags.apply(null,arguments)};var real__fopen64=asm["fopen64"];asm["fopen64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fopen64.apply(null,arguments)};var real__fflush_unlocked=asm["fflush_unlocked"];asm["fflush_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fflush_unlocked.apply(null,arguments)};var real__fputs_unlocked=asm["fputs_unlocked"];asm["fputs_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__fputs_unlocked.apply(null,arguments)};var real___IO_getc=asm["_IO_getc"];asm["_IO_getc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___IO_getc.apply(null,arguments)};var real__wmemset=asm["wmemset"];asm["wmemset"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wmemset.apply(null,arguments)};var real____memrchr=asm["__memrchr"];asm["__memrchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____memrchr.apply(null,arguments)};var real____strcasecmp_l=asm["__strcasecmp_l"];asm["__strcasecmp_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____strcasecmp_l.apply(null,arguments)};var real__wcscspn=asm["wcscspn"];asm["wcscspn"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcscspn.apply(null,arguments)};var real____stpncpy=asm["__stpncpy"];asm["__stpncpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____stpncpy.apply(null,arguments)};var real____strdup=asm["__strdup"];asm["__strdup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____strdup.apply(null,arguments)};var real____stpcpy=asm["__stpcpy"];asm["__stpcpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____stpcpy.apply(null,arguments)};var real__stpcpy=asm["stpcpy"];asm["stpcpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__stpcpy.apply(null,arguments)};var real__wcsspn=asm["wcsspn"];asm["wcsspn"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__wcsspn.apply(null,arguments)};var real__stpncpy=asm["stpncpy"];asm["stpncpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__stpncpy.apply(null,arguments)};var real__strchrnul=asm["strchrnul"];asm["strchrnul"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__strchrnul.apply(null,arguments)};var real__isupper=asm["isupper"];asm["isupper"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__isupper.apply(null,arguments)};var real____isupper_l=asm["__isupper_l"];asm["__isupper_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____isupper_l.apply(null,arguments)};var real__islower=asm["islower"];asm["islower"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__islower.apply(null,arguments)};var real____toupper_l=asm["__toupper_l"];asm["__toupper_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____toupper_l.apply(null,arguments)};var real____iswspace_l=asm["__iswspace_l"];asm["__iswspace_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____iswspace_l.apply(null,arguments)};var real____isxdigit_l=asm["__isxdigit_l"];asm["__isxdigit_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____isxdigit_l.apply(null,arguments)};var real____tolower_l=asm["__tolower_l"];asm["__tolower_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____tolower_l.apply(null,arguments)};var real__isalpha=asm["isalpha"];asm["isalpha"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__isalpha.apply(null,arguments)};var real____isalpha_l=asm["__isalpha_l"];asm["__isalpha_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____isalpha_l.apply(null,arguments)};var real____islower_l=asm["__islower_l"];asm["__islower_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____islower_l.apply(null,arguments)};var real____isalnum_l=asm["__isalnum_l"];asm["__isalnum_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____isalnum_l.apply(null,arguments)};var real____isspace_l=asm["__isspace_l"];asm["__isspace_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____isspace_l.apply(null,arguments)};var real____isdigit_l=asm["__isdigit_l"];asm["__isdigit_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____isdigit_l.apply(null,arguments)};var real__abort_message=asm["abort_message"];asm["abort_message"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__abort_message.apply(null,arguments)};var real____cxa_bad_cast=asm["__cxa_bad_cast"];asm["__cxa_bad_cast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cxa_bad_cast.apply(null,arguments)};var real___ZNSt8bad_castC1Ev=asm["_ZNSt8bad_castC1Ev"];asm["_ZNSt8bad_castC1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt8bad_castC1Ev.apply(null,arguments)};var real___ZNSt8bad_castD1Ev=asm["_ZNSt8bad_castD1Ev"];asm["_ZNSt8bad_castD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt8bad_castD1Ev.apply(null,arguments)};var real____cxa_bad_typeid=asm["__cxa_bad_typeid"];asm["__cxa_bad_typeid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cxa_bad_typeid.apply(null,arguments)};var real___ZNSt10bad_typeidC1Ev=asm["_ZNSt10bad_typeidC1Ev"];asm["_ZNSt10bad_typeidC1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt10bad_typeidC1Ev.apply(null,arguments)};var real___ZNSt10bad_typeidD1Ev=asm["_ZNSt10bad_typeidD1Ev"];asm["_ZNSt10bad_typeidD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt10bad_typeidD1Ev.apply(null,arguments)};var real____cxa_throw_bad_array_new_length=asm["__cxa_throw_bad_array_new_length"];asm["__cxa_throw_bad_array_new_length"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cxa_throw_bad_array_new_length.apply(null,arguments)};var real___ZNSt20bad_array_new_lengthC1Ev=asm["_ZNSt20bad_array_new_lengthC1Ev"];asm["_ZNSt20bad_array_new_lengthC1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt20bad_array_new_lengthC1Ev.apply(null,arguments)};var real___ZNSt20bad_array_new_lengthD1Ev=asm["_ZNSt20bad_array_new_lengthD1Ev"];asm["_ZNSt20bad_array_new_lengthD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt20bad_array_new_lengthD1Ev.apply(null,arguments)};var real___ZSt14set_unexpectedPFvvE=asm["_ZSt14set_unexpectedPFvvE"];asm["_ZSt14set_unexpectedPFvvE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZSt14set_unexpectedPFvvE.apply(null,arguments)};var real___ZSt13set_terminatePFvvE=asm["_ZSt13set_terminatePFvvE"];asm["_ZSt13set_terminatePFvvE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZSt13set_terminatePFvvE.apply(null,arguments)};var real____cxa_get_globals_fast=asm["__cxa_get_globals_fast"];asm["__cxa_get_globals_fast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cxa_get_globals_fast.apply(null,arguments)};var real___ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception=asm["_ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception"];asm["_ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception.apply(null,arguments)};var real___ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception=asm["_ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception"];asm["_ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception.apply(null,arguments)};var real___ZNKSt9type_info4nameEv=asm["_ZNKSt9type_info4nameEv"];asm["_ZNKSt9type_info4nameEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNKSt9type_info4nameEv.apply(null,arguments)};var real____cxa_demangle=asm["__cxa_demangle"];asm["__cxa_demangle"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cxa_demangle.apply(null,arguments)};var real___ZSt9terminatev=asm["_ZSt9terminatev"];asm["_ZSt9terminatev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZSt9terminatev.apply(null,arguments)};var real___ZNSt3__214numeric_limitsIjE3maxEv=asm["_ZNSt3__214numeric_limitsIjE3maxEv"];asm["_ZNSt3__214numeric_limitsIjE3maxEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__214numeric_limitsIjE3maxEv.apply(null,arguments)};var real___ZNSt3__223__libcpp_numeric_limitsIjLb1EE3maxEv=asm["_ZNSt3__223__libcpp_numeric_limitsIjLb1EE3maxEv"];asm["_ZNSt3__223__libcpp_numeric_limitsIjLb1EE3maxEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__223__libcpp_numeric_limitsIjLb1EE3maxEv.apply(null,arguments)};var real___ZNSt3__27forwardIRA34_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA34_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA34_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA34_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__25equalIPKcS2_EEbT_S3_T0_=asm["_ZNSt3__25equalIPKcS2_EEbT_S3_T0_"];asm["_ZNSt3__25equalIPKcS2_EEbT_S3_T0_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__25equalIPKcS2_EEbT_S3_T0_.apply(null,arguments)};var real___ZNSt3__25equalIPKcS2_NS_10__equal_toIccEEEEbT_S5_T0_T1_=asm["_ZNSt3__25equalIPKcS2_NS_10__equal_toIccEEEEbT_S5_T0_T1_"];asm["_ZNSt3__25equalIPKcS2_NS_10__equal_toIccEEEEbT_S5_T0_T1_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__25equalIPKcS2_NS_10__equal_toIccEEEEbT_S5_T0_T1_.apply(null,arguments)};var real___ZNKSt3__210__equal_toIccEclERKcS3_=asm["_ZNKSt3__210__equal_toIccEclERKcS3_"];asm["_ZNKSt3__210__equal_toIccEclERKcS3_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNKSt3__210__equal_toIccEclERKcS3_.apply(null,arguments)};var real___ZNSt3__27forwardIRA12_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA12_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA12_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA12_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA9_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA9_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA9_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA9_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA14_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA14_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA14_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA14_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA19_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA19_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA19_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA19_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA27_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA27_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA27_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA27_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA41_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA41_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA41_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA41_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA18_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA18_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA18_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA18_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA22_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA22_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA22_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA22_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA20_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA20_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA20_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA20_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA25_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA25_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA25_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA25_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZdlPv=asm["_ZdlPv"];asm["_ZdlPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZdlPv.apply(null,arguments)};var real___ZNSt3__27forwardIRA4_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA4_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA4_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA4_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA5_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA5_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA5_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA5_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRmEEOT_RNS_16remove_referenceIS2_E4typeE=asm["_ZNSt3__27forwardIRmEEOT_RNS_16remove_referenceIS2_E4typeE"];asm["_ZNSt3__27forwardIRmEEOT_RNS_16remove_referenceIS2_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRmEEOT_RNS_16remove_referenceIS2_E4typeE.apply(null,arguments)};var real___ZNSt3__24moveIRbEEONS_16remove_referenceIT_E4typeEOS3_=asm["_ZNSt3__24moveIRbEEONS_16remove_referenceIT_E4typeEOS3_"];asm["_ZNSt3__24moveIRbEEONS_16remove_referenceIT_E4typeEOS3_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__24moveIRbEEONS_16remove_referenceIT_E4typeEOS3_.apply(null,arguments)};var real___ZNSt3__27forwardIRA10_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA10_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA10_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA10_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA2_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA2_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA2_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA2_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA11_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA11_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA11_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA11_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRbEEOT_RNS_16remove_referenceIS2_E4typeE=asm["_ZNSt3__27forwardIRbEEOT_RNS_16remove_referenceIS2_E4typeE"];asm["_ZNSt3__27forwardIRbEEOT_RNS_16remove_referenceIS2_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRbEEOT_RNS_16remove_referenceIS2_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIbEEOT_RNS_16remove_referenceIS1_E4typeE=asm["_ZNSt3__27forwardIbEEOT_RNS_16remove_referenceIS1_E4typeE"];asm["_ZNSt3__27forwardIbEEOT_RNS_16remove_referenceIS1_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIbEEOT_RNS_16remove_referenceIS1_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA13_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA13_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA13_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA13_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA3_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA3_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA3_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA3_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIDnEEOT_RNS_16remove_referenceIS1_E4typeE=asm["_ZNSt3__27forwardIDnEEOT_RNS_16remove_referenceIS1_E4typeE"];asm["_ZNSt3__27forwardIDnEEOT_RNS_16remove_referenceIS1_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIDnEEOT_RNS_16remove_referenceIS1_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA17_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA17_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA17_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA17_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA6_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA6_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA6_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA6_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIiEEOT_RNS_16remove_referenceIS1_E4typeE=asm["_ZNSt3__27forwardIiEEOT_RNS_16remove_referenceIS1_E4typeE"];asm["_ZNSt3__27forwardIiEEOT_RNS_16remove_referenceIS1_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIiEEOT_RNS_16remove_referenceIS1_E4typeE.apply(null,arguments)};var real___ZNSt3__27reverseIPcEEvT_S2_=asm["_ZNSt3__27reverseIPcEEvT_S2_"];asm["_ZNSt3__27reverseIPcEEvT_S2_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27reverseIPcEEvT_S2_.apply(null,arguments)};var real___ZNSt3__29__reverseIPcEEvT_S2_NS_26random_access_iterator_tagE=asm["_ZNSt3__29__reverseIPcEEvT_S2_NS_26random_access_iterator_tagE"];asm["_ZNSt3__29__reverseIPcEEvT_S2_NS_26random_access_iterator_tagE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__29__reverseIPcEEvT_S2_NS_26random_access_iterator_tagE.apply(null,arguments)};var real___ZNSt3__29iter_swapIPcS1_EEvT_T0_=asm["_ZNSt3__29iter_swapIPcS1_EEvT_T0_"];asm["_ZNSt3__29iter_swapIPcS1_EEvT_T0_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__29iter_swapIPcS1_EEvT_T0_.apply(null,arguments)};var real___ZNSt3__24swapIcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_=asm["_ZNSt3__24swapIcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"];asm["_ZNSt3__24swapIcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__24swapIcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_.apply(null,arguments)};var real___ZNSt3__24moveIRcEEONS_16remove_referenceIT_E4typeEOS3_=asm["_ZNSt3__24moveIRcEEONS_16remove_referenceIT_E4typeEOS3_"];asm["_ZNSt3__24moveIRcEEONS_16remove_referenceIT_E4typeEOS3_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__24moveIRcEEONS_16remove_referenceIT_E4typeEOS3_.apply(null,arguments)};var real___ZNSt3__24moveIRjEEONS_16remove_referenceIT_E4typeEOS3_=asm["_ZNSt3__24moveIRjEEONS_16remove_referenceIT_E4typeEOS3_"];asm["_ZNSt3__24moveIRjEEONS_16remove_referenceIT_E4typeEOS3_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__24moveIRjEEONS_16remove_referenceIT_E4typeEOS3_.apply(null,arguments)};var real___ZNSt3__27forwardIRA16_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA16_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA16_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA16_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA15_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA15_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA15_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA15_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRiEEOT_RNS_16remove_referenceIS2_E4typeE=asm["_ZNSt3__27forwardIRiEEOT_RNS_16remove_referenceIS2_E4typeE"];asm["_ZNSt3__27forwardIRiEEOT_RNS_16remove_referenceIS2_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRiEEOT_RNS_16remove_referenceIS2_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA8_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA8_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA8_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA8_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__27forwardIRA7_KcEEOT_RNS_16remove_referenceIS4_E4typeE=asm["_ZNSt3__27forwardIRA7_KcEEOT_RNS_16remove_referenceIS4_E4typeE"];asm["_ZNSt3__27forwardIRA7_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__27forwardIRA7_KcEEOT_RNS_16remove_referenceIS4_E4typeE.apply(null,arguments)};var real___ZNSt3__24moveIRPKcEEONS_16remove_referenceIT_E4typeEOS5_=asm["_ZNSt3__24moveIRPKcEEONS_16remove_referenceIT_E4typeEOS5_"];asm["_ZNSt3__24moveIRPKcEEONS_16remove_referenceIT_E4typeEOS5_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__24moveIRPKcEEONS_16remove_referenceIT_E4typeEOS5_.apply(null,arguments)};var real____cxa_get_globals=asm["__cxa_get_globals"];asm["__cxa_get_globals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cxa_get_globals.apply(null,arguments)};var real____cxa_guard_acquire=asm["__cxa_guard_acquire"];asm["__cxa_guard_acquire"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cxa_guard_acquire.apply(null,arguments)};var real____cxa_guard_release=asm["__cxa_guard_release"];asm["__cxa_guard_release"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cxa_guard_release.apply(null,arguments)};var real____cxa_guard_abort=asm["__cxa_guard_abort"];asm["__cxa_guard_abort"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cxa_guard_abort.apply(null,arguments)};var real___ZSt14get_unexpectedv=asm["_ZSt14get_unexpectedv"];asm["_ZSt14get_unexpectedv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZSt14get_unexpectedv.apply(null,arguments)};var real____clang_call_terminate=asm["__clang_call_terminate"];asm["__clang_call_terminate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____clang_call_terminate.apply(null,arguments)};var real___ZSt11__terminatePFvvE=asm["_ZSt11__terminatePFvvE"];asm["_ZSt11__terminatePFvvE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZSt11__terminatePFvvE.apply(null,arguments)};var real___ZSt13get_terminatev=asm["_ZSt13get_terminatev"];asm["_ZSt13get_terminatev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZSt13get_terminatev.apply(null,arguments)};var real___ZSt12__unexpectedPFvvE=asm["_ZSt12__unexpectedPFvvE"];asm["_ZSt12__unexpectedPFvvE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZSt12__unexpectedPFvvE.apply(null,arguments)};var real___ZSt10unexpectedv=asm["_ZSt10unexpectedv"];asm["_ZSt10unexpectedv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZSt10unexpectedv.apply(null,arguments)};var real___ZSt15set_new_handlerPFvvE=asm["_ZSt15set_new_handlerPFvvE"];asm["_ZSt15set_new_handlerPFvvE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZSt15set_new_handlerPFvvE.apply(null,arguments)};var real___ZSt15get_new_handlerv=asm["_ZSt15get_new_handlerv"];asm["_ZSt15get_new_handlerv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZSt15get_new_handlerv.apply(null,arguments)};var real___ZN10__cxxabiv130__aligned_malloc_with_fallbackEm=asm["_ZN10__cxxabiv130__aligned_malloc_with_fallbackEm"];asm["_ZN10__cxxabiv130__aligned_malloc_with_fallbackEm"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv130__aligned_malloc_with_fallbackEm.apply(null,arguments)};var real__posix_memalign=asm["posix_memalign"];asm["posix_memalign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__posix_memalign.apply(null,arguments)};var real___ZN10__cxxabiv122__calloc_with_fallbackEmm=asm["_ZN10__cxxabiv122__calloc_with_fallbackEmm"];asm["_ZN10__cxxabiv122__calloc_with_fallbackEmm"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv122__calloc_with_fallbackEmm.apply(null,arguments)};var real___ZN10__cxxabiv128__aligned_free_with_fallbackEPv=asm["_ZN10__cxxabiv128__aligned_free_with_fallbackEPv"];asm["_ZN10__cxxabiv128__aligned_free_with_fallbackEPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv128__aligned_free_with_fallbackEPv.apply(null,arguments)};var real___ZN10__cxxabiv120__free_with_fallbackEPv=asm["_ZN10__cxxabiv120__free_with_fallbackEPv"];asm["_ZN10__cxxabiv120__free_with_fallbackEPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv120__free_with_fallbackEPv.apply(null,arguments)};var real___Znwm=asm["_Znwm"];asm["_Znwm"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Znwm.apply(null,arguments)};var real___ZNSt9bad_allocC1Ev=asm["_ZNSt9bad_allocC1Ev"];asm["_ZNSt9bad_allocC1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt9bad_allocC1Ev.apply(null,arguments)};var real___ZNSt9bad_allocD1Ev=asm["_ZNSt9bad_allocD1Ev"];asm["_ZNSt9bad_allocD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt9bad_allocD1Ev.apply(null,arguments)};var real___ZnwmRKSt9nothrow_t=asm["_ZnwmRKSt9nothrow_t"];asm["_ZnwmRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZnwmRKSt9nothrow_t.apply(null,arguments)};var real___Znam=asm["_Znam"];asm["_Znam"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___Znam.apply(null,arguments)};var real___ZnamRKSt9nothrow_t=asm["_ZnamRKSt9nothrow_t"];asm["_ZnamRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZnamRKSt9nothrow_t.apply(null,arguments)};var real___ZdlPvRKSt9nothrow_t=asm["_ZdlPvRKSt9nothrow_t"];asm["_ZdlPvRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZdlPvRKSt9nothrow_t.apply(null,arguments)};var real___ZdlPvm=asm["_ZdlPvm"];asm["_ZdlPvm"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZdlPvm.apply(null,arguments)};var real___ZdaPv=asm["_ZdaPv"];asm["_ZdaPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZdaPv.apply(null,arguments)};var real___ZdaPvRKSt9nothrow_t=asm["_ZdaPvRKSt9nothrow_t"];asm["_ZdaPvRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZdaPvRKSt9nothrow_t.apply(null,arguments)};var real___ZdaPvm=asm["_ZdaPvm"];asm["_ZdaPvm"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZdaPvm.apply(null,arguments)};var real___ZnwmSt11align_val_t=asm["_ZnwmSt11align_val_t"];asm["_ZnwmSt11align_val_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZnwmSt11align_val_t.apply(null,arguments)};var real___ZnwmSt11align_val_tRKSt9nothrow_t=asm["_ZnwmSt11align_val_tRKSt9nothrow_t"];asm["_ZnwmSt11align_val_tRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZnwmSt11align_val_tRKSt9nothrow_t.apply(null,arguments)};var real___ZnamSt11align_val_t=asm["_ZnamSt11align_val_t"];asm["_ZnamSt11align_val_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZnamSt11align_val_t.apply(null,arguments)};var real___ZnamSt11align_val_tRKSt9nothrow_t=asm["_ZnamSt11align_val_tRKSt9nothrow_t"];asm["_ZnamSt11align_val_tRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZnamSt11align_val_tRKSt9nothrow_t.apply(null,arguments)};var real___ZdlPvSt11align_val_t=asm["_ZdlPvSt11align_val_t"];asm["_ZdlPvSt11align_val_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZdlPvSt11align_val_t.apply(null,arguments)};var real___ZdlPvSt11align_val_tRKSt9nothrow_t=asm["_ZdlPvSt11align_val_tRKSt9nothrow_t"];asm["_ZdlPvSt11align_val_tRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZdlPvSt11align_val_tRKSt9nothrow_t.apply(null,arguments)};var real___ZdlPvmSt11align_val_t=asm["_ZdlPvmSt11align_val_t"];asm["_ZdlPvmSt11align_val_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZdlPvmSt11align_val_t.apply(null,arguments)};var real___ZdaPvSt11align_val_t=asm["_ZdaPvSt11align_val_t"];asm["_ZdaPvSt11align_val_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZdaPvSt11align_val_t.apply(null,arguments)};var real___ZdaPvSt11align_val_tRKSt9nothrow_t=asm["_ZdaPvSt11align_val_tRKSt9nothrow_t"];asm["_ZdaPvSt11align_val_tRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZdaPvSt11align_val_tRKSt9nothrow_t.apply(null,arguments)};var real___ZdaPvmSt11align_val_t=asm["_ZdaPvmSt11align_val_t"];asm["_ZdaPvmSt11align_val_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZdaPvmSt11align_val_t.apply(null,arguments)};var real___ZNSt9exceptionD2Ev=asm["_ZNSt9exceptionD2Ev"];asm["_ZNSt9exceptionD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt9exceptionD2Ev.apply(null,arguments)};var real___ZNSt9exceptionD0Ev=asm["_ZNSt9exceptionD0Ev"];asm["_ZNSt9exceptionD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt9exceptionD0Ev.apply(null,arguments)};var real___ZNKSt9exception4whatEv=asm["_ZNKSt9exception4whatEv"];asm["_ZNKSt9exception4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNKSt9exception4whatEv.apply(null,arguments)};var real___ZNSt13bad_exceptionD0Ev=asm["_ZNSt13bad_exceptionD0Ev"];asm["_ZNSt13bad_exceptionD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt13bad_exceptionD0Ev.apply(null,arguments)};var real___ZNKSt13bad_exception4whatEv=asm["_ZNKSt13bad_exception4whatEv"];asm["_ZNKSt13bad_exception4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNKSt13bad_exception4whatEv.apply(null,arguments)};var real___ZNSt9bad_allocC2Ev=asm["_ZNSt9bad_allocC2Ev"];asm["_ZNSt9bad_allocC2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt9bad_allocC2Ev.apply(null,arguments)};var real___ZNSt9exceptionC2Ev=asm["_ZNSt9exceptionC2Ev"];asm["_ZNSt9exceptionC2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt9exceptionC2Ev.apply(null,arguments)};var real___ZNSt9bad_allocD0Ev=asm["_ZNSt9bad_allocD0Ev"];asm["_ZNSt9bad_allocD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt9bad_allocD0Ev.apply(null,arguments)};var real___ZNKSt9bad_alloc4whatEv=asm["_ZNKSt9bad_alloc4whatEv"];asm["_ZNKSt9bad_alloc4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNKSt9bad_alloc4whatEv.apply(null,arguments)};var real___ZNSt20bad_array_new_lengthC2Ev=asm["_ZNSt20bad_array_new_lengthC2Ev"];asm["_ZNSt20bad_array_new_lengthC2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt20bad_array_new_lengthC2Ev.apply(null,arguments)};var real___ZNSt20bad_array_new_lengthD0Ev=asm["_ZNSt20bad_array_new_lengthD0Ev"];asm["_ZNSt20bad_array_new_lengthD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt20bad_array_new_lengthD0Ev.apply(null,arguments)};var real___ZNKSt20bad_array_new_length4whatEv=asm["_ZNKSt20bad_array_new_length4whatEv"];asm["_ZNKSt20bad_array_new_length4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNKSt20bad_array_new_length4whatEv.apply(null,arguments)};var real___ZNSt9exceptionD1Ev=asm["_ZNSt9exceptionD1Ev"];asm["_ZNSt9exceptionD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt9exceptionD1Ev.apply(null,arguments)};var real___ZNSt13bad_exceptionD2Ev=asm["_ZNSt13bad_exceptionD2Ev"];asm["_ZNSt13bad_exceptionD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt13bad_exceptionD2Ev.apply(null,arguments)};var real___ZNSt13bad_exceptionD1Ev=asm["_ZNSt13bad_exceptionD1Ev"];asm["_ZNSt13bad_exceptionD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt13bad_exceptionD1Ev.apply(null,arguments)};var real___ZNSt9bad_allocD2Ev=asm["_ZNSt9bad_allocD2Ev"];asm["_ZNSt9bad_allocD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt9bad_allocD2Ev.apply(null,arguments)};var real___ZNSt20bad_array_new_lengthD2Ev=asm["_ZNSt20bad_array_new_lengthD2Ev"];asm["_ZNSt20bad_array_new_lengthD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt20bad_array_new_lengthD2Ev.apply(null,arguments)};var real___ZNSt11logic_errorD2Ev=asm["_ZNSt11logic_errorD2Ev"];asm["_ZNSt11logic_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt11logic_errorD2Ev.apply(null,arguments)};var real___ZNSt3__218__libcpp_refstringD2Ev=asm["_ZNSt3__218__libcpp_refstringD2Ev"];asm["_ZNSt3__218__libcpp_refstringD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt3__218__libcpp_refstringD2Ev.apply(null,arguments)};var real___ZNKSt3__218__libcpp_refstring15__uses_refcountEv=asm["_ZNKSt3__218__libcpp_refstring15__uses_refcountEv"];asm["_ZNKSt3__218__libcpp_refstring15__uses_refcountEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNKSt3__218__libcpp_refstring15__uses_refcountEv.apply(null,arguments)};var real___ZNSt11logic_errorD0Ev=asm["_ZNSt11logic_errorD0Ev"];asm["_ZNSt11logic_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt11logic_errorD0Ev.apply(null,arguments)};var real___ZNKSt11logic_error4whatEv=asm["_ZNKSt11logic_error4whatEv"];asm["_ZNKSt11logic_error4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNKSt11logic_error4whatEv.apply(null,arguments)};var real___ZNKSt3__218__libcpp_refstring5c_strEv=asm["_ZNKSt3__218__libcpp_refstring5c_strEv"];asm["_ZNKSt3__218__libcpp_refstring5c_strEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNKSt3__218__libcpp_refstring5c_strEv.apply(null,arguments)};var real___ZNSt13runtime_errorD2Ev=asm["_ZNSt13runtime_errorD2Ev"];asm["_ZNSt13runtime_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt13runtime_errorD2Ev.apply(null,arguments)};var real___ZNSt13runtime_errorD0Ev=asm["_ZNSt13runtime_errorD0Ev"];asm["_ZNSt13runtime_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt13runtime_errorD0Ev.apply(null,arguments)};var real___ZNKSt13runtime_error4whatEv=asm["_ZNKSt13runtime_error4whatEv"];asm["_ZNKSt13runtime_error4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNKSt13runtime_error4whatEv.apply(null,arguments)};var real___ZNSt12domain_errorD0Ev=asm["_ZNSt12domain_errorD0Ev"];asm["_ZNSt12domain_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt12domain_errorD0Ev.apply(null,arguments)};var real___ZNSt16invalid_argumentD0Ev=asm["_ZNSt16invalid_argumentD0Ev"];asm["_ZNSt16invalid_argumentD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt16invalid_argumentD0Ev.apply(null,arguments)};var real___ZNSt12length_errorD0Ev=asm["_ZNSt12length_errorD0Ev"];asm["_ZNSt12length_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt12length_errorD0Ev.apply(null,arguments)};var real___ZNSt12out_of_rangeD0Ev=asm["_ZNSt12out_of_rangeD0Ev"];asm["_ZNSt12out_of_rangeD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt12out_of_rangeD0Ev.apply(null,arguments)};var real___ZNSt11range_errorD0Ev=asm["_ZNSt11range_errorD0Ev"];asm["_ZNSt11range_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt11range_errorD0Ev.apply(null,arguments)};var real___ZNSt14overflow_errorD0Ev=asm["_ZNSt14overflow_errorD0Ev"];asm["_ZNSt14overflow_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt14overflow_errorD0Ev.apply(null,arguments)};var real___ZNSt15underflow_errorD0Ev=asm["_ZNSt15underflow_errorD0Ev"];asm["_ZNSt15underflow_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt15underflow_errorD0Ev.apply(null,arguments)};var real___ZNSt11logic_errorD1Ev=asm["_ZNSt11logic_errorD1Ev"];asm["_ZNSt11logic_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt11logic_errorD1Ev.apply(null,arguments)};var real___ZNSt13runtime_errorD1Ev=asm["_ZNSt13runtime_errorD1Ev"];asm["_ZNSt13runtime_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt13runtime_errorD1Ev.apply(null,arguments)};var real___ZNSt12domain_errorD2Ev=asm["_ZNSt12domain_errorD2Ev"];asm["_ZNSt12domain_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt12domain_errorD2Ev.apply(null,arguments)};var real___ZNSt12domain_errorD1Ev=asm["_ZNSt12domain_errorD1Ev"];asm["_ZNSt12domain_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt12domain_errorD1Ev.apply(null,arguments)};var real___ZNSt16invalid_argumentD2Ev=asm["_ZNSt16invalid_argumentD2Ev"];asm["_ZNSt16invalid_argumentD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt16invalid_argumentD2Ev.apply(null,arguments)};var real___ZNSt16invalid_argumentD1Ev=asm["_ZNSt16invalid_argumentD1Ev"];asm["_ZNSt16invalid_argumentD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt16invalid_argumentD1Ev.apply(null,arguments)};var real___ZNSt12length_errorD2Ev=asm["_ZNSt12length_errorD2Ev"];asm["_ZNSt12length_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt12length_errorD2Ev.apply(null,arguments)};var real___ZNSt12length_errorD1Ev=asm["_ZNSt12length_errorD1Ev"];asm["_ZNSt12length_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt12length_errorD1Ev.apply(null,arguments)};var real___ZNSt12out_of_rangeD2Ev=asm["_ZNSt12out_of_rangeD2Ev"];asm["_ZNSt12out_of_rangeD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt12out_of_rangeD2Ev.apply(null,arguments)};var real___ZNSt12out_of_rangeD1Ev=asm["_ZNSt12out_of_rangeD1Ev"];asm["_ZNSt12out_of_rangeD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt12out_of_rangeD1Ev.apply(null,arguments)};var real___ZNSt11range_errorD2Ev=asm["_ZNSt11range_errorD2Ev"];asm["_ZNSt11range_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt11range_errorD2Ev.apply(null,arguments)};var real___ZNSt11range_errorD1Ev=asm["_ZNSt11range_errorD1Ev"];asm["_ZNSt11range_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt11range_errorD1Ev.apply(null,arguments)};var real___ZNSt14overflow_errorD2Ev=asm["_ZNSt14overflow_errorD2Ev"];asm["_ZNSt14overflow_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt14overflow_errorD2Ev.apply(null,arguments)};var real___ZNSt14overflow_errorD1Ev=asm["_ZNSt14overflow_errorD1Ev"];asm["_ZNSt14overflow_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt14overflow_errorD1Ev.apply(null,arguments)};var real___ZNSt15underflow_errorD2Ev=asm["_ZNSt15underflow_errorD2Ev"];asm["_ZNSt15underflow_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt15underflow_errorD2Ev.apply(null,arguments)};var real___ZNSt15underflow_errorD1Ev=asm["_ZNSt15underflow_errorD1Ev"];asm["_ZNSt15underflow_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt15underflow_errorD1Ev.apply(null,arguments)};var real___ZNSt9type_infoD2Ev=asm["_ZNSt9type_infoD2Ev"];asm["_ZNSt9type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt9type_infoD2Ev.apply(null,arguments)};var real___ZNSt9type_infoD0Ev=asm["_ZNSt9type_infoD0Ev"];asm["_ZNSt9type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt9type_infoD0Ev.apply(null,arguments)};var real___ZNSt8bad_castC2Ev=asm["_ZNSt8bad_castC2Ev"];asm["_ZNSt8bad_castC2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt8bad_castC2Ev.apply(null,arguments)};var real___ZNSt8bad_castD2Ev=asm["_ZNSt8bad_castD2Ev"];asm["_ZNSt8bad_castD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt8bad_castD2Ev.apply(null,arguments)};var real___ZNSt8bad_castD0Ev=asm["_ZNSt8bad_castD0Ev"];asm["_ZNSt8bad_castD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt8bad_castD0Ev.apply(null,arguments)};var real___ZNKSt8bad_cast4whatEv=asm["_ZNKSt8bad_cast4whatEv"];asm["_ZNKSt8bad_cast4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNKSt8bad_cast4whatEv.apply(null,arguments)};var real___ZNSt10bad_typeidC2Ev=asm["_ZNSt10bad_typeidC2Ev"];asm["_ZNSt10bad_typeidC2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt10bad_typeidC2Ev.apply(null,arguments)};var real___ZNSt10bad_typeidD2Ev=asm["_ZNSt10bad_typeidD2Ev"];asm["_ZNSt10bad_typeidD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt10bad_typeidD2Ev.apply(null,arguments)};var real___ZNSt10bad_typeidD0Ev=asm["_ZNSt10bad_typeidD0Ev"];asm["_ZNSt10bad_typeidD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt10bad_typeidD0Ev.apply(null,arguments)};var real___ZNKSt10bad_typeid4whatEv=asm["_ZNKSt10bad_typeid4whatEv"];asm["_ZNKSt10bad_typeid4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNKSt10bad_typeid4whatEv.apply(null,arguments)};var real___ZNSt9type_infoD1Ev=asm["_ZNSt9type_infoD1Ev"];asm["_ZNSt9type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNSt9type_infoD1Ev.apply(null,arguments)};var real___ZN10__cxxabiv116__shim_type_infoD2Ev=asm["_ZN10__cxxabiv116__shim_type_infoD2Ev"];asm["_ZN10__cxxabiv116__shim_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv116__shim_type_infoD2Ev.apply(null,arguments)};var real___ZN10__cxxabiv116__shim_type_infoD0Ev=asm["_ZN10__cxxabiv116__shim_type_infoD0Ev"];asm["_ZN10__cxxabiv116__shim_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv116__shim_type_infoD0Ev.apply(null,arguments)};var real___ZNK10__cxxabiv116__shim_type_info5noop1Ev=asm["_ZNK10__cxxabiv116__shim_type_info5noop1Ev"];asm["_ZNK10__cxxabiv116__shim_type_info5noop1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv116__shim_type_info5noop1Ev.apply(null,arguments)};var real___ZNK10__cxxabiv116__shim_type_info5noop2Ev=asm["_ZNK10__cxxabiv116__shim_type_info5noop2Ev"];asm["_ZNK10__cxxabiv116__shim_type_info5noop2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv116__shim_type_info5noop2Ev.apply(null,arguments)};var real___ZN10__cxxabiv123__fundamental_type_infoD0Ev=asm["_ZN10__cxxabiv123__fundamental_type_infoD0Ev"];asm["_ZN10__cxxabiv123__fundamental_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv123__fundamental_type_infoD0Ev.apply(null,arguments)};var real___ZN10__cxxabiv117__array_type_infoD0Ev=asm["_ZN10__cxxabiv117__array_type_infoD0Ev"];asm["_ZN10__cxxabiv117__array_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv117__array_type_infoD0Ev.apply(null,arguments)};var real___ZN10__cxxabiv120__function_type_infoD0Ev=asm["_ZN10__cxxabiv120__function_type_infoD0Ev"];asm["_ZN10__cxxabiv120__function_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv120__function_type_infoD0Ev.apply(null,arguments)};var real___ZN10__cxxabiv116__enum_type_infoD0Ev=asm["_ZN10__cxxabiv116__enum_type_infoD0Ev"];asm["_ZN10__cxxabiv116__enum_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv116__enum_type_infoD0Ev.apply(null,arguments)};var real___ZN10__cxxabiv117__class_type_infoD0Ev=asm["_ZN10__cxxabiv117__class_type_infoD0Ev"];asm["_ZN10__cxxabiv117__class_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv117__class_type_infoD0Ev.apply(null,arguments)};var real___ZN10__cxxabiv120__si_class_type_infoD0Ev=asm["_ZN10__cxxabiv120__si_class_type_infoD0Ev"];asm["_ZN10__cxxabiv120__si_class_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv120__si_class_type_infoD0Ev.apply(null,arguments)};var real___ZN10__cxxabiv121__vmi_class_type_infoD0Ev=asm["_ZN10__cxxabiv121__vmi_class_type_infoD0Ev"];asm["_ZN10__cxxabiv121__vmi_class_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv121__vmi_class_type_infoD0Ev.apply(null,arguments)};var real___ZN10__cxxabiv117__pbase_type_infoD0Ev=asm["_ZN10__cxxabiv117__pbase_type_infoD0Ev"];asm["_ZN10__cxxabiv117__pbase_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv117__pbase_type_infoD0Ev.apply(null,arguments)};var real___ZN10__cxxabiv119__pointer_type_infoD0Ev=asm["_ZN10__cxxabiv119__pointer_type_infoD0Ev"];asm["_ZN10__cxxabiv119__pointer_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv119__pointer_type_infoD0Ev.apply(null,arguments)};var real___ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev=asm["_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev"];asm["_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev.apply(null,arguments)};var real___ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv=asm["_ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv"];asm["_ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv.apply(null,arguments)};var real___ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv=asm["_ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv"];asm["_ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv.apply(null,arguments)};var real___ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv=asm["_ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv"];asm["_ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv.apply(null,arguments)};var real___ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv=asm["_ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv"];asm["_ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv.apply(null,arguments)};var real___ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv=asm["_ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"];asm["_ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv.apply(null,arguments)};var real____dynamic_cast=asm["__dynamic_cast"];asm["__dynamic_cast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____dynamic_cast.apply(null,arguments)};var real___ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi=asm["_ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"];asm["_ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi.apply(null,arguments)};var real___ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi=asm["_ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];asm["_ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null,arguments)};var real___ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi=asm["_ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];asm["_ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null,arguments)};var real___ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi=asm["_ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];asm["_ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null,arguments)};var real___ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi=asm["_ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];asm["_ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null,arguments)};var real___ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv=asm["_ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv"];asm["_ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv.apply(null,arguments)};var real___ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv=asm["_ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv"];asm["_ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv.apply(null,arguments)};var real___ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE=asm["_ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE"];asm["_ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE.apply(null,arguments)};var real___ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE=asm["_ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE"];asm["_ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE.apply(null,arguments)};var real___ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv=asm["_ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv"];asm["_ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv.apply(null,arguments)};var real___ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i=asm["_ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"];asm["_ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i.apply(null,arguments)};var real___ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi=asm["_ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"];asm["_ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi.apply(null,arguments)};var real___ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib=asm["_ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];asm["_ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null,arguments)};var real___ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib=asm["_ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];asm["_ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null,arguments)};var real___ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib=asm["_ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];asm["_ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null,arguments)};var real___ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib=asm["_ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];asm["_ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null,arguments)};var real___ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib=asm["_ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];asm["_ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null,arguments)};var real___ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib=asm["_ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];asm["_ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null,arguments)};var real___ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib=asm["_ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];asm["_ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null,arguments)};var real___ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib=asm["_ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];asm["_ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null,arguments)};var real____cxa_can_catch=asm["__cxa_can_catch"];asm["__cxa_can_catch"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cxa_can_catch.apply(null,arguments)};var real____cxa_is_pointer_type=asm["__cxa_is_pointer_type"];asm["__cxa_is_pointer_type"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____cxa_is_pointer_type.apply(null,arguments)};var real___ZN10__cxxabiv116__shim_type_infoD1Ev=asm["_ZN10__cxxabiv116__shim_type_infoD1Ev"];asm["_ZN10__cxxabiv116__shim_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv116__shim_type_infoD1Ev.apply(null,arguments)};var real___ZN10__cxxabiv123__fundamental_type_infoD2Ev=asm["_ZN10__cxxabiv123__fundamental_type_infoD2Ev"];asm["_ZN10__cxxabiv123__fundamental_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv123__fundamental_type_infoD2Ev.apply(null,arguments)};var real___ZN10__cxxabiv123__fundamental_type_infoD1Ev=asm["_ZN10__cxxabiv123__fundamental_type_infoD1Ev"];asm["_ZN10__cxxabiv123__fundamental_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv123__fundamental_type_infoD1Ev.apply(null,arguments)};var real___ZN10__cxxabiv117__array_type_infoD2Ev=asm["_ZN10__cxxabiv117__array_type_infoD2Ev"];asm["_ZN10__cxxabiv117__array_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv117__array_type_infoD2Ev.apply(null,arguments)};var real___ZN10__cxxabiv117__array_type_infoD1Ev=asm["_ZN10__cxxabiv117__array_type_infoD1Ev"];asm["_ZN10__cxxabiv117__array_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv117__array_type_infoD1Ev.apply(null,arguments)};var real___ZN10__cxxabiv120__function_type_infoD2Ev=asm["_ZN10__cxxabiv120__function_type_infoD2Ev"];asm["_ZN10__cxxabiv120__function_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv120__function_type_infoD2Ev.apply(null,arguments)};var real___ZN10__cxxabiv120__function_type_infoD1Ev=asm["_ZN10__cxxabiv120__function_type_infoD1Ev"];asm["_ZN10__cxxabiv120__function_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv120__function_type_infoD1Ev.apply(null,arguments)};var real___ZN10__cxxabiv116__enum_type_infoD2Ev=asm["_ZN10__cxxabiv116__enum_type_infoD2Ev"];asm["_ZN10__cxxabiv116__enum_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv116__enum_type_infoD2Ev.apply(null,arguments)};var real___ZN10__cxxabiv116__enum_type_infoD1Ev=asm["_ZN10__cxxabiv116__enum_type_infoD1Ev"];asm["_ZN10__cxxabiv116__enum_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv116__enum_type_infoD1Ev.apply(null,arguments)};var real___ZN10__cxxabiv117__class_type_infoD2Ev=asm["_ZN10__cxxabiv117__class_type_infoD2Ev"];asm["_ZN10__cxxabiv117__class_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv117__class_type_infoD2Ev.apply(null,arguments)};var real___ZN10__cxxabiv117__class_type_infoD1Ev=asm["_ZN10__cxxabiv117__class_type_infoD1Ev"];asm["_ZN10__cxxabiv117__class_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv117__class_type_infoD1Ev.apply(null,arguments)};var real___ZN10__cxxabiv120__si_class_type_infoD2Ev=asm["_ZN10__cxxabiv120__si_class_type_infoD2Ev"];asm["_ZN10__cxxabiv120__si_class_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv120__si_class_type_infoD2Ev.apply(null,arguments)};var real___ZN10__cxxabiv120__si_class_type_infoD1Ev=asm["_ZN10__cxxabiv120__si_class_type_infoD1Ev"];asm["_ZN10__cxxabiv120__si_class_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv120__si_class_type_infoD1Ev.apply(null,arguments)};var real___ZN10__cxxabiv121__vmi_class_type_infoD2Ev=asm["_ZN10__cxxabiv121__vmi_class_type_infoD2Ev"];asm["_ZN10__cxxabiv121__vmi_class_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv121__vmi_class_type_infoD2Ev.apply(null,arguments)};var real___ZN10__cxxabiv121__vmi_class_type_infoD1Ev=asm["_ZN10__cxxabiv121__vmi_class_type_infoD1Ev"];asm["_ZN10__cxxabiv121__vmi_class_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv121__vmi_class_type_infoD1Ev.apply(null,arguments)};var real___ZN10__cxxabiv117__pbase_type_infoD2Ev=asm["_ZN10__cxxabiv117__pbase_type_infoD2Ev"];asm["_ZN10__cxxabiv117__pbase_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv117__pbase_type_infoD2Ev.apply(null,arguments)};var real___ZN10__cxxabiv117__pbase_type_infoD1Ev=asm["_ZN10__cxxabiv117__pbase_type_infoD1Ev"];asm["_ZN10__cxxabiv117__pbase_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv117__pbase_type_infoD1Ev.apply(null,arguments)};var real___ZN10__cxxabiv119__pointer_type_infoD2Ev=asm["_ZN10__cxxabiv119__pointer_type_infoD2Ev"];asm["_ZN10__cxxabiv119__pointer_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv119__pointer_type_infoD2Ev.apply(null,arguments)};var real___ZN10__cxxabiv119__pointer_type_infoD1Ev=asm["_ZN10__cxxabiv119__pointer_type_infoD1Ev"];asm["_ZN10__cxxabiv119__pointer_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv119__pointer_type_infoD1Ev.apply(null,arguments)};var real___ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev=asm["_ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev"];asm["_ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev.apply(null,arguments)};var real___ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev=asm["_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev"];asm["_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev.apply(null,arguments)};var real___get_tzname=asm["_get_tzname"];asm["_get_tzname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___get_tzname.apply(null,arguments)};var real___get_daylight=asm["_get_daylight"];asm["_get_daylight"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___get_daylight.apply(null,arguments)};var real___get_timezone=asm["_get_timezone"];asm["_get_timezone"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___get_timezone.apply(null,arguments)};var real___get_environ=asm["_get_environ"];asm["_get_environ"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___get_environ.apply(null,arguments)};var real____emscripten_environ_constructor=asm["__emscripten_environ_constructor"];asm["__emscripten_environ_constructor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____emscripten_environ_constructor.apply(null,arguments)};var real__realloc_in_place=asm["realloc_in_place"];asm["realloc_in_place"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__realloc_in_place.apply(null,arguments)};var real__memalign=asm["memalign"];asm["memalign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__memalign.apply(null,arguments)};var real__valloc=asm["valloc"];asm["valloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__valloc.apply(null,arguments)};var real__pvalloc=asm["pvalloc"];asm["pvalloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pvalloc.apply(null,arguments)};var real__mallinfo=asm["mallinfo"];asm["mallinfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__mallinfo.apply(null,arguments)};var real__mallopt=asm["mallopt"];asm["mallopt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__mallopt.apply(null,arguments)};var real__malloc_trim=asm["malloc_trim"];asm["malloc_trim"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__malloc_trim.apply(null,arguments)};var real__malloc_stats=asm["malloc_stats"];asm["malloc_stats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__malloc_stats.apply(null,arguments)};var real__malloc_usable_size=asm["malloc_usable_size"];asm["malloc_usable_size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__malloc_usable_size.apply(null,arguments)};var real__malloc_footprint=asm["malloc_footprint"];asm["malloc_footprint"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__malloc_footprint.apply(null,arguments)};var real__malloc_max_footprint=asm["malloc_max_footprint"];asm["malloc_max_footprint"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__malloc_max_footprint.apply(null,arguments)};var real__malloc_footprint_limit=asm["malloc_footprint_limit"];asm["malloc_footprint_limit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__malloc_footprint_limit.apply(null,arguments)};var real__malloc_set_footprint_limit=asm["malloc_set_footprint_limit"];asm["malloc_set_footprint_limit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__malloc_set_footprint_limit.apply(null,arguments)};var real__independent_calloc=asm["independent_calloc"];asm["independent_calloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__independent_calloc.apply(null,arguments)};var real__independent_comalloc=asm["independent_comalloc"];asm["independent_comalloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__independent_comalloc.apply(null,arguments)};var real__bulk_free=asm["bulk_free"];asm["bulk_free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__bulk_free.apply(null,arguments)};var real__emscripten_builtin_malloc=asm["emscripten_builtin_malloc"];asm["emscripten_builtin_malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_builtin_malloc.apply(null,arguments)};var real__emscripten_builtin_free=asm["emscripten_builtin_free"];asm["emscripten_builtin_free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_builtin_free.apply(null,arguments)};var real__emscripten_builtin_memalign=asm["emscripten_builtin_memalign"];asm["emscripten_builtin_memalign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_builtin_memalign.apply(null,arguments)};var real__emscripten_has_threading_support=asm["emscripten_has_threading_support"];asm["emscripten_has_threading_support"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_has_threading_support.apply(null,arguments)};var real__emscripten_num_logical_cores=asm["emscripten_num_logical_cores"];asm["emscripten_num_logical_cores"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_num_logical_cores.apply(null,arguments)};var real__emscripten_force_num_logical_cores=asm["emscripten_force_num_logical_cores"];asm["emscripten_force_num_logical_cores"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_force_num_logical_cores.apply(null,arguments)};var real__emscripten_atomic_exchange_u8=asm["emscripten_atomic_exchange_u8"];asm["emscripten_atomic_exchange_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_exchange_u8.apply(null,arguments)};var real__emscripten_atomic_exchange_u16=asm["emscripten_atomic_exchange_u16"];asm["emscripten_atomic_exchange_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_exchange_u16.apply(null,arguments)};var real__emscripten_atomic_exchange_u32=asm["emscripten_atomic_exchange_u32"];asm["emscripten_atomic_exchange_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_exchange_u32.apply(null,arguments)};var real__emscripten_atomic_exchange_u64=asm["emscripten_atomic_exchange_u64"];asm["emscripten_atomic_exchange_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_exchange_u64.apply(null,arguments)};var real__emscripten_atomic_cas_u8=asm["emscripten_atomic_cas_u8"];asm["emscripten_atomic_cas_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_cas_u8.apply(null,arguments)};var real__emscripten_atomic_cas_u16=asm["emscripten_atomic_cas_u16"];asm["emscripten_atomic_cas_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_cas_u16.apply(null,arguments)};var real__emscripten_atomic_cas_u32=asm["emscripten_atomic_cas_u32"];asm["emscripten_atomic_cas_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_cas_u32.apply(null,arguments)};var real__emscripten_atomic_cas_u64=asm["emscripten_atomic_cas_u64"];asm["emscripten_atomic_cas_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_cas_u64.apply(null,arguments)};var real__emscripten_atomic_load_u8=asm["emscripten_atomic_load_u8"];asm["emscripten_atomic_load_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_load_u8.apply(null,arguments)};var real__emscripten_atomic_load_u16=asm["emscripten_atomic_load_u16"];asm["emscripten_atomic_load_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_load_u16.apply(null,arguments)};var real__emscripten_atomic_load_u32=asm["emscripten_atomic_load_u32"];asm["emscripten_atomic_load_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_load_u32.apply(null,arguments)};var real__emscripten_atomic_load_f32=asm["emscripten_atomic_load_f32"];asm["emscripten_atomic_load_f32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_load_f32.apply(null,arguments)};var real__emscripten_atomic_load_u64=asm["emscripten_atomic_load_u64"];asm["emscripten_atomic_load_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_load_u64.apply(null,arguments)};var real__emscripten_atomic_load_f64=asm["emscripten_atomic_load_f64"];asm["emscripten_atomic_load_f64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_load_f64.apply(null,arguments)};var real__emscripten_atomic_store_u8=asm["emscripten_atomic_store_u8"];asm["emscripten_atomic_store_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_store_u8.apply(null,arguments)};var real__emscripten_atomic_store_u16=asm["emscripten_atomic_store_u16"];asm["emscripten_atomic_store_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_store_u16.apply(null,arguments)};var real__emscripten_atomic_store_u32=asm["emscripten_atomic_store_u32"];asm["emscripten_atomic_store_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_store_u32.apply(null,arguments)};var real__emscripten_atomic_store_f32=asm["emscripten_atomic_store_f32"];asm["emscripten_atomic_store_f32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_store_f32.apply(null,arguments)};var real__emscripten_atomic_store_u64=asm["emscripten_atomic_store_u64"];asm["emscripten_atomic_store_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_store_u64.apply(null,arguments)};var real__emscripten_atomic_store_f64=asm["emscripten_atomic_store_f64"];asm["emscripten_atomic_store_f64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_store_f64.apply(null,arguments)};var real__emscripten_atomic_fence=asm["emscripten_atomic_fence"];asm["emscripten_atomic_fence"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_fence.apply(null,arguments)};var real__emscripten_atomic_add_u8=asm["emscripten_atomic_add_u8"];asm["emscripten_atomic_add_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_add_u8.apply(null,arguments)};var real__emscripten_atomic_add_u16=asm["emscripten_atomic_add_u16"];asm["emscripten_atomic_add_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_add_u16.apply(null,arguments)};var real__emscripten_atomic_add_u32=asm["emscripten_atomic_add_u32"];asm["emscripten_atomic_add_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_add_u32.apply(null,arguments)};var real__emscripten_atomic_add_u64=asm["emscripten_atomic_add_u64"];asm["emscripten_atomic_add_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_add_u64.apply(null,arguments)};var real__emscripten_atomic_sub_u8=asm["emscripten_atomic_sub_u8"];asm["emscripten_atomic_sub_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_sub_u8.apply(null,arguments)};var real__emscripten_atomic_sub_u16=asm["emscripten_atomic_sub_u16"];asm["emscripten_atomic_sub_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_sub_u16.apply(null,arguments)};var real__emscripten_atomic_sub_u32=asm["emscripten_atomic_sub_u32"];asm["emscripten_atomic_sub_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_sub_u32.apply(null,arguments)};var real__emscripten_atomic_sub_u64=asm["emscripten_atomic_sub_u64"];asm["emscripten_atomic_sub_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_sub_u64.apply(null,arguments)};var real__emscripten_atomic_and_u8=asm["emscripten_atomic_and_u8"];asm["emscripten_atomic_and_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_and_u8.apply(null,arguments)};var real__emscripten_atomic_and_u16=asm["emscripten_atomic_and_u16"];asm["emscripten_atomic_and_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_and_u16.apply(null,arguments)};var real__emscripten_atomic_and_u32=asm["emscripten_atomic_and_u32"];asm["emscripten_atomic_and_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_and_u32.apply(null,arguments)};var real__emscripten_atomic_and_u64=asm["emscripten_atomic_and_u64"];asm["emscripten_atomic_and_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_and_u64.apply(null,arguments)};var real__emscripten_atomic_or_u8=asm["emscripten_atomic_or_u8"];asm["emscripten_atomic_or_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_or_u8.apply(null,arguments)};var real__emscripten_atomic_or_u16=asm["emscripten_atomic_or_u16"];asm["emscripten_atomic_or_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_or_u16.apply(null,arguments)};var real__emscripten_atomic_or_u32=asm["emscripten_atomic_or_u32"];asm["emscripten_atomic_or_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_or_u32.apply(null,arguments)};var real__emscripten_atomic_or_u64=asm["emscripten_atomic_or_u64"];asm["emscripten_atomic_or_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_or_u64.apply(null,arguments)};var real__emscripten_atomic_xor_u8=asm["emscripten_atomic_xor_u8"];asm["emscripten_atomic_xor_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_xor_u8.apply(null,arguments)};var real__emscripten_atomic_xor_u16=asm["emscripten_atomic_xor_u16"];asm["emscripten_atomic_xor_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_xor_u16.apply(null,arguments)};var real__emscripten_atomic_xor_u32=asm["emscripten_atomic_xor_u32"];asm["emscripten_atomic_xor_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_xor_u32.apply(null,arguments)};var real__emscripten_atomic_xor_u64=asm["emscripten_atomic_xor_u64"];asm["emscripten_atomic_xor_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_atomic_xor_u64.apply(null,arguments)};var real___emscripten_atomic_fetch_and_add_u64=asm["_emscripten_atomic_fetch_and_add_u64"];asm["_emscripten_atomic_fetch_and_add_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___emscripten_atomic_fetch_and_add_u64.apply(null,arguments)};var real___emscripten_atomic_fetch_and_sub_u64=asm["_emscripten_atomic_fetch_and_sub_u64"];asm["_emscripten_atomic_fetch_and_sub_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___emscripten_atomic_fetch_and_sub_u64.apply(null,arguments)};var real___emscripten_atomic_fetch_and_and_u64=asm["_emscripten_atomic_fetch_and_and_u64"];asm["_emscripten_atomic_fetch_and_and_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___emscripten_atomic_fetch_and_and_u64.apply(null,arguments)};var real___emscripten_atomic_fetch_and_or_u64=asm["_emscripten_atomic_fetch_and_or_u64"];asm["_emscripten_atomic_fetch_and_or_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___emscripten_atomic_fetch_and_or_u64.apply(null,arguments)};var real___emscripten_atomic_fetch_and_xor_u64=asm["_emscripten_atomic_fetch_and_xor_u64"];asm["_emscripten_atomic_fetch_and_xor_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___emscripten_atomic_fetch_and_xor_u64.apply(null,arguments)};var real__emscripten_futex_wait=asm["emscripten_futex_wait"];asm["emscripten_futex_wait"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_futex_wait.apply(null,arguments)};var real__emscripten_futex_wake=asm["emscripten_futex_wake"];asm["emscripten_futex_wake"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_futex_wake.apply(null,arguments)};var real__emscripten_is_main_runtime_thread=asm["emscripten_is_main_runtime_thread"];asm["emscripten_is_main_runtime_thread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_is_main_runtime_thread.apply(null,arguments)};var real__emscripten_main_thread_process_queued_calls=asm["emscripten_main_thread_process_queued_calls"];asm["emscripten_main_thread_process_queued_calls"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_main_thread_process_queued_calls.apply(null,arguments)};var real__emscripten_current_thread_process_queued_calls=asm["emscripten_current_thread_process_queued_calls"];asm["emscripten_current_thread_process_queued_calls"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__emscripten_current_thread_process_queued_calls.apply(null,arguments)};var real__pthread_mutex_timedlock=asm["pthread_mutex_timedlock"];asm["pthread_mutex_timedlock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_mutex_timedlock.apply(null,arguments)};var real__pthread_mutex_consistent=asm["pthread_mutex_consistent"];asm["pthread_mutex_consistent"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_mutex_consistent.apply(null,arguments)};var real__pthread_barrier_init=asm["pthread_barrier_init"];asm["pthread_barrier_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_barrier_init.apply(null,arguments)};var real__pthread_barrier_destroy=asm["pthread_barrier_destroy"];asm["pthread_barrier_destroy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_barrier_destroy.apply(null,arguments)};var real__pthread_barrier_wait=asm["pthread_barrier_wait"];asm["pthread_barrier_wait"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_barrier_wait.apply(null,arguments)};var real__pthread_once=asm["pthread_once"];asm["pthread_once"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__pthread_once.apply(null,arguments)};var real____ashlti3=asm["__ashlti3"];asm["__ashlti3"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____ashlti3.apply(null,arguments)};var real____lshrti3=asm["__lshrti3"];asm["__lshrti3"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real____lshrti3.apply(null,arguments)};var real__setThrew=asm["setThrew"];asm["setThrew"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real__setThrew.apply(null,arguments)};var real_stackSave=asm["stackSave"];asm["stackSave"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_stackSave.apply(null,arguments)};var real_stackAlloc=asm["stackAlloc"];asm["stackAlloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_stackAlloc.apply(null,arguments)};var real_stackRestore=asm["stackRestore"];asm["stackRestore"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_stackRestore.apply(null,arguments)};var real___growWasmMemory=asm["__growWasmMemory"];asm["__growWasmMemory"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real___growWasmMemory.apply(null,arguments)};var real_dynCall_i=asm["dynCall_i"];asm["dynCall_i"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_i.apply(null,arguments)};var real_dynCall_v=asm["dynCall_v"];asm["dynCall_v"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_v.apply(null,arguments)};var real_dynCall_iii=asm["dynCall_iii"];asm["dynCall_iii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iii.apply(null,arguments)};var real_dynCall_ii=asm["dynCall_ii"];asm["dynCall_ii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_ii.apply(null,arguments)};var real_dynCall_vi=asm["dynCall_vi"];asm["dynCall_vi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_vi.apply(null,arguments)};var real_dynCall_iiii=asm["dynCall_iiii"];asm["dynCall_iiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iiii.apply(null,arguments)};var real_dynCall_vii=asm["dynCall_vii"];asm["dynCall_vii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_vii.apply(null,arguments)};var real_dynCall_iiiii=asm["dynCall_iiiii"];asm["dynCall_iiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iiiii.apply(null,arguments)};var real_dynCall_viii=asm["dynCall_viii"];asm["dynCall_viii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_viii.apply(null,arguments)};var real_dynCall_iiiiii=asm["dynCall_iiiiii"];asm["dynCall_iiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iiiiii.apply(null,arguments)};var real_dynCall_ddd=asm["dynCall_ddd"];asm["dynCall_ddd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_ddd.apply(null,arguments)};var real_dynCall_dd=asm["dynCall_dd"];asm["dynCall_dd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_dd.apply(null,arguments)};var real_dynCall_jiji=asm["dynCall_jiji"];asm["dynCall_jiji"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_jiji.apply(null,arguments)};var real_dynCall_iidiiii=asm["dynCall_iidiiii"];asm["dynCall_iidiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_iidiiii.apply(null,arguments)};var real_dynCall_viiiiii=asm["dynCall_viiiiii"];asm["dynCall_viiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_viiiiii.apply(null,arguments)};var real_dynCall_viiiii=asm["dynCall_viiiii"];asm["dynCall_viiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_viiiii.apply(null,arguments)};var real_dynCall_viiii=asm["dynCall_viiii"];asm["dynCall_viiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return real_dynCall_viiii.apply(null,arguments)};Module["asm"]=asm;var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__wasm_call_ctors"].apply(null,arguments)};var _embed_init=Module["_embed_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["embed_init"].apply(null,arguments)};var _PyModule_Create2=Module["_PyModule_Create2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_Create2"].apply(null,arguments)};var _PyModule_GetDict=Module["_PyModule_GetDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_GetDict"].apply(null,arguments)};var _PyUnicode_FromString=Module["_PyUnicode_FromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_FromString"].apply(null,arguments)};var _PyDict_SetItem=Module["_PyDict_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_SetItem"].apply(null,arguments)};var __Z17embed_bridge_pushPc=Module["__Z17embed_bridge_pushPc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Z17embed_bridge_pushPc"].apply(null,arguments)};var __Z16kbd_set_readlinePc=Module["__Z16kbd_set_readlinePc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Z16kbd_set_readlinePc"].apply(null,arguments)};var _PyDict_SetItemString=Module["_PyDict_SetItemString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_SetItemString"].apply(null,arguments)};var __Z10bsd_strlenPKc=Module["__Z10bsd_strlenPKc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Z10bsd_strlenPKc"].apply(null,arguments)};var __Z10bsd_strcmpPKcS0_=Module["__Z10bsd_strcmpPKcS0_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Z10bsd_strcmpPKcS0_"].apply(null,arguments)};var __Z8endswithPKcS0_=Module["__Z8endswithPKcS0_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Z8endswithPKcS0_"].apply(null,arguments)};var __Z7shm_ptrv=Module["__Z7shm_ptrv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Z7shm_ptrv"].apply(null,arguments)};var __Z18wPy_NewInterpreterv=Module["__Z18wPy_NewInterpreterv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Z18wPy_NewInterpreterv"].apply(null,arguments)};var _malloc=Module["_malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["malloc"].apply(null,arguments)};var _chdir=Module["_chdir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["chdir"].apply(null,arguments)};var _PyImport_AppendInittab=Module["_PyImport_AppendInittab"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_AppendInittab"].apply(null,arguments)};var _Py_InitializeEx=Module["_Py_InitializeEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_InitializeEx"].apply(null,arguments)};var __Z8repl_runi=Module["__Z8repl_runi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Z8repl_runi"].apply(null,arguments)};var __Z11shm_get_ptrii=Module["__Z11shm_get_ptrii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Z11shm_get_ptrii"].apply(null,arguments)};var _fiprintf=Module["_fiprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fiprintf"].apply(null,arguments)};var __Z11py_iter_onev=Module["__Z11py_iter_onev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Z11py_iter_onev"].apply(null,arguments)};var __Z13step_tick_tocv=Module["__Z13step_tick_tocv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Z13step_tick_tocv"].apply(null,arguments)};var _fwrite=Module["_fwrite"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fwrite"].apply(null,arguments)};var _PyRun_SimpleStringFlags=Module["_PyRun_SimpleStringFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_SimpleStringFlags"].apply(null,arguments)};var _strlen=Module["_strlen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strlen"].apply(null,arguments)};var _fgets=Module["_fgets"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fgets"].apply(null,arguments)};var _PyRun_InteractiveOneFlags=Module["_PyRun_InteractiveOneFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_InteractiveOneFlags"].apply(null,arguments)};var _puts=Module["_puts"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["puts"].apply(null,arguments)};var _fopen=Module["_fopen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fopen"].apply(null,arguments)};var __Z9dyld_lzmaPKcl=Module["__Z9dyld_lzmaPKcl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Z9dyld_lzmaPKcl"].apply(null,arguments)};var __Z5awaitPKc=Module["__Z5awaitPKc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Z5awaitPKc"].apply(null,arguments)};var _main=Module["_main"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["main"].apply(null,arguments)};var _PyArg_ParseTuple=Module["_PyArg_ParseTuple"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyArg_ParseTuple"].apply(null,arguments)};var _Py_BuildValue=Module["_Py_BuildValue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_BuildValue"].apply(null,arguments)};var _PyInit__abc=Module["_PyInit__abc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__abc"].apply(null,arguments)};var _PyInit__bisect=Module["_PyInit__bisect"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__bisect"].apply(null,arguments)};var _PyInit__codecs=Module["_PyInit__codecs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__codecs"].apply(null,arguments)};var _PyInit__collections=Module["_PyInit__collections"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__collections"].apply(null,arguments)};var _PyInit__contextvars=Module["_PyInit__contextvars"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__contextvars"].apply(null,arguments)};var _PyInit__functools=Module["_PyInit__functools"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__functools"].apply(null,arguments)};var _PyNumber_AsOff_t=Module["_PyNumber_AsOff_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_AsOff_t"].apply(null,arguments)};var __PyIO_get_module_state=Module["__PyIO_get_module_state"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyIO_get_module_state"].apply(null,arguments)};var __PyIO_get_locale_module=Module["__PyIO_get_locale_module"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyIO_get_locale_module"].apply(null,arguments)};var _PyInit__io=Module["_PyInit__io"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__io"].apply(null,arguments)};var _PyInit__json=Module["_PyInit__json"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__json"].apply(null,arguments)};var _PyInit__locale=Module["_PyInit__locale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__locale"].apply(null,arguments)};var __Py_log1p=Module["__Py_log1p"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_log1p"].apply(null,arguments)};var _PyInit__operator=Module["_PyInit__operator"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__operator"].apply(null,arguments)};var _PyInit__random=Module["_PyInit__random"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__random"].apply(null,arguments)};var _PyInit__sre=Module["_PyInit__sre"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__sre"].apply(null,arguments)};var _PyInit__stat=Module["_PyInit__stat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__stat"].apply(null,arguments)};var _PyInit__struct=Module["_PyInit__struct"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__struct"].apply(null,arguments)};var _PyInit__thread=Module["_PyInit__thread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__thread"].apply(null,arguments)};var __PyMem_DumpTraceback=Module["__PyMem_DumpTraceback"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyMem_DumpTraceback"].apply(null,arguments)};var _PyInit__tracemalloc=Module["_PyInit__tracemalloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__tracemalloc"].apply(null,arguments)};var __PyTraceMalloc_Init=Module["__PyTraceMalloc_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTraceMalloc_Init"].apply(null,arguments)};var __PyTraceMalloc_Fini=Module["__PyTraceMalloc_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTraceMalloc_Fini"].apply(null,arguments)};var _PyTraceMalloc_Track=Module["_PyTraceMalloc_Track"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTraceMalloc_Track"].apply(null,arguments)};var _PyTraceMalloc_Untrack=Module["_PyTraceMalloc_Untrack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTraceMalloc_Untrack"].apply(null,arguments)};var __PyTraceMalloc_NewReference=Module["__PyTraceMalloc_NewReference"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTraceMalloc_NewReference"].apply(null,arguments)};var __PyTraceMalloc_GetTraceback=Module["__PyTraceMalloc_GetTraceback"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTraceMalloc_GetTraceback"].apply(null,arguments)};var _PyInit__weakref=Module["_PyInit__weakref"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__weakref"].apply(null,arguments)};var _PyInit_array=Module["_PyInit_array"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_array"].apply(null,arguments)};var _PyInit_atexit=Module["_PyInit_atexit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_atexit"].apply(null,arguments)};var _PyInit_binascii=Module["_PyInit_binascii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_binascii"].apply(null,arguments)};var _PyBlake2_blake2b_init_param=Module["_PyBlake2_blake2b_init_param"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBlake2_blake2b_init_param"].apply(null,arguments)};var _PyBlake2_blake2b_init=Module["_PyBlake2_blake2b_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBlake2_blake2b_init"].apply(null,arguments)};var _PyBlake2_blake2b_init_key=Module["_PyBlake2_blake2b_init_key"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBlake2_blake2b_init_key"].apply(null,arguments)};var _PyBlake2_blake2b_update=Module["_PyBlake2_blake2b_update"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBlake2_blake2b_update"].apply(null,arguments)};var _PyBlake2_blake2b_final=Module["_PyBlake2_blake2b_final"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBlake2_blake2b_final"].apply(null,arguments)};var _PyBlake2_blake2b=Module["_PyBlake2_blake2b"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBlake2_blake2b"].apply(null,arguments)};var _PyInit__blake2=Module["_PyInit__blake2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__blake2"].apply(null,arguments)};var _PyBlake2_blake2s_init_param=Module["_PyBlake2_blake2s_init_param"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBlake2_blake2s_init_param"].apply(null,arguments)};var _PyBlake2_blake2s_init=Module["_PyBlake2_blake2s_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBlake2_blake2s_init"].apply(null,arguments)};var _PyBlake2_blake2s_init_key=Module["_PyBlake2_blake2s_init_key"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBlake2_blake2s_init_key"].apply(null,arguments)};var _PyBlake2_blake2s_update=Module["_PyBlake2_blake2s_update"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBlake2_blake2s_update"].apply(null,arguments)};var _PyBlake2_blake2s_final=Module["_PyBlake2_blake2s_final"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBlake2_blake2s_final"].apply(null,arguments)};var _PyBlake2_blake2s=Module["_PyBlake2_blake2s"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBlake2_blake2s"].apply(null,arguments)};var __PyIO_trap_eintr=Module["__PyIO_trap_eintr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyIO_trap_eintr"].apply(null,arguments)};var _PyInit_cmath=Module["_PyInit_cmath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_cmath"].apply(null,arguments)};var _PyInit_errno=Module["_PyInit_errno"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_errno"].apply(null,arguments)};var _PyInit_faulthandler=Module["_PyInit_faulthandler"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_faulthandler"].apply(null,arguments)};var __PyFaulthandler_Init=Module["__PyFaulthandler_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFaulthandler_Init"].apply(null,arguments)};var __PyFaulthandler_Fini=Module["__PyFaulthandler_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFaulthandler_Fini"].apply(null,arguments)};var _PyInit_fcntl=Module["_PyInit_fcntl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_fcntl"].apply(null,arguments)};var __PyFileIO_closed=Module["__PyFileIO_closed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFileIO_closed"].apply(null,arguments)};var __PyGC_Initialize=Module["__PyGC_Initialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGC_Initialize"].apply(null,arguments)};var _PyInit_gc=Module["_PyInit_gc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_gc"].apply(null,arguments)};var _PyGC_Collect=Module["_PyGC_Collect"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyGC_Collect"].apply(null,arguments)};var __PyGC_CollectIfEnabled=Module["__PyGC_CollectIfEnabled"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGC_CollectIfEnabled"].apply(null,arguments)};var __PyGC_CollectNoFail=Module["__PyGC_CollectNoFail"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGC_CollectNoFail"].apply(null,arguments)};var __PyGC_DumpShutdownStats=Module["__PyGC_DumpShutdownStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGC_DumpShutdownStats"].apply(null,arguments)};var __PyGC_Fini=Module["__PyGC_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGC_Fini"].apply(null,arguments)};var __PyGC_Dump=Module["__PyGC_Dump"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGC_Dump"].apply(null,arguments)};var _PyObject_GC_Track=Module["_PyObject_GC_Track"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_GC_Track"].apply(null,arguments)};var _PyObject_GC_UnTrack=Module["_PyObject_GC_UnTrack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_GC_UnTrack"].apply(null,arguments)};var __PyObject_GC_Malloc=Module["__PyObject_GC_Malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_GC_Malloc"].apply(null,arguments)};var __PyObject_GC_Calloc=Module["__PyObject_GC_Calloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_GC_Calloc"].apply(null,arguments)};var __PyObject_GC_New=Module["__PyObject_GC_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_GC_New"].apply(null,arguments)};var __PyObject_GC_NewVar=Module["__PyObject_GC_NewVar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_GC_NewVar"].apply(null,arguments)};var __PyObject_GC_Resize=Module["__PyObject_GC_Resize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_GC_Resize"].apply(null,arguments)};var _PyObject_GC_Del=Module["_PyObject_GC_Del"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_GC_Del"].apply(null,arguments)};var _Py_GetBuildInfo=Module["_Py_GetBuildInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_GetBuildInfo"].apply(null,arguments)};var __Py_gitversion=Module["__Py_gitversion"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_gitversion"].apply(null,arguments)};var __Py_gitidentifier=Module["__Py_gitidentifier"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_gitidentifier"].apply(null,arguments)};var __PyPathConfig_Calculate=Module["__PyPathConfig_Calculate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPathConfig_Calculate"].apply(null,arguments)};var __Py_hashtable_hash_ptr=Module["__Py_hashtable_hash_ptr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_hashtable_hash_ptr"].apply(null,arguments)};var __Py_hashtable_compare_direct=Module["__Py_hashtable_compare_direct"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_hashtable_compare_direct"].apply(null,arguments)};var __Py_hashtable_new_full=Module["__Py_hashtable_new_full"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_hashtable_new_full"].apply(null,arguments)};var __Py_hashtable_new=Module["__Py_hashtable_new"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_hashtable_new"].apply(null,arguments)};var __Py_hashtable_size=Module["__Py_hashtable_size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_hashtable_size"].apply(null,arguments)};var __Py_hashtable_get_entry=Module["__Py_hashtable_get_entry"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_hashtable_get_entry"].apply(null,arguments)};var __Py_hashtable_set=Module["__Py_hashtable_set"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_hashtable_set"].apply(null,arguments)};var __Py_hashtable_get=Module["__Py_hashtable_get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_hashtable_get"].apply(null,arguments)};var __Py_hashtable_pop=Module["__Py_hashtable_pop"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_hashtable_pop"].apply(null,arguments)};var __Py_hashtable_foreach=Module["__Py_hashtable_foreach"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_hashtable_foreach"].apply(null,arguments)};var __Py_hashtable_clear=Module["__Py_hashtable_clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_hashtable_clear"].apply(null,arguments)};var __Py_hashtable_destroy=Module["__Py_hashtable_destroy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_hashtable_destroy"].apply(null,arguments)};var __Py_hashtable_copy=Module["__Py_hashtable_copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_hashtable_copy"].apply(null,arguments)};var __PyIOBase_check_closed=Module["__PyIOBase_check_closed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyIOBase_check_closed"].apply(null,arguments)};var __PyIOBase_finalize=Module["__PyIOBase_finalize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyIOBase_finalize"].apply(null,arguments)};var __PyIOBase_check_seekable=Module["__PyIOBase_check_seekable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyIOBase_check_seekable"].apply(null,arguments)};var __PyIOBase_check_readable=Module["__PyIOBase_check_readable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyIOBase_check_readable"].apply(null,arguments)};var __PyIOBase_check_writable=Module["__PyIOBase_check_writable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyIOBase_check_writable"].apply(null,arguments)};var _PyInit_itertools=Module["_PyInit_itertools"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_itertools"].apply(null,arguments)};var _PyInit_math=Module["_PyInit_math"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_math"].apply(null,arguments)};var _PyInit__md5=Module["_PyInit__md5"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__md5"].apply(null,arguments)};var _PyOS_BeforeFork=Module["_PyOS_BeforeFork"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_BeforeFork"].apply(null,arguments)};var _PyOS_AfterFork_Parent=Module["_PyOS_AfterFork_Parent"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_AfterFork_Parent"].apply(null,arguments)};var _PyOS_AfterFork_Child=Module["_PyOS_AfterFork_Child"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_AfterFork_Child"].apply(null,arguments)};var _PyOS_AfterFork=Module["_PyOS_AfterFork"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_AfterFork"].apply(null,arguments)};var __PyLong_FromUid=Module["__PyLong_FromUid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_FromUid"].apply(null,arguments)};var __PyLong_FromGid=Module["__PyLong_FromGid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_FromGid"].apply(null,arguments)};var __Py_Uid_Converter=Module["__Py_Uid_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Uid_Converter"].apply(null,arguments)};var __Py_Gid_Converter=Module["__Py_Gid_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Gid_Converter"].apply(null,arguments)};var _PyOS_FSPath=Module["_PyOS_FSPath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_FSPath"].apply(null,arguments)};var _PyInit_posix=Module["_PyInit_posix"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_posix"].apply(null,arguments)};var _PyInit_pwd=Module["_PyInit_pwd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_pwd"].apply(null,arguments)};var _PyInit_select=Module["_PyInit_select"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_select"].apply(null,arguments)};var _PyInit__sha1=Module["_PyInit__sha1"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__sha1"].apply(null,arguments)};var _PyInit__sha256=Module["_PyInit__sha256"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__sha256"].apply(null,arguments)};var __PySHA3_Keccak_HashInitialize=Module["__PySHA3_Keccak_HashInitialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_Keccak_HashInitialize"].apply(null,arguments)};var __PySHA3_KeccakWidth1600_SpongeInitialize=Module["__PySHA3_KeccakWidth1600_SpongeInitialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakWidth1600_SpongeInitialize"].apply(null,arguments)};var __PySHA3_Keccak_HashUpdate=Module["__PySHA3_Keccak_HashUpdate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_Keccak_HashUpdate"].apply(null,arguments)};var __PySHA3_KeccakWidth1600_SpongeAbsorb=Module["__PySHA3_KeccakWidth1600_SpongeAbsorb"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakWidth1600_SpongeAbsorb"].apply(null,arguments)};var __PySHA3_KeccakP1600_AddLanes=Module["__PySHA3_KeccakP1600_AddLanes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_AddLanes"].apply(null,arguments)};var __PySHA3_KeccakP1600_Permute_Nrounds=Module["__PySHA3_KeccakP1600_Permute_Nrounds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_Permute_Nrounds"].apply(null,arguments)};var __PySHA3_KeccakP1600_AddBytes=Module["__PySHA3_KeccakP1600_AddBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_AddBytes"].apply(null,arguments)};var __PySHA3_Keccak_HashFinal=Module["__PySHA3_Keccak_HashFinal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_Keccak_HashFinal"].apply(null,arguments)};var __PySHA3_KeccakWidth1600_SpongeAbsorbLastFewBits=Module["__PySHA3_KeccakWidth1600_SpongeAbsorbLastFewBits"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakWidth1600_SpongeAbsorbLastFewBits"].apply(null,arguments)};var __PySHA3_KeccakWidth1600_SpongeSqueeze=Module["__PySHA3_KeccakWidth1600_SpongeSqueeze"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakWidth1600_SpongeSqueeze"].apply(null,arguments)};var __PySHA3_KeccakP1600_ExtractLanes=Module["__PySHA3_KeccakP1600_ExtractLanes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_ExtractLanes"].apply(null,arguments)};var __PySHA3_KeccakP1600_ExtractBytes=Module["__PySHA3_KeccakP1600_ExtractBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_ExtractBytes"].apply(null,arguments)};var __PySHA3_Keccak_HashSqueeze=Module["__PySHA3_Keccak_HashSqueeze"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_Keccak_HashSqueeze"].apply(null,arguments)};var __PySHA3_KeccakWidth1600_Sponge=Module["__PySHA3_KeccakWidth1600_Sponge"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakWidth1600_Sponge"].apply(null,arguments)};var __PySHA3_KeccakP1600_Initialize=Module["__PySHA3_KeccakP1600_Initialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_Initialize"].apply(null,arguments)};var __PySHA3_KeccakP1600_Permute_24rounds=Module["__PySHA3_KeccakP1600_Permute_24rounds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_Permute_24rounds"].apply(null,arguments)};var __PySHA3_KeccakP1600_AddByte=Module["__PySHA3_KeccakP1600_AddByte"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_AddByte"].apply(null,arguments)};var __PySHA3_KeccakP1600_SetBytesInLaneToZero=Module["__PySHA3_KeccakP1600_SetBytesInLaneToZero"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_SetBytesInLaneToZero"].apply(null,arguments)};var __PySHA3_KeccakP1600_AddBytesInLane=Module["__PySHA3_KeccakP1600_AddBytesInLane"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_AddBytesInLane"].apply(null,arguments)};var __PySHA3_KeccakP1600_OverwriteBytesInLane=Module["__PySHA3_KeccakP1600_OverwriteBytesInLane"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_OverwriteBytesInLane"].apply(null,arguments)};var __PySHA3_KeccakP1600_OverwriteLanes=Module["__PySHA3_KeccakP1600_OverwriteLanes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_OverwriteLanes"].apply(null,arguments)};var __PySHA3_KeccakP1600_OverwriteBytes=Module["__PySHA3_KeccakP1600_OverwriteBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_OverwriteBytes"].apply(null,arguments)};var __PySHA3_KeccakP1600_OverwriteWithZeroes=Module["__PySHA3_KeccakP1600_OverwriteWithZeroes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_OverwriteWithZeroes"].apply(null,arguments)};var __PySHA3_KeccakP1600_ExtractBytesInLane=Module["__PySHA3_KeccakP1600_ExtractBytesInLane"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_ExtractBytesInLane"].apply(null,arguments)};var __PySHA3_KeccakP1600_ExtractAndAddBytesInLane=Module["__PySHA3_KeccakP1600_ExtractAndAddBytesInLane"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_ExtractAndAddBytesInLane"].apply(null,arguments)};var __PySHA3_KeccakP1600_ExtractAndAddLanes=Module["__PySHA3_KeccakP1600_ExtractAndAddLanes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_ExtractAndAddLanes"].apply(null,arguments)};var __PySHA3_KeccakP1600_ExtractAndAddBytes=Module["__PySHA3_KeccakP1600_ExtractAndAddBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_ExtractAndAddBytes"].apply(null,arguments)};var __PySHA3_KeccakP1600_Permute_12rounds=Module["__PySHA3_KeccakP1600_Permute_12rounds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySHA3_KeccakP1600_Permute_12rounds"].apply(null,arguments)};var _PyInit__sha3=Module["_PyInit__sha3"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__sha3"].apply(null,arguments)};var _PyInit__sha512=Module["_PyInit__sha512"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__sha512"].apply(null,arguments)};var _PySignal_SetWakeupFd=Module["_PySignal_SetWakeupFd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySignal_SetWakeupFd"].apply(null,arguments)};var _PyInit__signal=Module["_PyInit__signal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__signal"].apply(null,arguments)};var _PyErr_CheckSignals=Module["_PyErr_CheckSignals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_CheckSignals"].apply(null,arguments)};var __PyErr_CheckSignals=Module["__PyErr_CheckSignals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_CheckSignals"].apply(null,arguments)};var _PyErr_SetInterrupt=Module["_PyErr_SetInterrupt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SetInterrupt"].apply(null,arguments)};var _PyOS_InitInterrupts=Module["_PyOS_InitInterrupts"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_InitInterrupts"].apply(null,arguments)};var _PyOS_FiniInterrupts=Module["_PyOS_FiniInterrupts"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_FiniInterrupts"].apply(null,arguments)};var _PyOS_InterruptOccurred=Module["_PyOS_InterruptOccurred"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_InterruptOccurred"].apply(null,arguments)};var __PySignal_AfterFork=Module["__PySignal_AfterFork"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySignal_AfterFork"].apply(null,arguments)};var __PyOS_IsMainThread=Module["__PyOS_IsMainThread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyOS_IsMainThread"].apply(null,arguments)};var _PyInit__socket=Module["_PyInit__socket"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__socket"].apply(null,arguments)};var _PyInit__symtable=Module["_PyInit__symtable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__symtable"].apply(null,arguments)};var _PyInit_termios=Module["_PyInit_termios"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_termios"].apply(null,arguments)};var __PyIncrementalNewlineDecoder_decode=Module["__PyIncrementalNewlineDecoder_decode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyIncrementalNewlineDecoder_decode"].apply(null,arguments)};var __PyIO_find_line_ending=Module["__PyIO_find_line_ending"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyIO_find_line_ending"].apply(null,arguments)};var _PyInit_time=Module["_PyInit_time"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_time"].apply(null,arguments)};var _PyInit_unicodedata=Module["_PyInit_unicodedata"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_unicodedata"].apply(null,arguments)};var _PyInit_xxsubtype=Module["_PyInit_xxsubtype"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_xxsubtype"].apply(null,arguments)};var _PyInit_zlib=Module["_PyInit_zlib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit_zlib"].apply(null,arguments)};var _PyObject_Type=Module["_PyObject_Type"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Type"].apply(null,arguments)};var _PyObject_Size=Module["_PyObject_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Size"].apply(null,arguments)};var _PyMapping_Size=Module["_PyMapping_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMapping_Size"].apply(null,arguments)};var _PyObject_Length=Module["_PyObject_Length"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Length"].apply(null,arguments)};var __PyObject_HasLen=Module["__PyObject_HasLen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_HasLen"].apply(null,arguments)};var _PyObject_LengthHint=Module["_PyObject_LengthHint"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_LengthHint"].apply(null,arguments)};var _PyObject_GetItem=Module["_PyObject_GetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_GetItem"].apply(null,arguments)};var _PyNumber_AsSsize_t=Module["_PyNumber_AsSsize_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_AsSsize_t"].apply(null,arguments)};var _PySequence_GetItem=Module["_PySequence_GetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_GetItem"].apply(null,arguments)};var _PyNumber_Index=Module["_PyNumber_Index"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Index"].apply(null,arguments)};var _PyObject_SetItem=Module["_PyObject_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_SetItem"].apply(null,arguments)};var _PySequence_SetItem=Module["_PySequence_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_SetItem"].apply(null,arguments)};var _PyObject_DelItem=Module["_PyObject_DelItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_DelItem"].apply(null,arguments)};var _PySequence_DelItem=Module["_PySequence_DelItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_DelItem"].apply(null,arguments)};var _PyObject_DelItemString=Module["_PyObject_DelItemString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_DelItemString"].apply(null,arguments)};var _PyObject_CheckReadBuffer=Module["_PyObject_CheckReadBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_CheckReadBuffer"].apply(null,arguments)};var _PyBuffer_Release=Module["_PyBuffer_Release"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBuffer_Release"].apply(null,arguments)};var _PyObject_AsCharBuffer=Module["_PyObject_AsCharBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_AsCharBuffer"].apply(null,arguments)};var _PyObject_AsReadBuffer=Module["_PyObject_AsReadBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_AsReadBuffer"].apply(null,arguments)};var _PyObject_AsWriteBuffer=Module["_PyObject_AsWriteBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_AsWriteBuffer"].apply(null,arguments)};var _PyObject_GetBuffer=Module["_PyObject_GetBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_GetBuffer"].apply(null,arguments)};var _PyBuffer_IsContiguous=Module["_PyBuffer_IsContiguous"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBuffer_IsContiguous"].apply(null,arguments)};var _PyBuffer_GetPointer=Module["_PyBuffer_GetPointer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBuffer_GetPointer"].apply(null,arguments)};var __Py_add_one_to_index_F=Module["__Py_add_one_to_index_F"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_add_one_to_index_F"].apply(null,arguments)};var __Py_add_one_to_index_C=Module["__Py_add_one_to_index_C"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_add_one_to_index_C"].apply(null,arguments)};var _PyBuffer_FromContiguous=Module["_PyBuffer_FromContiguous"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBuffer_FromContiguous"].apply(null,arguments)};var _PyObject_CopyData=Module["_PyObject_CopyData"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_CopyData"].apply(null,arguments)};var _PyBuffer_FillContiguousStrides=Module["_PyBuffer_FillContiguousStrides"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBuffer_FillContiguousStrides"].apply(null,arguments)};var _PyBuffer_FillInfo=Module["_PyBuffer_FillInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBuffer_FillInfo"].apply(null,arguments)};var _PyObject_Format=Module["_PyObject_Format"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Format"].apply(null,arguments)};var _PyNumber_Check=Module["_PyNumber_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Check"].apply(null,arguments)};var _PyNumber_Or=Module["_PyNumber_Or"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Or"].apply(null,arguments)};var _PyNumber_Xor=Module["_PyNumber_Xor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Xor"].apply(null,arguments)};var _PyNumber_And=Module["_PyNumber_And"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_And"].apply(null,arguments)};var _PyNumber_Lshift=Module["_PyNumber_Lshift"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Lshift"].apply(null,arguments)};var _PyNumber_Rshift=Module["_PyNumber_Rshift"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Rshift"].apply(null,arguments)};var _PyNumber_Subtract=Module["_PyNumber_Subtract"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Subtract"].apply(null,arguments)};var _PyNumber_Divmod=Module["_PyNumber_Divmod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Divmod"].apply(null,arguments)};var _PyNumber_Add=Module["_PyNumber_Add"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Add"].apply(null,arguments)};var _PyNumber_Multiply=Module["_PyNumber_Multiply"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Multiply"].apply(null,arguments)};var _PyNumber_MatrixMultiply=Module["_PyNumber_MatrixMultiply"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_MatrixMultiply"].apply(null,arguments)};var _PyNumber_FloorDivide=Module["_PyNumber_FloorDivide"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_FloorDivide"].apply(null,arguments)};var _PyNumber_TrueDivide=Module["_PyNumber_TrueDivide"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_TrueDivide"].apply(null,arguments)};var _PyNumber_Remainder=Module["_PyNumber_Remainder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Remainder"].apply(null,arguments)};var _PyNumber_Power=Module["_PyNumber_Power"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Power"].apply(null,arguments)};var _PyNumber_InPlaceOr=Module["_PyNumber_InPlaceOr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InPlaceOr"].apply(null,arguments)};var _PyNumber_InPlaceXor=Module["_PyNumber_InPlaceXor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InPlaceXor"].apply(null,arguments)};var _PyNumber_InPlaceAnd=Module["_PyNumber_InPlaceAnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InPlaceAnd"].apply(null,arguments)};var _PyNumber_InPlaceLshift=Module["_PyNumber_InPlaceLshift"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InPlaceLshift"].apply(null,arguments)};var _PyNumber_InPlaceRshift=Module["_PyNumber_InPlaceRshift"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InPlaceRshift"].apply(null,arguments)};var _PyNumber_InPlaceSubtract=Module["_PyNumber_InPlaceSubtract"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InPlaceSubtract"].apply(null,arguments)};var _PyNumber_InMatrixMultiply=Module["_PyNumber_InMatrixMultiply"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InMatrixMultiply"].apply(null,arguments)};var _PyNumber_InPlaceFloorDivide=Module["_PyNumber_InPlaceFloorDivide"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InPlaceFloorDivide"].apply(null,arguments)};var _PyNumber_InPlaceTrueDivide=Module["_PyNumber_InPlaceTrueDivide"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InPlaceTrueDivide"].apply(null,arguments)};var _PyNumber_InPlaceAdd=Module["_PyNumber_InPlaceAdd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InPlaceAdd"].apply(null,arguments)};var _PyNumber_InPlaceMultiply=Module["_PyNumber_InPlaceMultiply"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InPlaceMultiply"].apply(null,arguments)};var _PyNumber_InPlaceMatrixMultiply=Module["_PyNumber_InPlaceMatrixMultiply"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InPlaceMatrixMultiply"].apply(null,arguments)};var _PyNumber_InPlaceRemainder=Module["_PyNumber_InPlaceRemainder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InPlaceRemainder"].apply(null,arguments)};var _PyNumber_InPlacePower=Module["_PyNumber_InPlacePower"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_InPlacePower"].apply(null,arguments)};var _PyNumber_Negative=Module["_PyNumber_Negative"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Negative"].apply(null,arguments)};var _PyNumber_Positive=Module["_PyNumber_Positive"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Positive"].apply(null,arguments)};var _PyNumber_Invert=Module["_PyNumber_Invert"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Invert"].apply(null,arguments)};var _PyNumber_Absolute=Module["_PyNumber_Absolute"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Absolute"].apply(null,arguments)};var _PyIndex_Check=Module["_PyIndex_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyIndex_Check"].apply(null,arguments)};var _PyNumber_Long=Module["_PyNumber_Long"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Long"].apply(null,arguments)};var _PyNumber_Float=Module["_PyNumber_Float"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_Float"].apply(null,arguments)};var _PyNumber_ToBase=Module["_PyNumber_ToBase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNumber_ToBase"].apply(null,arguments)};var _PySequence_Check=Module["_PySequence_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_Check"].apply(null,arguments)};var _PySequence_Size=Module["_PySequence_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_Size"].apply(null,arguments)};var _PySequence_Length=Module["_PySequence_Length"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_Length"].apply(null,arguments)};var _PySequence_Concat=Module["_PySequence_Concat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_Concat"].apply(null,arguments)};var _PySequence_Repeat=Module["_PySequence_Repeat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_Repeat"].apply(null,arguments)};var _PySequence_InPlaceConcat=Module["_PySequence_InPlaceConcat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_InPlaceConcat"].apply(null,arguments)};var _PySequence_InPlaceRepeat=Module["_PySequence_InPlaceRepeat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_InPlaceRepeat"].apply(null,arguments)};var _PySequence_GetSlice=Module["_PySequence_GetSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_GetSlice"].apply(null,arguments)};var _PySequence_SetSlice=Module["_PySequence_SetSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_SetSlice"].apply(null,arguments)};var _PySequence_DelSlice=Module["_PySequence_DelSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_DelSlice"].apply(null,arguments)};var _PySequence_Tuple=Module["_PySequence_Tuple"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_Tuple"].apply(null,arguments)};var _PyObject_GetIter=Module["_PyObject_GetIter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_GetIter"].apply(null,arguments)};var _PyIter_Next=Module["_PyIter_Next"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyIter_Next"].apply(null,arguments)};var _PySequence_List=Module["_PySequence_List"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_List"].apply(null,arguments)};var _PySequence_Fast=Module["_PySequence_Fast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_Fast"].apply(null,arguments)};var __PySequence_IterSearch=Module["__PySequence_IterSearch"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySequence_IterSearch"].apply(null,arguments)};var _PySequence_Count=Module["_PySequence_Count"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_Count"].apply(null,arguments)};var _PySequence_Contains=Module["_PySequence_Contains"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_Contains"].apply(null,arguments)};var _PySequence_In=Module["_PySequence_In"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_In"].apply(null,arguments)};var _PySequence_Index=Module["_PySequence_Index"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySequence_Index"].apply(null,arguments)};var _PyMapping_Check=Module["_PyMapping_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMapping_Check"].apply(null,arguments)};var _PyMapping_Length=Module["_PyMapping_Length"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMapping_Length"].apply(null,arguments)};var _PyMapping_GetItemString=Module["_PyMapping_GetItemString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMapping_GetItemString"].apply(null,arguments)};var _PyMapping_SetItemString=Module["_PyMapping_SetItemString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMapping_SetItemString"].apply(null,arguments)};var _PyMapping_HasKeyString=Module["_PyMapping_HasKeyString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMapping_HasKeyString"].apply(null,arguments)};var _PyMapping_HasKey=Module["_PyMapping_HasKey"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMapping_HasKey"].apply(null,arguments)};var _PyMapping_Keys=Module["_PyMapping_Keys"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMapping_Keys"].apply(null,arguments)};var _PyMapping_Items=Module["_PyMapping_Items"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMapping_Items"].apply(null,arguments)};var _PyMapping_Values=Module["_PyMapping_Values"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMapping_Values"].apply(null,arguments)};var _PyObject_IsInstance=Module["_PyObject_IsInstance"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_IsInstance"].apply(null,arguments)};var _PyObject_IsSubclass=Module["_PyObject_IsSubclass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_IsSubclass"].apply(null,arguments)};var __PyObject_RealIsInstance=Module["__PyObject_RealIsInstance"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_RealIsInstance"].apply(null,arguments)};var __PyObject_RealIsSubclass=Module["__PyObject_RealIsSubclass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_RealIsSubclass"].apply(null,arguments)};var _PyIter_Check=Module["_PyIter_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyIter_Check"].apply(null,arguments)};var __PySequence_BytesToCharpArray=Module["__PySequence_BytesToCharpArray"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySequence_BytesToCharpArray"].apply(null,arguments)};var __Py_FreeCharPArray=Module["__Py_FreeCharPArray"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_FreeCharPArray"].apply(null,arguments)};var __PyAccu_Init=Module["__PyAccu_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyAccu_Init"].apply(null,arguments)};var __PyAccu_Accumulate=Module["__PyAccu_Accumulate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyAccu_Accumulate"].apply(null,arguments)};var __PyAccu_FinishAsList=Module["__PyAccu_FinishAsList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyAccu_FinishAsList"].apply(null,arguments)};var __PyAccu_Finish=Module["__PyAccu_Finish"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyAccu_Finish"].apply(null,arguments)};var __PyAccu_Destroy=Module["__PyAccu_Destroy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyAccu_Destroy"].apply(null,arguments)};var _PyBool_FromLong=Module["_PyBool_FromLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBool_FromLong"].apply(null,arguments)};var _PyByteArray_FromObject=Module["_PyByteArray_FromObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyByteArray_FromObject"].apply(null,arguments)};var _PyByteArray_FromStringAndSize=Module["_PyByteArray_FromStringAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyByteArray_FromStringAndSize"].apply(null,arguments)};var _PyByteArray_Size=Module["_PyByteArray_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyByteArray_Size"].apply(null,arguments)};var _PyByteArray_AsString=Module["_PyByteArray_AsString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyByteArray_AsString"].apply(null,arguments)};var _PyByteArray_Resize=Module["_PyByteArray_Resize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyByteArray_Resize"].apply(null,arguments)};var _PyByteArray_Concat=Module["_PyByteArray_Concat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyByteArray_Concat"].apply(null,arguments)};var __Py_bytes_isspace=Module["__Py_bytes_isspace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_isspace"].apply(null,arguments)};var __Py_bytes_isalpha=Module["__Py_bytes_isalpha"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_isalpha"].apply(null,arguments)};var __Py_bytes_isalnum=Module["__Py_bytes_isalnum"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_isalnum"].apply(null,arguments)};var __Py_bytes_isascii=Module["__Py_bytes_isascii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_isascii"].apply(null,arguments)};var __Py_bytes_isdigit=Module["__Py_bytes_isdigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_isdigit"].apply(null,arguments)};var __Py_bytes_islower=Module["__Py_bytes_islower"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_islower"].apply(null,arguments)};var __Py_bytes_isupper=Module["__Py_bytes_isupper"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_isupper"].apply(null,arguments)};var __Py_bytes_istitle=Module["__Py_bytes_istitle"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_istitle"].apply(null,arguments)};var __Py_bytes_lower=Module["__Py_bytes_lower"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_lower"].apply(null,arguments)};var __Py_bytes_upper=Module["__Py_bytes_upper"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_upper"].apply(null,arguments)};var __Py_bytes_title=Module["__Py_bytes_title"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_title"].apply(null,arguments)};var __Py_bytes_capitalize=Module["__Py_bytes_capitalize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_capitalize"].apply(null,arguments)};var __Py_bytes_swapcase=Module["__Py_bytes_swapcase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_swapcase"].apply(null,arguments)};var __Py_bytes_maketrans=Module["__Py_bytes_maketrans"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_maketrans"].apply(null,arguments)};var __Py_bytes_find=Module["__Py_bytes_find"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_find"].apply(null,arguments)};var __Py_bytes_index=Module["__Py_bytes_index"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_index"].apply(null,arguments)};var __Py_bytes_rfind=Module["__Py_bytes_rfind"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_rfind"].apply(null,arguments)};var __Py_bytes_rindex=Module["__Py_bytes_rindex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_rindex"].apply(null,arguments)};var __Py_bytes_count=Module["__Py_bytes_count"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_count"].apply(null,arguments)};var __Py_bytes_contains=Module["__Py_bytes_contains"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_contains"].apply(null,arguments)};var __Py_bytes_startswith=Module["__Py_bytes_startswith"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_startswith"].apply(null,arguments)};var __Py_bytes_endswith=Module["__Py_bytes_endswith"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_bytes_endswith"].apply(null,arguments)};var _PyBytes_FromStringAndSize=Module["_PyBytes_FromStringAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBytes_FromStringAndSize"].apply(null,arguments)};var _PyBytes_FromString=Module["_PyBytes_FromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBytes_FromString"].apply(null,arguments)};var _PyBytes_FromFormatV=Module["_PyBytes_FromFormatV"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBytes_FromFormatV"].apply(null,arguments)};var __PyBytesWriter_Resize=Module["__PyBytesWriter_Resize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBytesWriter_Resize"].apply(null,arguments)};var __PyBytesWriter_Finish=Module["__PyBytesWriter_Finish"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBytesWriter_Finish"].apply(null,arguments)};var __PyBytesWriter_Init=Module["__PyBytesWriter_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBytesWriter_Init"].apply(null,arguments)};var __PyBytesWriter_Alloc=Module["__PyBytesWriter_Alloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBytesWriter_Alloc"].apply(null,arguments)};var __PyBytesWriter_WriteBytes=Module["__PyBytesWriter_WriteBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBytesWriter_WriteBytes"].apply(null,arguments)};var __PyBytes_Resize=Module["__PyBytes_Resize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBytes_Resize"].apply(null,arguments)};var __PyBytesWriter_Dealloc=Module["__PyBytesWriter_Dealloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBytesWriter_Dealloc"].apply(null,arguments)};var _PyBytes_FromFormat=Module["_PyBytes_FromFormat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBytes_FromFormat"].apply(null,arguments)};var __PyBytes_FormatEx=Module["__PyBytes_FormatEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBytes_FormatEx"].apply(null,arguments)};var __PyBytesWriter_Prepare=Module["__PyBytesWriter_Prepare"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBytesWriter_Prepare"].apply(null,arguments)};var __PyBytes_DecodeEscape=Module["__PyBytes_DecodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBytes_DecodeEscape"].apply(null,arguments)};var _PyBytes_DecodeEscape=Module["_PyBytes_DecodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBytes_DecodeEscape"].apply(null,arguments)};var _PyBytes_Size=Module["_PyBytes_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBytes_Size"].apply(null,arguments)};var _PyBytes_AsString=Module["_PyBytes_AsString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBytes_AsString"].apply(null,arguments)};var _PyBytes_AsStringAndSize=Module["_PyBytes_AsStringAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBytes_AsStringAndSize"].apply(null,arguments)};var _PyBytes_Repr=Module["_PyBytes_Repr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBytes_Repr"].apply(null,arguments)};var __PyBytes_Join=Module["__PyBytes_Join"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBytes_Join"].apply(null,arguments)};var __PyBytes_FromHex=Module["__PyBytes_FromHex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBytes_FromHex"].apply(null,arguments)};var _PyBytes_FromObject=Module["_PyBytes_FromObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBytes_FromObject"].apply(null,arguments)};var _PyBytes_Concat=Module["_PyBytes_Concat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBytes_Concat"].apply(null,arguments)};var _PyBytes_ConcatAndDel=Module["_PyBytes_ConcatAndDel"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBytes_ConcatAndDel"].apply(null,arguments)};var _PyBytes_Fini=Module["_PyBytes_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBytes_Fini"].apply(null,arguments)};var __Py_CheckFunctionResult=Module["__Py_CheckFunctionResult"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_CheckFunctionResult"].apply(null,arguments)};var __PyObject_FastCallDict=Module["__PyObject_FastCallDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_FastCallDict"].apply(null,arguments)};var __PyObject_MakeTpCall=Module["__PyObject_MakeTpCall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_MakeTpCall"].apply(null,arguments)};var __PyStack_UnpackDict=Module["__PyStack_UnpackDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyStack_UnpackDict"].apply(null,arguments)};var __PyStack_AsDict=Module["__PyStack_AsDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyStack_AsDict"].apply(null,arguments)};var _PyVectorcall_Call=Module["_PyVectorcall_Call"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyVectorcall_Call"].apply(null,arguments)};var _PyObject_Call=Module["_PyObject_Call"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Call"].apply(null,arguments)};var __PyFunction_FastCallDict=Module["__PyFunction_FastCallDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFunction_FastCallDict"].apply(null,arguments)};var __PyFunction_Vectorcall=Module["__PyFunction_Vectorcall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFunction_Vectorcall"].apply(null,arguments)};var __PyMethodDef_RawFastCallDict=Module["__PyMethodDef_RawFastCallDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyMethodDef_RawFastCallDict"].apply(null,arguments)};var __PyCFunction_FastCallDict=Module["__PyCFunction_FastCallDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCFunction_FastCallDict"].apply(null,arguments)};var __PyMethodDef_RawFastCallKeywords=Module["__PyMethodDef_RawFastCallKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyMethodDef_RawFastCallKeywords"].apply(null,arguments)};var _PyCFunction_Call=Module["_PyCFunction_Call"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCFunction_Call"].apply(null,arguments)};var _PyEval_CallObjectWithKeywords=Module["_PyEval_CallObjectWithKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_CallObjectWithKeywords"].apply(null,arguments)};var _PyObject_CallObject=Module["_PyObject_CallObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_CallObject"].apply(null,arguments)};var __PyObject_FastCall_Prepend=Module["__PyObject_FastCall_Prepend"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_FastCall_Prepend"].apply(null,arguments)};var __PyObject_Call_Prepend=Module["__PyObject_Call_Prepend"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_Call_Prepend"].apply(null,arguments)};var _PyObject_CallFunction=Module["_PyObject_CallFunction"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_CallFunction"].apply(null,arguments)};var _PyEval_CallFunction=Module["_PyEval_CallFunction"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_CallFunction"].apply(null,arguments)};var __PyObject_CallFunction_SizeT=Module["__PyObject_CallFunction_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_CallFunction_SizeT"].apply(null,arguments)};var _PyObject_CallMethod=Module["_PyObject_CallMethod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_CallMethod"].apply(null,arguments)};var _PyEval_CallMethod=Module["_PyEval_CallMethod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_CallMethod"].apply(null,arguments)};var __PyObject_CallMethodId=Module["__PyObject_CallMethodId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_CallMethodId"].apply(null,arguments)};var __PyObject_CallMethod_SizeT=Module["__PyObject_CallMethod_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_CallMethod_SizeT"].apply(null,arguments)};var __PyObject_CallMethodId_SizeT=Module["__PyObject_CallMethodId_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_CallMethodId_SizeT"].apply(null,arguments)};var _PyObject_CallMethodObjArgs=Module["_PyObject_CallMethodObjArgs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_CallMethodObjArgs"].apply(null,arguments)};var __PyObject_CallMethodIdObjArgs=Module["__PyObject_CallMethodIdObjArgs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_CallMethodIdObjArgs"].apply(null,arguments)};var _PyObject_CallFunctionObjArgs=Module["_PyObject_CallFunctionObjArgs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_CallFunctionObjArgs"].apply(null,arguments)};var _PyCapsule_New=Module["_PyCapsule_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCapsule_New"].apply(null,arguments)};var _PyCapsule_IsValid=Module["_PyCapsule_IsValid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCapsule_IsValid"].apply(null,arguments)};var _PyCapsule_GetPointer=Module["_PyCapsule_GetPointer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCapsule_GetPointer"].apply(null,arguments)};var _PyCapsule_GetName=Module["_PyCapsule_GetName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCapsule_GetName"].apply(null,arguments)};var _PyCapsule_GetDestructor=Module["_PyCapsule_GetDestructor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCapsule_GetDestructor"].apply(null,arguments)};var _PyCapsule_GetContext=Module["_PyCapsule_GetContext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCapsule_GetContext"].apply(null,arguments)};var _PyCapsule_SetPointer=Module["_PyCapsule_SetPointer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCapsule_SetPointer"].apply(null,arguments)};var _PyCapsule_SetName=Module["_PyCapsule_SetName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCapsule_SetName"].apply(null,arguments)};var _PyCapsule_SetDestructor=Module["_PyCapsule_SetDestructor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCapsule_SetDestructor"].apply(null,arguments)};var _PyCapsule_SetContext=Module["_PyCapsule_SetContext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCapsule_SetContext"].apply(null,arguments)};var _PyCapsule_Import=Module["_PyCapsule_Import"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCapsule_Import"].apply(null,arguments)};var _PyCell_New=Module["_PyCell_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCell_New"].apply(null,arguments)};var _PyCell_Get=Module["_PyCell_Get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCell_Get"].apply(null,arguments)};var _PyCell_Set=Module["_PyCell_Set"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCell_Set"].apply(null,arguments)};var _PyMethod_Function=Module["_PyMethod_Function"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMethod_Function"].apply(null,arguments)};var _PyMethod_Self=Module["_PyMethod_Self"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMethod_Self"].apply(null,arguments)};var _PyMethod_New=Module["_PyMethod_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMethod_New"].apply(null,arguments)};var _PyMethod_ClearFreeList=Module["_PyMethod_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMethod_ClearFreeList"].apply(null,arguments)};var _PyMethod_Fini=Module["_PyMethod_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMethod_Fini"].apply(null,arguments)};var __PyMethod_DebugMallocStats=Module["__PyMethod_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyMethod_DebugMallocStats"].apply(null,arguments)};var _PyInstanceMethod_New=Module["_PyInstanceMethod_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInstanceMethod_New"].apply(null,arguments)};var _PyInstanceMethod_Function=Module["_PyInstanceMethod_Function"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInstanceMethod_Function"].apply(null,arguments)};var _PyCode_NewWithPosOnlyArgs=Module["_PyCode_NewWithPosOnlyArgs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCode_NewWithPosOnlyArgs"].apply(null,arguments)};var _PyCode_New=Module["_PyCode_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCode_New"].apply(null,arguments)};var __PyCode_InitOpcache=Module["__PyCode_InitOpcache"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCode_InitOpcache"].apply(null,arguments)};var _PyCode_NewEmpty=Module["_PyCode_NewEmpty"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCode_NewEmpty"].apply(null,arguments)};var __PyCode_ConstantKey=Module["__PyCode_ConstantKey"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCode_ConstantKey"].apply(null,arguments)};var _PyCode_Addr2Line=Module["_PyCode_Addr2Line"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCode_Addr2Line"].apply(null,arguments)};var __PyCode_CheckLineNumber=Module["__PyCode_CheckLineNumber"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCode_CheckLineNumber"].apply(null,arguments)};var __PyCode_GetExtra=Module["__PyCode_GetExtra"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCode_GetExtra"].apply(null,arguments)};var __PyCode_SetExtra=Module["__PyCode_SetExtra"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCode_SetExtra"].apply(null,arguments)};var __Py_c_sum=Module["__Py_c_sum"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_c_sum"].apply(null,arguments)};var __Py_c_diff=Module["__Py_c_diff"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_c_diff"].apply(null,arguments)};var __Py_c_neg=Module["__Py_c_neg"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_c_neg"].apply(null,arguments)};var __Py_c_prod=Module["__Py_c_prod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_c_prod"].apply(null,arguments)};var __Py_c_quot=Module["__Py_c_quot"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_c_quot"].apply(null,arguments)};var __Py_c_pow=Module["__Py_c_pow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_c_pow"].apply(null,arguments)};var __Py_c_abs=Module["__Py_c_abs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_c_abs"].apply(null,arguments)};var _PyComplex_FromCComplex=Module["_PyComplex_FromCComplex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyComplex_FromCComplex"].apply(null,arguments)};var _PyComplex_FromDoubles=Module["_PyComplex_FromDoubles"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyComplex_FromDoubles"].apply(null,arguments)};var _PyComplex_RealAsDouble=Module["_PyComplex_RealAsDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyComplex_RealAsDouble"].apply(null,arguments)};var _PyComplex_ImagAsDouble=Module["_PyComplex_ImagAsDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyComplex_ImagAsDouble"].apply(null,arguments)};var _PyComplex_AsCComplex=Module["_PyComplex_AsCComplex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyComplex_AsCComplex"].apply(null,arguments)};var _PyDescr_NewMethod=Module["_PyDescr_NewMethod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDescr_NewMethod"].apply(null,arguments)};var _PyDescr_NewClassMethod=Module["_PyDescr_NewClassMethod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDescr_NewClassMethod"].apply(null,arguments)};var _PyDescr_NewMember=Module["_PyDescr_NewMember"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDescr_NewMember"].apply(null,arguments)};var _PyDescr_NewGetSet=Module["_PyDescr_NewGetSet"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDescr_NewGetSet"].apply(null,arguments)};var _PyDescr_NewWrapper=Module["_PyDescr_NewWrapper"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDescr_NewWrapper"].apply(null,arguments)};var _PyDictProxy_New=Module["_PyDictProxy_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDictProxy_New"].apply(null,arguments)};var _PyWrapper_New=Module["_PyWrapper_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyWrapper_New"].apply(null,arguments)};var _PyDict_ClearFreeList=Module["_PyDict_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_ClearFreeList"].apply(null,arguments)};var __PyDict_DebugMallocStats=Module["__PyDict_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_DebugMallocStats"].apply(null,arguments)};var _PyDict_Fini=Module["_PyDict_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_Fini"].apply(null,arguments)};var __PyDict_CheckConsistency=Module["__PyDict_CheckConsistency"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_CheckConsistency"].apply(null,arguments)};var _PyDict_New=Module["_PyDict_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_New"].apply(null,arguments)};var __PyDict_HasOnlyStringKeys=Module["__PyDict_HasOnlyStringKeys"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_HasOnlyStringKeys"].apply(null,arguments)};var _PyDict_Next=Module["_PyDict_Next"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_Next"].apply(null,arguments)};var __PyDict_MaybeUntrack=Module["__PyDict_MaybeUntrack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_MaybeUntrack"].apply(null,arguments)};var __PyDict_NewPresized=Module["__PyDict_NewPresized"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_NewPresized"].apply(null,arguments)};var _PyDict_GetItem=Module["_PyDict_GetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_GetItem"].apply(null,arguments)};var __PyDict_GetItem_KnownHash=Module["__PyDict_GetItem_KnownHash"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_GetItem_KnownHash"].apply(null,arguments)};var _PyDict_GetItemWithError=Module["_PyDict_GetItemWithError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_GetItemWithError"].apply(null,arguments)};var __PyDict_GetItemIdWithError=Module["__PyDict_GetItemIdWithError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_GetItemIdWithError"].apply(null,arguments)};var __PyDict_GetItemStringWithError=Module["__PyDict_GetItemStringWithError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_GetItemStringWithError"].apply(null,arguments)};var __PyDict_LoadGlobal=Module["__PyDict_LoadGlobal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_LoadGlobal"].apply(null,arguments)};var _PyList_New=Module["_PyList_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyList_New"].apply(null,arguments)};var _PyModule_AddObject=Module["_PyModule_AddObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_AddObject"].apply(null,arguments)};var _PyModule_AddIntConstant=Module["_PyModule_AddIntConstant"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_AddIntConstant"].apply(null,arguments)};var _PyErr_Fetch=Module["_PyErr_Fetch"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_Fetch"].apply(null,arguments)};var _PyErr_Restore=Module["_PyErr_Restore"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_Restore"].apply(null,arguments)};var _PySys_WriteStderr=Module["_PySys_WriteStderr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_WriteStderr"].apply(null,arguments)};var _PyOS_snprintf=Module["_PyOS_snprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_snprintf"].apply(null,arguments)};var _PySys_FormatStderr=Module["_PySys_FormatStderr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_FormatStderr"].apply(null,arguments)};var __PyTime_GetMonotonicClock=Module["__PyTime_GetMonotonicClock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_GetMonotonicClock"].apply(null,arguments)};var __PyTuple_MaybeUntrack=Module["__PyTuple_MaybeUntrack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTuple_MaybeUntrack"].apply(null,arguments)};var __PyWeakref_ClearRef=Module["__PyWeakref_ClearRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyWeakref_ClearRef"].apply(null,arguments)};var _PyErr_Occurred=Module["_PyErr_Occurred"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_Occurred"].apply(null,arguments)};var _PyErr_Format=Module["_PyErr_Format"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_Format"].apply(null,arguments)};var __Py_Dealloc=Module["__Py_Dealloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Dealloc"].apply(null,arguments)};var __PyErr_FormatFromCause=Module["__PyErr_FormatFromCause"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_FormatFromCause"].apply(null,arguments)};var _PyMem_Free=Module["_PyMem_Free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMem_Free"].apply(null,arguments)};var __PyTuple_FromArray=Module["__PyTuple_FromArray"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTuple_FromArray"].apply(null,arguments)};var __Py_CheckRecursiveCall=Module["__Py_CheckRecursiveCall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_CheckRecursiveCall"].apply(null,arguments)};var _PyErr_NoMemory=Module["_PyErr_NoMemory"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_NoMemory"].apply(null,arguments)};var _PyMem_Malloc=Module["_PyMem_Malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMem_Malloc"].apply(null,arguments)};var _PyTuple_New=Module["_PyTuple_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTuple_New"].apply(null,arguments)};var __PyEval_EvalCodeWithName=Module["__PyEval_EvalCodeWithName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_EvalCodeWithName"].apply(null,arguments)};var __PyFrame_New_NoTrack=Module["__PyFrame_New_NoTrack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFrame_New_NoTrack"].apply(null,arguments)};var _PyEval_EvalFrameEx=Module["_PyEval_EvalFrameEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_EvalFrameEx"].apply(null,arguments)};var _PyErr_SetString=Module["_PyErr_SetString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SetString"].apply(null,arguments)};var _memcpy=Module["_memcpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["memcpy"].apply(null,arguments)};var __Py_VaBuildStack_SizeT=Module["__Py_VaBuildStack_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_VaBuildStack_SizeT"].apply(null,arguments)};var __Py_VaBuildStack=Module["__Py_VaBuildStack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_VaBuildStack"].apply(null,arguments)};var _PyObject_GetAttrString=Module["_PyObject_GetAttrString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_GetAttrString"].apply(null,arguments)};var _PyCallable_Check=Module["_PyCallable_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCallable_Check"].apply(null,arguments)};var __PyObject_GetAttrId=Module["__PyObject_GetAttrId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_GetAttrId"].apply(null,arguments)};var __PyObject_GetMethod=Module["__PyObject_GetMethod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_GetMethod"].apply(null,arguments)};var __PyUnicode_FromId=Module["__PyUnicode_FromId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_FromId"].apply(null,arguments)};var _PyErr_WriteUnraisable=Module["_PyErr_WriteUnraisable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_WriteUnraisable"].apply(null,arguments)};var _PyList_Append=Module["_PyList_Append"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyList_Append"].apply(null,arguments)};var _PyErr_Clear=Module["_PyErr_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_Clear"].apply(null,arguments)};var __PyErr_WriteUnraisableMsg=Module["__PyErr_WriteUnraisableMsg"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_WriteUnraisableMsg"].apply(null,arguments)};var __PyTime_AsSecondsDouble=Module["__PyTime_AsSecondsDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_AsSecondsDouble"].apply(null,arguments)};var __PyErr_BadInternalCall=Module["__PyErr_BadInternalCall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_BadInternalCall"].apply(null,arguments)};var _PyType_GetFlags=Module["_PyType_GetFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyType_GetFlags"].apply(null,arguments)};var __Py_write_noraise=Module["__Py_write_noraise"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_write_noraise"].apply(null,arguments)};var _PyThread_acquire_lock=Module["_PyThread_acquire_lock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_acquire_lock"].apply(null,arguments)};var __Py_HashPointer=Module["__Py_HashPointer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_HashPointer"].apply(null,arguments)};var _memcmp=Module["_memcmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["memcmp"].apply(null,arguments)};var _PyMem_RawMalloc=Module["_PyMem_RawMalloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMem_RawMalloc"].apply(null,arguments)};var _PyMem_RawFree=Module["_PyMem_RawFree"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMem_RawFree"].apply(null,arguments)};var _memset=Module["_memset"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["memset"].apply(null,arguments)};var _PyThread_release_lock=Module["_PyThread_release_lock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_release_lock"].apply(null,arguments)};var __Py_DumpASCII=Module["__Py_DumpASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_DumpASCII"].apply(null,arguments)};var __Py_DumpDecimal=Module["__Py_DumpDecimal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_DumpDecimal"].apply(null,arguments)};var _PyMem_GetAllocator=Module["_PyMem_GetAllocator"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMem_GetAllocator"].apply(null,arguments)};var _PyThread_tss_create=Module["_PyThread_tss_create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_tss_create"].apply(null,arguments)};var _PyErr_SetFromErrno=Module["_PyErr_SetFromErrno"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SetFromErrno"].apply(null,arguments)};var _PyThread_allocate_lock=Module["_PyThread_allocate_lock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_allocate_lock"].apply(null,arguments)};var _PyUnicode_InternInPlace=Module["_PyUnicode_InternInPlace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_InternInPlace"].apply(null,arguments)};var _PyObject_Hash=Module["_PyObject_Hash"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Hash"].apply(null,arguments)};var _PyMem_SetAllocator=Module["_PyMem_SetAllocator"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMem_SetAllocator"].apply(null,arguments)};var _PyThread_free_lock=Module["_PyThread_free_lock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_free_lock"].apply(null,arguments)};var _PyThread_tss_delete=Module["_PyThread_tss_delete"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_tss_delete"].apply(null,arguments)};var _PyGILState_Ensure=Module["_PyGILState_Ensure"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyGILState_Ensure"].apply(null,arguments)};var _PyGILState_Release=Module["_PyGILState_Release"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyGILState_Release"].apply(null,arguments)};var _PyGILState_GetThisThreadState=Module["_PyGILState_GetThisThreadState"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyGILState_GetThisThreadState"].apply(null,arguments)};var _PyFrame_GetLineNumber=Module["_PyFrame_GetLineNumber"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFrame_GetLineNumber"].apply(null,arguments)};var _PyLong_FromUnsignedLong=Module["_PyLong_FromUnsignedLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_FromUnsignedLong"].apply(null,arguments)};var _PyUnicode_InternFromString=Module["_PyUnicode_InternFromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_InternFromString"].apply(null,arguments)};var __PyArg_NoKeywords=Module["__PyArg_NoKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_NoKeywords"].apply(null,arguments)};var _PyArg_UnpackTuple=Module["_PyArg_UnpackTuple"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyArg_UnpackTuple"].apply(null,arguments)};var _PyObject_IsTrue=Module["_PyObject_IsTrue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_IsTrue"].apply(null,arguments)};var _PyThread_tss_set=Module["_PyThread_tss_set"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_tss_set"].apply(null,arguments)};var __PyArg_CheckPositional=Module["__PyArg_CheckPositional"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_CheckPositional"].apply(null,arguments)};var _PyType_IsSubtype=Module["_PyType_IsSubtype"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyType_IsSubtype"].apply(null,arguments)};var __PyLong_AsInt=Module["__PyLong_AsInt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_AsInt"].apply(null,arguments)};var _PyLong_FromLong=Module["_PyLong_FromLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_FromLong"].apply(null,arguments)};var _PyLong_FromSize_t=Module["_PyLong_FromSize_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_FromSize_t"].apply(null,arguments)};var _PyUnicode_Compare=Module["_PyUnicode_Compare"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Compare"].apply(null,arguments)};var _PyThread_tss_get=Module["_PyThread_tss_get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_tss_get"].apply(null,arguments)};var _free=Module["_free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["free"].apply(null,arguments)};var _PyObject_ClearWeakRefs=Module["_PyObject_ClearWeakRefs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_ClearWeakRefs"].apply(null,arguments)};var __PyObject_LookupAttrId=Module["__PyObject_LookupAttrId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_LookupAttrId"].apply(null,arguments)};var _PyUnicode_FromFormat=Module["_PyUnicode_FromFormat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_FromFormat"].apply(null,arguments)};var _PyType_Ready=Module["_PyType_Ready"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyType_Ready"].apply(null,arguments)};var __PyType_Lookup=Module["__PyType_Lookup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyType_Lookup"].apply(null,arguments)};var _PyObject_GetAttr=Module["_PyObject_GetAttr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_GetAttr"].apply(null,arguments)};var _PyObject_RichCompareBool=Module["_PyObject_RichCompareBool"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_RichCompareBool"].apply(null,arguments)};var __PyDebugAllocatorStats=Module["__PyDebugAllocatorStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDebugAllocatorStats"].apply(null,arguments)};var __PyEval_GetBuiltinId=Module["__PyEval_GetBuiltinId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_GetBuiltinId"].apply(null,arguments)};var _PyObject_GenericSetAttr=Module["_PyObject_GenericSetAttr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_GenericSetAttr"].apply(null,arguments)};var _PyFrame_ClearFreeList=Module["_PyFrame_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFrame_ClearFreeList"].apply(null,arguments)};var _PyCFunction_ClearFreeList=Module["_PyCFunction_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCFunction_ClearFreeList"].apply(null,arguments)};var _PyTuple_ClearFreeList=Module["_PyTuple_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTuple_ClearFreeList"].apply(null,arguments)};var _PyUnicode_ClearFreeList=Module["_PyUnicode_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_ClearFreeList"].apply(null,arguments)};var _PyFloat_ClearFreeList=Module["_PyFloat_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFloat_ClearFreeList"].apply(null,arguments)};var _PyList_ClearFreeList=Module["_PyList_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyList_ClearFreeList"].apply(null,arguments)};var _PySet_ClearFreeList=Module["_PySet_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySet_ClearFreeList"].apply(null,arguments)};var _PyAsyncGen_ClearFreeLists=Module["_PyAsyncGen_ClearFreeLists"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyAsyncGen_ClearFreeLists"].apply(null,arguments)};var _PyContext_ClearFreeList=Module["_PyContext_ClearFreeList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyContext_ClearFreeList"].apply(null,arguments)};var _Py_FatalError=Module["_Py_FatalError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_FatalError"].apply(null,arguments)};var _PyErr_WarnExplicitFormat=Module["_PyErr_WarnExplicitFormat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_WarnExplicitFormat"].apply(null,arguments)};var _PyObject_Repr=Module["_PyObject_Repr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Repr"].apply(null,arguments)};var _PyUnicode_EncodeFSDefault=Module["_PyUnicode_EncodeFSDefault"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_EncodeFSDefault"].apply(null,arguments)};var __PyObject_Dump=Module["__PyObject_Dump"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_Dump"].apply(null,arguments)};var __PyObject_AssertFailed=Module["__PyObject_AssertFailed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_AssertFailed"].apply(null,arguments)};var _PyObject_Calloc=Module["_PyObject_Calloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Calloc"].apply(null,arguments)};var _PyObject_Malloc=Module["_PyObject_Malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Malloc"].apply(null,arguments)};var _PyObject_Realloc=Module["_PyObject_Realloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Realloc"].apply(null,arguments)};var _PyObject_Free=Module["_PyObject_Free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Free"].apply(null,arguments)};var __PyArg_UnpackKeywords=Module["__PyArg_UnpackKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_UnpackKeywords"].apply(null,arguments)};var _PyLong_FromSsize_t=Module["_PyLong_FromSsize_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_FromSsize_t"].apply(null,arguments)};var __Py_convert_optional_to_ssize_t=Module["__Py_convert_optional_to_ssize_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_convert_optional_to_ssize_t"].apply(null,arguments)};var __PyDict_SetItem_KnownHash=Module["__PyDict_SetItem_KnownHash"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_SetItem_KnownHash"].apply(null,arguments)};var _PyDict_DelItem=Module["_PyDict_DelItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_DelItem"].apply(null,arguments)};var __PyDict_DelItem_KnownHash=Module["__PyDict_DelItem_KnownHash"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_DelItem_KnownHash"].apply(null,arguments)};var __PyErr_SetKeyError=Module["__PyErr_SetKeyError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_SetKeyError"].apply(null,arguments)};var __PyDict_DelItemIf=Module["__PyDict_DelItemIf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_DelItemIf"].apply(null,arguments)};var _PyDict_Clear=Module["_PyDict_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_Clear"].apply(null,arguments)};var __PyDict_Next=Module["__PyDict_Next"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_Next"].apply(null,arguments)};var __PyDict_Pop_KnownHash=Module["__PyDict_Pop_KnownHash"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_Pop_KnownHash"].apply(null,arguments)};var __PyUnicode_Ready=Module["__PyUnicode_Ready"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_Ready"].apply(null,arguments)};var __PyDict_Pop=Module["__PyDict_Pop"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_Pop"].apply(null,arguments)};var __PyDict_FromKeys=Module["__PyDict_FromKeys"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_FromKeys"].apply(null,arguments)};var __PySet_NextEntry=Module["__PySet_NextEntry"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySet_NextEntry"].apply(null,arguments)};var _PyErr_ExceptionMatches=Module["_PyErr_ExceptionMatches"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_ExceptionMatches"].apply(null,arguments)};var __PyObject_LookupSpecial=Module["__PyObject_LookupSpecial"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_LookupSpecial"].apply(null,arguments)};var _PyLong_AsSsize_t=Module["_PyLong_AsSsize_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_AsSsize_t"].apply(null,arguments)};var _PyErr_GivenExceptionMatches=Module["_PyErr_GivenExceptionMatches"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_GivenExceptionMatches"].apply(null,arguments)};var __PyLong_Sign=Module["__PyLong_Sign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_Sign"].apply(null,arguments)};var _PyObject_Str=Module["_PyObject_Str"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Str"].apply(null,arguments)};var _PyUnicode_New=Module["_PyUnicode_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_New"].apply(null,arguments)};var _strcmp=Module["_strcmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strcmp"].apply(null,arguments)};var _PyErr_WarnFormat=Module["_PyErr_WarnFormat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_WarnFormat"].apply(null,arguments)};var __PyLong_FromNbInt=Module["__PyLong_FromNbInt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_FromNbInt"].apply(null,arguments)};var __PyLong_Copy=Module["__PyLong_Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_Copy"].apply(null,arguments)};var __PyLong_FromNbIndexOrNbInt=Module["__PyLong_FromNbIndexOrNbInt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_FromNbIndexOrNbInt"].apply(null,arguments)};var _PyLong_FromUnicodeObject=Module["_PyLong_FromUnicodeObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_FromUnicodeObject"].apply(null,arguments)};var __PyLong_FromBytes=Module["__PyLong_FromBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_FromBytes"].apply(null,arguments)};var __PyObject_New=Module["__PyObject_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_New"].apply(null,arguments)};var _PyErr_Print=Module["_PyErr_Print"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_Print"].apply(null,arguments)};var __PyType_Name=Module["__PyType_Name"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyType_Name"].apply(null,arguments)};var _PyUnicode_FromStringAndSize=Module["_PyUnicode_FromStringAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_FromStringAndSize"].apply(null,arguments)};var _PyErr_WarnEx=Module["_PyErr_WarnEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_WarnEx"].apply(null,arguments)};var __PyArg_ParseTupleAndKeywords_SizeT=Module["__PyArg_ParseTupleAndKeywords_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_ParseTupleAndKeywords_SizeT"].apply(null,arguments)};var _PyUnicode_AsEncodedString=Module["_PyUnicode_AsEncodedString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsEncodedString"].apply(null,arguments)};var _PyBuffer_ToContiguous=Module["_PyBuffer_ToContiguous"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyBuffer_ToContiguous"].apply(null,arguments)};var _PyLong_AsLong=Module["_PyLong_AsLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_AsLong"].apply(null,arguments)};var _siprintf=Module["_siprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["siprintf"].apply(null,arguments)};var _memmove=Module["_memmove"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["memmove"].apply(null,arguments)};var _memchr=Module["_memchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["memchr"].apply(null,arguments)};var _PyTuple_GetItem=Module["_PyTuple_GetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTuple_GetItem"].apply(null,arguments)};var _PyObject_ASCII=Module["_PyObject_ASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_ASCII"].apply(null,arguments)};var __PyLong_FormatBytesWriter=Module["__PyLong_FormatBytesWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_FormatBytesWriter"].apply(null,arguments)};var __PyUnicode_FormatLong=Module["__PyUnicode_FormatLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_FormatLong"].apply(null,arguments)};var _PyLong_AsLongAndOverflow=Module["_PyLong_AsLongAndOverflow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_AsLongAndOverflow"].apply(null,arguments)};var _PyFloat_AsDouble=Module["_PyFloat_AsDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFloat_AsDouble"].apply(null,arguments)};var _PyOS_double_to_string=Module["_PyOS_double_to_string"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_double_to_string"].apply(null,arguments)};var _PyUnicode_DecodeUTF8=Module["_PyUnicode_DecodeUTF8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeUTF8"].apply(null,arguments)};var __Py_HashBytes=Module["__Py_HashBytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_HashBytes"].apply(null,arguments)};var _PyErr_BadArgument=Module["_PyErr_BadArgument"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_BadArgument"].apply(null,arguments)};var _memrchr=Module["_memrchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["memrchr"].apply(null,arguments)};var _strncpy=Module["_strncpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strncpy"].apply(null,arguments)};var __PyArg_ParseTuple_SizeT=Module["__PyArg_ParseTuple_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_ParseTuple_SizeT"].apply(null,arguments)};var __PyEval_SliceIndex=Module["__PyEval_SliceIndex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_SliceIndex"].apply(null,arguments)};var _PySlice_Unpack=Module["_PySlice_Unpack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySlice_Unpack"].apply(null,arguments)};var _PySlice_AdjustIndices=Module["_PySlice_AdjustIndices"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySlice_AdjustIndices"].apply(null,arguments)};var __Py_BuildValue_SizeT=Module["__Py_BuildValue_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_BuildValue_SizeT"].apply(null,arguments)};var __PyArg_BadArgument=Module["__PyArg_BadArgument"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_BadArgument"].apply(null,arguments)};var _PyUnicode_AsUTF8AndSize=Module["_PyUnicode_AsUTF8AndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsUTF8AndSize"].apply(null,arguments)};var _PyUnicode_FromEncodedObject=Module["_PyUnicode_FromEncodedObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_FromEncodedObject"].apply(null,arguments)};var __Py_strhex_with_sep=Module["__Py_strhex_with_sep"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_strhex_with_sep"].apply(null,arguments)};var _PyList_Reverse=Module["_PyList_Reverse"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyList_Reverse"].apply(null,arguments)};var _PyObject_GenericGetAttr=Module["_PyObject_GenericGetAttr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_GenericGetAttr"].apply(null,arguments)};var _PyObject_SelfIter=Module["_PyObject_SelfIter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_SelfIter"].apply(null,arguments)};var _PyUnicode_DecodeLatin1=Module["_PyUnicode_DecodeLatin1"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeLatin1"].apply(null,arguments)};var _PyUnicode_GetDefaultEncoding=Module["_PyUnicode_GetDefaultEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_GetDefaultEncoding"].apply(null,arguments)};var _PyType_GenericAlloc=Module["_PyType_GenericAlloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyType_GenericAlloc"].apply(null,arguments)};var _PyType_GenericNew=Module["_PyType_GenericNew"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyType_GenericNew"].apply(null,arguments)};var _PyFloat_FromDouble=Module["_PyFloat_FromDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFloat_FromDouble"].apply(null,arguments)};var _PyLong_AsDouble=Module["_PyLong_AsDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_AsDouble"].apply(null,arguments)};var _PyFloat_FromString=Module["_PyFloat_FromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFloat_FromString"].apply(null,arguments)};var __PyLong_Format=Module["__PyLong_Format"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_Format"].apply(null,arguments)};var __PySlice_FromIndices=Module["__PySlice_FromIndices"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySlice_FromIndices"].apply(null,arguments)};var _PyList_AsTuple=Module["_PyList_AsTuple"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyList_AsTuple"].apply(null,arguments)};var __PyTuple_Resize=Module["__PyTuple_Resize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTuple_Resize"].apply(null,arguments)};var _PySeqIter_New=Module["_PySeqIter_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySeqIter_New"].apply(null,arguments)};var __PyObject_NextNotImplemented=Module["__PyObject_NextNotImplemented"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_NextNotImplemented"].apply(null,arguments)};var __PyList_Extend=Module["__PyList_Extend"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyList_Extend"].apply(null,arguments)};var _PyDict_Keys=Module["_PyDict_Keys"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_Keys"].apply(null,arguments)};var _PyDict_Items=Module["_PyDict_Items"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_Items"].apply(null,arguments)};var _PyDict_Values=Module["_PyDict_Values"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_Values"].apply(null,arguments)};var _PyDict_MergeFromSeq2=Module["_PyDict_MergeFromSeq2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_MergeFromSeq2"].apply(null,arguments)};var _PyDict_Update=Module["_PyDict_Update"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_Update"].apply(null,arguments)};var _PyDict_Merge=Module["_PyDict_Merge"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_Merge"].apply(null,arguments)};var __PyDict_MergeEx=Module["__PyDict_MergeEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_MergeEx"].apply(null,arguments)};var _PyDict_Copy=Module["_PyDict_Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_Copy"].apply(null,arguments)};var _PyDict_Size=Module["_PyDict_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_Size"].apply(null,arguments)};var _PyDict_SetDefault=Module["_PyDict_SetDefault"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_SetDefault"].apply(null,arguments)};var __PyDict_SizeOf=Module["__PyDict_SizeOf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_SizeOf"].apply(null,arguments)};var __PyDict_KeysSize=Module["__PyDict_KeysSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_KeysSize"].apply(null,arguments)};var _PyDict_Contains=Module["_PyDict_Contains"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_Contains"].apply(null,arguments)};var __PyDict_Contains=Module["__PyDict_Contains"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_Contains"].apply(null,arguments)};var __PyTrash_thread_deposit_object=Module["__PyTrash_thread_deposit_object"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTrash_thread_deposit_object"].apply(null,arguments)};var __PyTrash_thread_destroy_chain=Module["__PyTrash_thread_destroy_chain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTrash_thread_destroy_chain"].apply(null,arguments)};var _Py_ReprEnter=Module["_Py_ReprEnter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_ReprEnter"].apply(null,arguments)};var _Py_ReprLeave=Module["_Py_ReprLeave"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_ReprLeave"].apply(null,arguments)};var __PyUnicodeWriter_Init=Module["__PyUnicodeWriter_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicodeWriter_Init"].apply(null,arguments)};var __PyUnicodeWriter_WriteChar=Module["__PyUnicodeWriter_WriteChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicodeWriter_WriteChar"].apply(null,arguments)};var __PyUnicodeWriter_WriteASCIIString=Module["__PyUnicodeWriter_WriteASCIIString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicodeWriter_WriteASCIIString"].apply(null,arguments)};var __PyUnicodeWriter_WriteStr=Module["__PyUnicodeWriter_WriteStr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicodeWriter_WriteStr"].apply(null,arguments)};var __PyUnicodeWriter_Finish=Module["__PyUnicodeWriter_Finish"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicodeWriter_Finish"].apply(null,arguments)};var __PyUnicodeWriter_Dealloc=Module["__PyUnicodeWriter_Dealloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicodeWriter_Dealloc"].apply(null,arguments)};var __PyDict_GetItemId=Module["__PyDict_GetItemId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_GetItemId"].apply(null,arguments)};var _PyDict_GetItemString=Module["_PyDict_GetItemString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_GetItemString"].apply(null,arguments)};var __PyDict_SetItemId=Module["__PyDict_SetItemId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_SetItemId"].apply(null,arguments)};var __PyDict_DelItemId=Module["__PyDict_DelItemId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_DelItemId"].apply(null,arguments)};var _PyDict_DelItemString=Module["_PyDict_DelItemString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyDict_DelItemString"].apply(null,arguments)};var __PyDictView_New=Module["__PyDictView_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDictView_New"].apply(null,arguments)};var __PyDictView_Intersect=Module["__PyDictView_Intersect"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDictView_Intersect"].apply(null,arguments)};var _PySet_New=Module["_PySet_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySet_New"].apply(null,arguments)};var _PyTuple_Pack=Module["_PyTuple_Pack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTuple_Pack"].apply(null,arguments)};var __PyDict_NewKeysForClass=Module["__PyDict_NewKeysForClass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDict_NewKeysForClass"].apply(null,arguments)};var _PyObject_GenericGetDict=Module["_PyObject_GenericGetDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_GenericGetDict"].apply(null,arguments)};var __PyObject_GetDictPtr=Module["__PyObject_GetDictPtr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_GetDictPtr"].apply(null,arguments)};var __PyObjectDict_SetItem=Module["__PyObjectDict_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObjectDict_SetItem"].apply(null,arguments)};var __PyDictKeys_DecRef=Module["__PyDictKeys_DecRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyDictKeys_DecRef"].apply(null,arguments)};var _PyArg_ValidateKeywordArguments=Module["_PyArg_ValidateKeywordArguments"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyArg_ValidateKeywordArguments"].apply(null,arguments)};var _PyObject_HashNotImplemented=Module["_PyObject_HashNotImplemented"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_HashNotImplemented"].apply(null,arguments)};var _PyException_GetTraceback=Module["_PyException_GetTraceback"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyException_GetTraceback"].apply(null,arguments)};var _PyException_SetTraceback=Module["_PyException_SetTraceback"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyException_SetTraceback"].apply(null,arguments)};var _PyException_GetCause=Module["_PyException_GetCause"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyException_GetCause"].apply(null,arguments)};var _PyException_SetCause=Module["_PyException_SetCause"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyException_SetCause"].apply(null,arguments)};var _PyException_GetContext=Module["_PyException_GetContext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyException_GetContext"].apply(null,arguments)};var _PyException_SetContext=Module["_PyException_SetContext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyException_SetContext"].apply(null,arguments)};var _PyExceptionClass_Name=Module["_PyExceptionClass_Name"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyExceptionClass_Name"].apply(null,arguments)};var _PyUnicodeEncodeError_GetEncoding=Module["_PyUnicodeEncodeError_GetEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeEncodeError_GetEncoding"].apply(null,arguments)};var _PyUnicodeDecodeError_GetEncoding=Module["_PyUnicodeDecodeError_GetEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeDecodeError_GetEncoding"].apply(null,arguments)};var _PyUnicodeEncodeError_GetObject=Module["_PyUnicodeEncodeError_GetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeEncodeError_GetObject"].apply(null,arguments)};var _PyUnicodeDecodeError_GetObject=Module["_PyUnicodeDecodeError_GetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeDecodeError_GetObject"].apply(null,arguments)};var _PyUnicodeTranslateError_GetObject=Module["_PyUnicodeTranslateError_GetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeTranslateError_GetObject"].apply(null,arguments)};var _PyUnicodeEncodeError_GetStart=Module["_PyUnicodeEncodeError_GetStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeEncodeError_GetStart"].apply(null,arguments)};var _PyUnicodeDecodeError_GetStart=Module["_PyUnicodeDecodeError_GetStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeDecodeError_GetStart"].apply(null,arguments)};var _PyUnicodeTranslateError_GetStart=Module["_PyUnicodeTranslateError_GetStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeTranslateError_GetStart"].apply(null,arguments)};var _PyUnicodeEncodeError_SetStart=Module["_PyUnicodeEncodeError_SetStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeEncodeError_SetStart"].apply(null,arguments)};var _PyUnicodeDecodeError_SetStart=Module["_PyUnicodeDecodeError_SetStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeDecodeError_SetStart"].apply(null,arguments)};var _PyUnicodeTranslateError_SetStart=Module["_PyUnicodeTranslateError_SetStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeTranslateError_SetStart"].apply(null,arguments)};var _PyUnicodeEncodeError_GetEnd=Module["_PyUnicodeEncodeError_GetEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeEncodeError_GetEnd"].apply(null,arguments)};var _PyUnicodeDecodeError_GetEnd=Module["_PyUnicodeDecodeError_GetEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeDecodeError_GetEnd"].apply(null,arguments)};var _PyUnicodeTranslateError_GetEnd=Module["_PyUnicodeTranslateError_GetEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeTranslateError_GetEnd"].apply(null,arguments)};var _PyUnicodeEncodeError_SetEnd=Module["_PyUnicodeEncodeError_SetEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeEncodeError_SetEnd"].apply(null,arguments)};var _PyUnicodeDecodeError_SetEnd=Module["_PyUnicodeDecodeError_SetEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeDecodeError_SetEnd"].apply(null,arguments)};var _PyUnicodeTranslateError_SetEnd=Module["_PyUnicodeTranslateError_SetEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeTranslateError_SetEnd"].apply(null,arguments)};var _PyUnicodeEncodeError_GetReason=Module["_PyUnicodeEncodeError_GetReason"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeEncodeError_GetReason"].apply(null,arguments)};var _PyUnicodeDecodeError_GetReason=Module["_PyUnicodeDecodeError_GetReason"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeDecodeError_GetReason"].apply(null,arguments)};var _PyUnicodeTranslateError_GetReason=Module["_PyUnicodeTranslateError_GetReason"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeTranslateError_GetReason"].apply(null,arguments)};var _PyUnicodeEncodeError_SetReason=Module["_PyUnicodeEncodeError_SetReason"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeEncodeError_SetReason"].apply(null,arguments)};var _PyUnicodeDecodeError_SetReason=Module["_PyUnicodeDecodeError_SetReason"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeDecodeError_SetReason"].apply(null,arguments)};var _PyUnicodeTranslateError_SetReason=Module["_PyUnicodeTranslateError_SetReason"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeTranslateError_SetReason"].apply(null,arguments)};var _PyUnicodeEncodeError_Create=Module["_PyUnicodeEncodeError_Create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeEncodeError_Create"].apply(null,arguments)};var _PyUnicodeDecodeError_Create=Module["_PyUnicodeDecodeError_Create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeDecodeError_Create"].apply(null,arguments)};var _PyUnicodeTranslateError_Create=Module["_PyUnicodeTranslateError_Create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicodeTranslateError_Create"].apply(null,arguments)};var __PyUnicodeTranslateError_Create=Module["__PyUnicodeTranslateError_Create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicodeTranslateError_Create"].apply(null,arguments)};var __PyExc_Init=Module["__PyExc_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyExc_Init"].apply(null,arguments)};var __PyBuiltins_AddExceptions=Module["__PyBuiltins_AddExceptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBuiltins_AddExceptions"].apply(null,arguments)};var __PyExc_Fini=Module["__PyExc_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyExc_Fini"].apply(null,arguments)};var __PyErr_TrySetFromCause=Module["__PyErr_TrySetFromCause"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_TrySetFromCause"].apply(null,arguments)};var _PyErr_NormalizeException=Module["_PyErr_NormalizeException"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_NormalizeException"].apply(null,arguments)};var _PyUnicode_FromFormatV=Module["_PyUnicode_FromFormatV"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_FromFormatV"].apply(null,arguments)};var _PyObject_SetAttr=Module["_PyObject_SetAttr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_SetAttr"].apply(null,arguments)};var _PyTuple_GetSlice=Module["_PyTuple_GetSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTuple_GetSlice"].apply(null,arguments)};var _PyUnicode_Substring=Module["_PyUnicode_Substring"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Substring"].apply(null,arguments)};var _PyUnicode_FindChar=Module["_PyUnicode_FindChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_FindChar"].apply(null,arguments)};var __PyUnicode_IsWhitespace=Module["__PyUnicode_IsWhitespace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsWhitespace"].apply(null,arguments)};var _PyUnicode_Tailmatch=Module["_PyUnicode_Tailmatch"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Tailmatch"].apply(null,arguments)};var __PyUnicode_XStrip=Module["__PyUnicode_XStrip"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_XStrip"].apply(null,arguments)};var _PyUnicode_ReadChar=Module["_PyUnicode_ReadChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_ReadChar"].apply(null,arguments)};var _PyObject_GenericSetDict=Module["_PyObject_GenericSetDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_GenericSetDict"].apply(null,arguments)};var _PyFile_FromFd=Module["_PyFile_FromFd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFile_FromFd"].apply(null,arguments)};var _PyFile_GetLine=Module["_PyFile_GetLine"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFile_GetLine"].apply(null,arguments)};var _PyFile_WriteObject=Module["_PyFile_WriteObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFile_WriteObject"].apply(null,arguments)};var _PyFile_WriteString=Module["_PyFile_WriteString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFile_WriteString"].apply(null,arguments)};var _PyObject_AsFileDescriptor=Module["_PyObject_AsFileDescriptor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_AsFileDescriptor"].apply(null,arguments)};var _Py_UniversalNewlineFgets=Module["_Py_UniversalNewlineFgets"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_UniversalNewlineFgets"].apply(null,arguments)};var _PyFile_NewStdPrinter=Module["_PyFile_NewStdPrinter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFile_NewStdPrinter"].apply(null,arguments)};var _PyFile_SetOpenCodeHook=Module["_PyFile_SetOpenCodeHook"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFile_SetOpenCodeHook"].apply(null,arguments)};var _PyFile_OpenCodeObject=Module["_PyFile_OpenCodeObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFile_OpenCodeObject"].apply(null,arguments)};var _PyFile_OpenCode=Module["_PyFile_OpenCode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFile_OpenCode"].apply(null,arguments)};var _PyFloat_GetMax=Module["_PyFloat_GetMax"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFloat_GetMax"].apply(null,arguments)};var _PyFloat_GetMin=Module["_PyFloat_GetMin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFloat_GetMin"].apply(null,arguments)};var _PyFloat_GetInfo=Module["_PyFloat_GetInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFloat_GetInfo"].apply(null,arguments)};var _PyStructSequence_New=Module["_PyStructSequence_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStructSequence_New"].apply(null,arguments)};var __PyUnicode_TransformDecimalAndSpaceToASCII=Module["__PyUnicode_TransformDecimalAndSpaceToASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_TransformDecimalAndSpaceToASCII"].apply(null,arguments)};var __Py_string_to_number_with_underscores=Module["__Py_string_to_number_with_underscores"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_string_to_number_with_underscores"].apply(null,arguments)};var _PyOS_string_to_double=Module["_PyOS_string_to_double"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_string_to_double"].apply(null,arguments)};var __PyUnicode_FromASCII=Module["__PyUnicode_FromASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_FromASCII"].apply(null,arguments)};var __Py_HashDouble=Module["__Py_HashDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_HashDouble"].apply(null,arguments)};var __PyLong_NumBits=Module["__PyLong_NumBits"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_NumBits"].apply(null,arguments)};var _frexp=Module["_frexp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["frexp"].apply(null,arguments)};var _modf=Module["_modf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["modf"].apply(null,arguments)};var _PyLong_FromDouble=Module["_PyLong_FromDouble"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_FromDouble"].apply(null,arguments)};var __PyLong_Lshift=Module["__PyLong_Lshift"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_Lshift"].apply(null,arguments)};var __PyFloat_Init=Module["__PyFloat_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFloat_Init"].apply(null,arguments)};var _PyStructSequence_InitType2=Module["_PyStructSequence_InitType2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStructSequence_InitType2"].apply(null,arguments)};var _PyFloat_Fini=Module["_PyFloat_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFloat_Fini"].apply(null,arguments)};var __PyFloat_DebugMallocStats=Module["__PyFloat_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFloat_DebugMallocStats"].apply(null,arguments)};var __PyFloat_Pack2=Module["__PyFloat_Pack2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFloat_Pack2"].apply(null,arguments)};var _ldexp=Module["_ldexp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ldexp"].apply(null,arguments)};var __PyFloat_Pack4=Module["__PyFloat_Pack4"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFloat_Pack4"].apply(null,arguments)};var __PyFloat_Pack8=Module["__PyFloat_Pack8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFloat_Pack8"].apply(null,arguments)};var __PyFloat_Unpack2=Module["__PyFloat_Unpack2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFloat_Unpack2"].apply(null,arguments)};var __Py_dg_infinity=Module["__Py_dg_infinity"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_dg_infinity"].apply(null,arguments)};var __Py_dg_stdnan=Module["__Py_dg_stdnan"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_dg_stdnan"].apply(null,arguments)};var __PyFloat_Unpack4=Module["__PyFloat_Unpack4"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFloat_Unpack4"].apply(null,arguments)};var __PyFloat_Unpack8=Module["__PyFloat_Unpack8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFloat_Unpack8"].apply(null,arguments)};var _fmod=Module["_fmod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fmod"].apply(null,arguments)};var ___errno_location=Module["___errno_location"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__errno_location"].apply(null,arguments)};var _hypot=Module["_hypot"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["hypot"].apply(null,arguments)};var _pow=Module["_pow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pow"].apply(null,arguments)};var _atan2=Module["_atan2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["atan2"].apply(null,arguments)};var _log=Module["_log"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["log"].apply(null,arguments)};var _exp=Module["_exp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["exp"].apply(null,arguments)};var _sin=Module["_sin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["sin"].apply(null,arguments)};var _cos=Module["_cos"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["cos"].apply(null,arguments)};var _PyObject_RichCompare=Module["_PyObject_RichCompare"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_RichCompare"].apply(null,arguments)};var __PyComplex_FormatAdvancedWriter=Module["__PyComplex_FormatAdvancedWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyComplex_FormatAdvancedWriter"].apply(null,arguments)};var __Py_dg_dtoa=Module["__Py_dg_dtoa"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_dg_dtoa"].apply(null,arguments)};var __Py_dg_strtod=Module["__Py_dg_strtod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_dg_strtod"].apply(null,arguments)};var __Py_dg_freedtoa=Module["__Py_dg_freedtoa"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_dg_freedtoa"].apply(null,arguments)};var __Py_parse_inf_or_nan=Module["__Py_parse_inf_or_nan"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_parse_inf_or_nan"].apply(null,arguments)};var _strtol=Module["_strtol"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strtol"].apply(null,arguments)};var __PyFloat_FormatAdvancedWriter=Module["__PyFloat_FormatAdvancedWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFloat_FormatAdvancedWriter"].apply(null,arguments)};var _PyObject_Init=Module["_PyObject_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Init"].apply(null,arguments)};var _PyFrozenSet_New=Module["_PyFrozenSet_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFrozenSet_New"].apply(null,arguments)};var _PyMem_Calloc=Module["_PyMem_Calloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMem_Calloc"].apply(null,arguments)};var _PyUnicode_DecodeFSDefault=Module["_PyUnicode_DecodeFSDefault"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeFSDefault"].apply(null,arguments)};var _PyLong_FromVoidPtr=Module["_PyLong_FromVoidPtr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_FromVoidPtr"].apply(null,arguments)};var _PySys_Audit=Module["_PySys_Audit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_Audit"].apply(null,arguments)};var _PyMem_Realloc=Module["_PyMem_Realloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMem_Realloc"].apply(null,arguments)};var __PyUnicode_Copy=Module["__PyUnicode_Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_Copy"].apply(null,arguments)};var _PyFrame_New=Module["_PyFrame_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFrame_New"].apply(null,arguments)};var _PyFrame_BlockSetup=Module["_PyFrame_BlockSetup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFrame_BlockSetup"].apply(null,arguments)};var _PyFrame_BlockPop=Module["_PyFrame_BlockPop"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFrame_BlockPop"].apply(null,arguments)};var _PyFrame_FastToLocalsWithError=Module["_PyFrame_FastToLocalsWithError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFrame_FastToLocalsWithError"].apply(null,arguments)};var _PyFrame_FastToLocals=Module["_PyFrame_FastToLocals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFrame_FastToLocals"].apply(null,arguments)};var _PyFrame_LocalsToFast=Module["_PyFrame_LocalsToFast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFrame_LocalsToFast"].apply(null,arguments)};var _PyFrame_Fini=Module["_PyFrame_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFrame_Fini"].apply(null,arguments)};var __PyFrame_DebugMallocStats=Module["__PyFrame_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyFrame_DebugMallocStats"].apply(null,arguments)};var __PyGen_Finalize=Module["__PyGen_Finalize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGen_Finalize"].apply(null,arguments)};var _PyFunction_NewWithQualName=Module["_PyFunction_NewWithQualName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFunction_NewWithQualName"].apply(null,arguments)};var _PyFunction_New=Module["_PyFunction_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFunction_New"].apply(null,arguments)};var _PyFunction_GetCode=Module["_PyFunction_GetCode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFunction_GetCode"].apply(null,arguments)};var _PyFunction_GetGlobals=Module["_PyFunction_GetGlobals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFunction_GetGlobals"].apply(null,arguments)};var _PyFunction_GetModule=Module["_PyFunction_GetModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFunction_GetModule"].apply(null,arguments)};var _PyFunction_GetDefaults=Module["_PyFunction_GetDefaults"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFunction_GetDefaults"].apply(null,arguments)};var _PyFunction_SetDefaults=Module["_PyFunction_SetDefaults"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFunction_SetDefaults"].apply(null,arguments)};var _PyFunction_GetKwDefaults=Module["_PyFunction_GetKwDefaults"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFunction_GetKwDefaults"].apply(null,arguments)};var _PyFunction_SetKwDefaults=Module["_PyFunction_SetKwDefaults"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFunction_SetKwDefaults"].apply(null,arguments)};var _PyFunction_GetClosure=Module["_PyFunction_GetClosure"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFunction_GetClosure"].apply(null,arguments)};var _PyFunction_SetClosure=Module["_PyFunction_SetClosure"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFunction_SetClosure"].apply(null,arguments)};var _PyFunction_GetAnnotations=Module["_PyFunction_GetAnnotations"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFunction_GetAnnotations"].apply(null,arguments)};var _PyFunction_SetAnnotations=Module["_PyFunction_SetAnnotations"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFunction_SetAnnotations"].apply(null,arguments)};var _PyClassMethod_New=Module["_PyClassMethod_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyClassMethod_New"].apply(null,arguments)};var _PyStaticMethod_New=Module["_PyStaticMethod_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStaticMethod_New"].apply(null,arguments)};var __PyErr_WarnUnawaitedCoroutine=Module["__PyErr_WarnUnawaitedCoroutine"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_WarnUnawaitedCoroutine"].apply(null,arguments)};var _PyErr_SetNone=Module["_PyErr_SetNone"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SetNone"].apply(null,arguments)};var __PyGen_Send=Module["__PyGen_Send"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGen_Send"].apply(null,arguments)};var _PyErr_SetObject=Module["_PyErr_SetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SetObject"].apply(null,arguments)};var __PyGen_yf=Module["__PyGen_yf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGen_yf"].apply(null,arguments)};var __PyGen_SetStopIterationValue=Module["__PyGen_SetStopIterationValue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGen_SetStopIterationValue"].apply(null,arguments)};var __PyGen_FetchStopIterationValue=Module["__PyGen_FetchStopIterationValue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGen_FetchStopIterationValue"].apply(null,arguments)};var _PyObject_CallFinalizerFromDealloc=Module["_PyObject_CallFinalizerFromDealloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_CallFinalizerFromDealloc"].apply(null,arguments)};var _PyGen_NewWithQualName=Module["_PyGen_NewWithQualName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyGen_NewWithQualName"].apply(null,arguments)};var _PyGen_New=Module["_PyGen_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyGen_New"].apply(null,arguments)};var _PyGen_NeedsFinalizing=Module["_PyGen_NeedsFinalizing"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyGen_NeedsFinalizing"].apply(null,arguments)};var __PyCoro_GetAwaitableIter=Module["__PyCoro_GetAwaitableIter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCoro_GetAwaitableIter"].apply(null,arguments)};var _PyCoro_New=Module["_PyCoro_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCoro_New"].apply(null,arguments)};var _PyEval_GetFrame=Module["_PyEval_GetFrame"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_GetFrame"].apply(null,arguments)};var _PyAsyncGen_New=Module["_PyAsyncGen_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyAsyncGen_New"].apply(null,arguments)};var _PyAsyncGen_Fini=Module["_PyAsyncGen_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyAsyncGen_Fini"].apply(null,arguments)};var __PyAsyncGenValueWrapperNew=Module["__PyAsyncGenValueWrapperNew"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyAsyncGenValueWrapperNew"].apply(null,arguments)};var __Py_CoerceID=Module["__Py_CoerceID"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_CoerceID"].apply(null,arguments)};var __PyInterpreterID_New=Module["__PyInterpreterID_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyInterpreterID_New"].apply(null,arguments)};var __PyInterpreterState_GetIDObject=Module["__PyInterpreterState_GetIDObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyInterpreterState_GetIDObject"].apply(null,arguments)};var __PyInterpreterID_LookUp=Module["__PyInterpreterID_LookUp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyInterpreterID_LookUp"].apply(null,arguments)};var _PyCallIter_New=Module["_PyCallIter_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCallIter_New"].apply(null,arguments)};var _PyList_Fini=Module["_PyList_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyList_Fini"].apply(null,arguments)};var __PyList_DebugMallocStats=Module["__PyList_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyList_DebugMallocStats"].apply(null,arguments)};var _PyList_Size=Module["_PyList_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyList_Size"].apply(null,arguments)};var _PyList_GetItem=Module["_PyList_GetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyList_GetItem"].apply(null,arguments)};var _PyList_SetItem=Module["_PyList_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyList_SetItem"].apply(null,arguments)};var _PyList_Insert=Module["_PyList_Insert"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyList_Insert"].apply(null,arguments)};var _PyList_GetSlice=Module["_PyList_GetSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyList_GetSlice"].apply(null,arguments)};var _PyList_SetSlice=Module["_PyList_SetSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyList_SetSlice"].apply(null,arguments)};var _PyList_Sort=Module["_PyList_Sort"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyList_Sort"].apply(null,arguments)};var __PyEval_SliceIndexNotNone=Module["__PyEval_SliceIndexNotNone"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_SliceIndexNotNone"].apply(null,arguments)};var __PyLong_New=Module["__PyLong_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_New"].apply(null,arguments)};var _PyLong_AsUnsignedLong=Module["_PyLong_AsUnsignedLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_AsUnsignedLong"].apply(null,arguments)};var _PyLong_AsSize_t=Module["_PyLong_AsSize_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_AsSize_t"].apply(null,arguments)};var _PyLong_AsUnsignedLongMask=Module["_PyLong_AsUnsignedLongMask"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_AsUnsignedLongMask"].apply(null,arguments)};var __PyLong_FromByteArray=Module["__PyLong_FromByteArray"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_FromByteArray"].apply(null,arguments)};var __PyLong_AsByteArray=Module["__PyLong_AsByteArray"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_AsByteArray"].apply(null,arguments)};var _PyLong_AsVoidPtr=Module["_PyLong_AsVoidPtr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_AsVoidPtr"].apply(null,arguments)};var _PyLong_FromLongLong=Module["_PyLong_FromLongLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_FromLongLong"].apply(null,arguments)};var _PyLong_FromUnsignedLongLong=Module["_PyLong_FromUnsignedLongLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_FromUnsignedLongLong"].apply(null,arguments)};var _PyLong_AsLongLong=Module["_PyLong_AsLongLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_AsLongLong"].apply(null,arguments)};var _PyLong_AsUnsignedLongLong=Module["_PyLong_AsUnsignedLongLong"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_AsUnsignedLongLong"].apply(null,arguments)};var _PyLong_AsUnsignedLongLongMask=Module["_PyLong_AsUnsignedLongLongMask"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_AsUnsignedLongLongMask"].apply(null,arguments)};var _PyLong_AsLongLongAndOverflow=Module["_PyLong_AsLongLongAndOverflow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_AsLongLongAndOverflow"].apply(null,arguments)};var __PyLong_UnsignedShort_Converter=Module["__PyLong_UnsignedShort_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_UnsignedShort_Converter"].apply(null,arguments)};var __PyLong_UnsignedInt_Converter=Module["__PyLong_UnsignedInt_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_UnsignedInt_Converter"].apply(null,arguments)};var __PyLong_UnsignedLong_Converter=Module["__PyLong_UnsignedLong_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_UnsignedLong_Converter"].apply(null,arguments)};var __PyLong_UnsignedLongLong_Converter=Module["__PyLong_UnsignedLongLong_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_UnsignedLongLong_Converter"].apply(null,arguments)};var __PyLong_Size_t_Converter=Module["__PyLong_Size_t_Converter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_Size_t_Converter"].apply(null,arguments)};var __PyUnicodeWriter_PrepareInternal=Module["__PyUnicodeWriter_PrepareInternal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicodeWriter_PrepareInternal"].apply(null,arguments)};var _PyOS_getsig=Module["_PyOS_getsig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_getsig"].apply(null,arguments)};var _PyOS_setsig=Module["_PyOS_setsig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_setsig"].apply(null,arguments)};var _PyErr_NewException=Module["_PyErr_NewException"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_NewException"].apply(null,arguments)};var _PyThread_get_thread_ident=Module["_PyThread_get_thread_ident"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_get_thread_ident"].apply(null,arguments)};var __PyEval_SignalReceived=Module["__PyEval_SignalReceived"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_SignalReceived"].apply(null,arguments)};var __PyEval_AddPendingCall=Module["__PyEval_AddPendingCall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_AddPendingCall"].apply(null,arguments)};var _PyImport_ImportModule=Module["_PyImport_ImportModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_ImportModule"].apply(null,arguments)};var __PyTime_FromSecondsObject=Module["__PyTime_FromSecondsObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_FromSecondsObject"].apply(null,arguments)};var __PyTime_AsTimeval=Module["__PyTime_AsTimeval"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_AsTimeval"].apply(null,arguments)};var _PyEval_SaveThread=Module["_PyEval_SaveThread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_SaveThread"].apply(null,arguments)};var _PyEval_RestoreThread=Module["_PyEval_RestoreThread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_RestoreThread"].apply(null,arguments)};var _strsignal=Module["_strsignal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strsignal"].apply(null,arguments)};var _strstr=Module["_strstr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strstr"].apply(null,arguments)};var _PyArg_ParseTupleAndKeywords=Module["_PyArg_ParseTupleAndKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyArg_ParseTupleAndKeywords"].apply(null,arguments)};var __Py_fstat=Module["__Py_fstat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_fstat"].apply(null,arguments)};var __Py_get_blocking=Module["__Py_get_blocking"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_get_blocking"].apply(null,arguments)};var _PySet_Add=Module["_PySet_Add"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySet_Add"].apply(null,arguments)};var __PyLong_FormatWriter=Module["__PyLong_FormatWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_FormatWriter"].apply(null,arguments)};var _PyLong_FromString=Module["_PyLong_FromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_FromString"].apply(null,arguments)};var _PyLong_FromUnicode=Module["_PyLong_FromUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_FromUnicode"].apply(null,arguments)};var _PyUnicode_FromWideChar=Module["_PyUnicode_FromWideChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_FromWideChar"].apply(null,arguments)};var __PyLong_Frexp=Module["__PyLong_Frexp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_Frexp"].apply(null,arguments)};var __PyLong_Rshift=Module["__PyLong_Rshift"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_Rshift"].apply(null,arguments)};var __PyLong_GCD=Module["__PyLong_GCD"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_GCD"].apply(null,arguments)};var __PyLong_DivmodNear=Module["__PyLong_DivmodNear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_DivmodNear"].apply(null,arguments)};var _PyLong_GetInfo=Module["_PyLong_GetInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_GetInfo"].apply(null,arguments)};var __PyLong_Init=Module["__PyLong_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_Init"].apply(null,arguments)};var _PyLong_Fini=Module["_PyLong_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyLong_Fini"].apply(null,arguments)};var __PyUnicode_EqualToASCIIId=Module["__PyUnicode_EqualToASCIIId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_EqualToASCIIId"].apply(null,arguments)};var _PyObject_Bytes=Module["_PyObject_Bytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Bytes"].apply(null,arguments)};var __PyLong_FormatAdvancedWriter=Module["__PyLong_FormatAdvancedWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_FormatAdvancedWriter"].apply(null,arguments)};var _PyMemoryView_FromMemory=Module["_PyMemoryView_FromMemory"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMemoryView_FromMemory"].apply(null,arguments)};var _PyMemoryView_FromBuffer=Module["_PyMemoryView_FromBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMemoryView_FromBuffer"].apply(null,arguments)};var _PyMemoryView_FromObject=Module["_PyMemoryView_FromObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMemoryView_FromObject"].apply(null,arguments)};var _PyMemoryView_GetContiguous=Module["_PyMemoryView_GetContiguous"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMemoryView_GetContiguous"].apply(null,arguments)};var _strcpy=Module["_strcpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strcpy"].apply(null,arguments)};var _PyUnicode_AsASCIIString=Module["_PyUnicode_AsASCIIString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsASCIIString"].apply(null,arguments)};var _PyCFunction_New=Module["_PyCFunction_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCFunction_New"].apply(null,arguments)};var _PyCFunction_NewEx=Module["_PyCFunction_NewEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCFunction_NewEx"].apply(null,arguments)};var _PyCFunction_GetFunction=Module["_PyCFunction_GetFunction"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCFunction_GetFunction"].apply(null,arguments)};var _PyCFunction_GetSelf=Module["_PyCFunction_GetSelf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCFunction_GetSelf"].apply(null,arguments)};var _PyCFunction_GetFlags=Module["_PyCFunction_GetFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCFunction_GetFlags"].apply(null,arguments)};var _PyCFunction_Fini=Module["_PyCFunction_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCFunction_Fini"].apply(null,arguments)};var __PyCFunction_DebugMallocStats=Module["__PyCFunction_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCFunction_DebugMallocStats"].apply(null,arguments)};var __PyType_GetDocFromInternalDoc=Module["__PyType_GetDocFromInternalDoc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyType_GetDocFromInternalDoc"].apply(null,arguments)};var __PyType_GetTextSignatureFromInternalDoc=Module["__PyType_GetTextSignatureFromInternalDoc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyType_GetTextSignatureFromInternalDoc"].apply(null,arguments)};var _PyModuleDef_Init=Module["_PyModuleDef_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModuleDef_Init"].apply(null,arguments)};var _PyModule_NewObject=Module["_PyModule_NewObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_NewObject"].apply(null,arguments)};var _PyModule_New=Module["_PyModule_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_New"].apply(null,arguments)};var __PyInterpreterState_Get=Module["__PyInterpreterState_Get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyInterpreterState_Get"].apply(null,arguments)};var __PyImport_IsInitialized=Module["__PyImport_IsInitialized"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_IsInitialized"].apply(null,arguments)};var __PyModule_CreateInitialized=Module["__PyModule_CreateInitialized"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyModule_CreateInitialized"].apply(null,arguments)};var _strrchr=Module["_strrchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strrchr"].apply(null,arguments)};var _PyModule_AddFunctions=Module["_PyModule_AddFunctions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_AddFunctions"].apply(null,arguments)};var __PyObject_SetAttrId=Module["__PyObject_SetAttrId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_SetAttrId"].apply(null,arguments)};var _PyObject_SetAttrString=Module["_PyObject_SetAttrString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_SetAttrString"].apply(null,arguments)};var _PyModule_SetDocString=Module["_PyModule_SetDocString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_SetDocString"].apply(null,arguments)};var _PyModule_FromDefAndSpec2=Module["_PyModule_FromDefAndSpec2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_FromDefAndSpec2"].apply(null,arguments)};var _PyUnicode_AsUTF8=Module["_PyUnicode_AsUTF8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsUTF8"].apply(null,arguments)};var _PyModule_ExecDef=Module["_PyModule_ExecDef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_ExecDef"].apply(null,arguments)};var _PyModule_GetName=Module["_PyModule_GetName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_GetName"].apply(null,arguments)};var _PyModule_GetNameObject=Module["_PyModule_GetNameObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_GetNameObject"].apply(null,arguments)};var _PyModule_GetFilenameObject=Module["_PyModule_GetFilenameObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_GetFilenameObject"].apply(null,arguments)};var _PyModule_GetFilename=Module["_PyModule_GetFilename"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_GetFilename"].apply(null,arguments)};var _PyModule_GetDef=Module["_PyModule_GetDef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_GetDef"].apply(null,arguments)};var _PyModule_GetState=Module["_PyModule_GetState"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_GetState"].apply(null,arguments)};var __PyModule_Clear=Module["__PyModule_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyModule_Clear"].apply(null,arguments)};var __PyModule_ClearDict=Module["__PyModule_ClearDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyModule_ClearDict"].apply(null,arguments)};var __PyUnicode_EqualToASCIIString=Module["__PyUnicode_EqualToASCIIString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_EqualToASCIIString"].apply(null,arguments)};var __PyModuleSpec_IsInitializing=Module["__PyModuleSpec_IsInitializing"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyModuleSpec_IsInitializing"].apply(null,arguments)};var __PyNamespace_New=Module["__PyNamespace_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyNamespace_New"].apply(null,arguments)};var __PyObject_CheckConsistency=Module["__PyObject_CheckConsistency"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_CheckConsistency"].apply(null,arguments)};var _Py_IncRef=Module["_Py_IncRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_IncRef"].apply(null,arguments)};var _Py_DecRef=Module["_Py_DecRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_DecRef"].apply(null,arguments)};var __PyType_CheckConsistency=Module["__PyType_CheckConsistency"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyType_CheckConsistency"].apply(null,arguments)};var __PyUnicode_CheckConsistency=Module["__PyUnicode_CheckConsistency"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_CheckConsistency"].apply(null,arguments)};var _PyObject_InitVar=Module["_PyObject_InitVar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_InitVar"].apply(null,arguments)};var __PyObject_NewVar=Module["__PyObject_NewVar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_NewVar"].apply(null,arguments)};var _PyObject_CallFinalizer=Module["_PyObject_CallFinalizer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_CallFinalizer"].apply(null,arguments)};var _PyObject_Print=Module["_PyObject_Print"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Print"].apply(null,arguments)};var _clearerr=Module["_clearerr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["clearerr"].apply(null,arguments)};var _ferror=Module["_ferror"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ferror"].apply(null,arguments)};var __Py_BreakPoint=Module["__Py_BreakPoint"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_BreakPoint"].apply(null,arguments)};var __PyObject_IsFreed=Module["__PyObject_IsFreed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_IsFreed"].apply(null,arguments)};var _fflush=Module["_fflush"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fflush"].apply(null,arguments)};var __PyUnicode_AsASCIIString=Module["__PyUnicode_AsASCIIString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_AsASCIIString"].apply(null,arguments)};var _PyUnicode_DecodeASCII=Module["_PyUnicode_DecodeASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeASCII"].apply(null,arguments)};var _PyObject_HasAttrString=Module["_PyObject_HasAttrString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_HasAttrString"].apply(null,arguments)};var __PyObject_IsAbstract=Module["__PyObject_IsAbstract"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_IsAbstract"].apply(null,arguments)};var __PyObject_LookupAttr=Module["__PyObject_LookupAttr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_LookupAttr"].apply(null,arguments)};var __PyObject_HasAttrId=Module["__PyObject_HasAttrId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_HasAttrId"].apply(null,arguments)};var _PyObject_HasAttr=Module["_PyObject_HasAttr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_HasAttr"].apply(null,arguments)};var __PyObject_GenericGetAttrWithDict=Module["__PyObject_GenericGetAttrWithDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_GenericGetAttrWithDict"].apply(null,arguments)};var __PyObject_GenericSetAttrWithDict=Module["__PyObject_GenericSetAttrWithDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_GenericSetAttrWithDict"].apply(null,arguments)};var _PyObject_Not=Module["_PyObject_Not"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Not"].apply(null,arguments)};var _PyObject_Dir=Module["_PyObject_Dir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_Dir"].apply(null,arguments)};var _PyEval_GetLocals=Module["_PyEval_GetLocals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_GetLocals"].apply(null,arguments)};var __PyTypes_Init=Module["__PyTypes_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTypes_Init"].apply(null,arguments)};var _PyTuple_Size=Module["_PyTuple_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTuple_Size"].apply(null,arguments)};var _PyMember_GetOne=Module["_PyMember_GetOne"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMember_GetOne"].apply(null,arguments)};var _PyMember_SetOne=Module["_PyMember_SetOne"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMember_SetOne"].apply(null,arguments)};var _getc=Module["_getc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getc"].apply(null,arguments)};var _ungetc=Module["_ungetc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ungetc"].apply(null,arguments)};var _fileno=Module["_fileno"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fileno"].apply(null,arguments)};var _Py_IsInitialized=Module["_Py_IsInitialized"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_IsInitialized"].apply(null,arguments)};var _isatty=Module["_isatty"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["isatty"].apply(null,arguments)};var __PyUnicode_AsUTF8String=Module["__PyUnicode_AsUTF8String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_AsUTF8String"].apply(null,arguments)};var __Py_write=Module["__Py_write"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_write"].apply(null,arguments)};var _PyUnicode_Join=Module["_PyUnicode_Join"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Join"].apply(null,arguments)};var _strchr=Module["_strchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strchr"].apply(null,arguments)};var _PyImport_ImportModuleNoBlock=Module["_PyImport_ImportModuleNoBlock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_ImportModuleNoBlock"].apply(null,arguments)};var __PyInterpreterState_LookUpID=Module["__PyInterpreterState_LookUpID"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyInterpreterState_LookUpID"].apply(null,arguments)};var __PyInterpreterState_IDDecref=Module["__PyInterpreterState_IDDecref"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyInterpreterState_IDDecref"].apply(null,arguments)};var __PyInterpreterState_IDIncref=Module["__PyInterpreterState_IDIncref"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyInterpreterState_IDIncref"].apply(null,arguments)};var __PyInterpreterState_IDInitref=Module["__PyInterpreterState_IDInitref"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyInterpreterState_IDInitref"].apply(null,arguments)};var _PyInterpreterState_GetID=Module["_PyInterpreterState_GetID"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInterpreterState_GetID"].apply(null,arguments)};var __PyObject_DebugTypeStats=Module["__PyObject_DebugTypeStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_DebugTypeStats"].apply(null,arguments)};var __PyTuple_DebugMallocStats=Module["__PyTuple_DebugMallocStats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTuple_DebugMallocStats"].apply(null,arguments)};var _PyThreadState_GetDict=Module["_PyThreadState_GetDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThreadState_GetDict"].apply(null,arguments)};var __PyTrash_deposit_object=Module["__PyTrash_deposit_object"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTrash_deposit_object"].apply(null,arguments)};var __PyTrash_destroy_chain=Module["__PyTrash_destroy_chain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTrash_destroy_chain"].apply(null,arguments)};var _fputc=Module["_fputc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fputc"].apply(null,arguments)};var __PyMem_SetDefaultAllocator=Module["__PyMem_SetDefaultAllocator"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyMem_SetDefaultAllocator"].apply(null,arguments)};var __PyMem_GetAllocatorName=Module["__PyMem_GetAllocatorName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyMem_GetAllocatorName"].apply(null,arguments)};var __PyMem_SetupAllocators=Module["__PyMem_SetupAllocators"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyMem_SetupAllocators"].apply(null,arguments)};var _calloc=Module["_calloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["calloc"].apply(null,arguments)};var _realloc=Module["_realloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["realloc"].apply(null,arguments)};var _PyMem_SetupDebugHooks=Module["_PyMem_SetupDebugHooks"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMem_SetupDebugHooks"].apply(null,arguments)};var __PyMem_GetCurrentAllocatorName=Module["__PyMem_GetCurrentAllocatorName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyMem_GetCurrentAllocatorName"].apply(null,arguments)};var _PyGILState_Check=Module["_PyGILState_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyGILState_Check"].apply(null,arguments)};var _PyObject_GetArenaAllocator=Module["_PyObject_GetArenaAllocator"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_GetArenaAllocator"].apply(null,arguments)};var _PyObject_SetArenaAllocator=Module["_PyObject_SetArenaAllocator"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyObject_SetArenaAllocator"].apply(null,arguments)};var _PyMem_RawCalloc=Module["_PyMem_RawCalloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMem_RawCalloc"].apply(null,arguments)};var _PyMem_RawRealloc=Module["_PyMem_RawRealloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMem_RawRealloc"].apply(null,arguments)};var __PyMem_RawWcsdup=Module["__PyMem_RawWcsdup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyMem_RawWcsdup"].apply(null,arguments)};var _wcslen=Module["_wcslen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcslen"].apply(null,arguments)};var __PyMem_RawStrdup=Module["__PyMem_RawStrdup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyMem_RawStrdup"].apply(null,arguments)};var __PyMem_Strdup=Module["__PyMem_Strdup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyMem_Strdup"].apply(null,arguments)};var __Py_GetAllocatedBlocks=Module["__Py_GetAllocatedBlocks"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_GetAllocatedBlocks"].apply(null,arguments)};var _fputs=Module["_fputs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fputs"].apply(null,arguments)};var _snprintf=Module["_snprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["snprintf"].apply(null,arguments)};var _PyODict_New=Module["_PyODict_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyODict_New"].apply(null,arguments)};var _PyODict_SetItem=Module["_PyODict_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyODict_SetItem"].apply(null,arguments)};var __PyErr_ChainExceptions=Module["__PyErr_ChainExceptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_ChainExceptions"].apply(null,arguments)};var _PyODict_DelItem=Module["_PyODict_DelItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyODict_DelItem"].apply(null,arguments)};var _PyPickleBuffer_FromObject=Module["_PyPickleBuffer_FromObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyPickleBuffer_FromObject"].apply(null,arguments)};var _PyPickleBuffer_GetBuffer=Module["_PyPickleBuffer_GetBuffer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyPickleBuffer_GetBuffer"].apply(null,arguments)};var _PyPickleBuffer_Release=Module["_PyPickleBuffer_Release"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyPickleBuffer_Release"].apply(null,arguments)};var __PySlice_GetLongIndices=Module["__PySlice_GetLongIndices"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySlice_GetLongIndices"].apply(null,arguments)};var _PySet_Size=Module["_PySet_Size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySet_Size"].apply(null,arguments)};var _PySet_Clear=Module["_PySet_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySet_Clear"].apply(null,arguments)};var _PySet_Contains=Module["_PySet_Contains"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySet_Contains"].apply(null,arguments)};var _PySet_Discard=Module["_PySet_Discard"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySet_Discard"].apply(null,arguments)};var _PySet_Fini=Module["_PySet_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySet_Fini"].apply(null,arguments)};var _PySet_Pop=Module["_PySet_Pop"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySet_Pop"].apply(null,arguments)};var __PySet_Update=Module["__PySet_Update"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySet_Update"].apply(null,arguments)};var __PyUnicode_EQ=Module["__PyUnicode_EQ"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_EQ"].apply(null,arguments)};var _PySlice_Fini=Module["_PySlice_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySlice_Fini"].apply(null,arguments)};var _PySlice_New=Module["_PySlice_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySlice_New"].apply(null,arguments)};var _PySlice_GetIndices=Module["_PySlice_GetIndices"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySlice_GetIndices"].apply(null,arguments)};var _PySlice_GetIndicesEx=Module["_PySlice_GetIndicesEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySlice_GetIndicesEx"].apply(null,arguments)};var _PyStructSequence_SetItem=Module["_PyStructSequence_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStructSequence_SetItem"].apply(null,arguments)};var _PyStructSequence_GetItem=Module["_PyStructSequence_GetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStructSequence_GetItem"].apply(null,arguments)};var _PyStructSequence_InitType=Module["_PyStructSequence_InitType"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStructSequence_InitType"].apply(null,arguments)};var _PyStructSequence_NewType=Module["_PyStructSequence_NewType"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStructSequence_NewType"].apply(null,arguments)};var _PyType_FromSpecWithBases=Module["_PyType_FromSpecWithBases"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyType_FromSpecWithBases"].apply(null,arguments)};var __PyStructSequence_Init=Module["__PyStructSequence_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyStructSequence_Init"].apply(null,arguments)};var _PyTuple_SetItem=Module["_PyTuple_SetItem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTuple_SetItem"].apply(null,arguments)};var _PyTuple_Fini=Module["_PyTuple_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTuple_Fini"].apply(null,arguments)};var _strncmp=Module["_strncmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strncmp"].apply(null,arguments)};var _PyType_ClearCache=Module["_PyType_ClearCache"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyType_ClearCache"].apply(null,arguments)};var _PyType_Modified=Module["_PyType_Modified"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyType_Modified"].apply(null,arguments)};var __PyType_Fini=Module["__PyType_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyType_Fini"].apply(null,arguments)};var __PyType_LookupId=Module["__PyType_LookupId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyType_LookupId"].apply(null,arguments)};var __PyType_CalculateMetaclass=Module["__PyType_CalculateMetaclass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyType_CalculateMetaclass"].apply(null,arguments)};var _PyWeakref_NewRef=Module["_PyWeakref_NewRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyWeakref_NewRef"].apply(null,arguments)};var _PyType_FromSpec=Module["_PyType_FromSpec"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyType_FromSpec"].apply(null,arguments)};var _PyType_GetSlot=Module["_PyType_GetSlot"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyType_GetSlot"].apply(null,arguments)};var _PyUnicode_IsIdentifier=Module["_PyUnicode_IsIdentifier"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_IsIdentifier"].apply(null,arguments)};var __Py_Mangle=Module["__Py_Mangle"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Mangle"].apply(null,arguments)};var _PyEval_GetGlobals=Module["_PyEval_GetGlobals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_GetGlobals"].apply(null,arguments)};var _PyImport_GetModule=Module["_PyImport_GetModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_GetModule"].apply(null,arguments)};var _PyImport_Import=Module["_PyImport_Import"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_Import"].apply(null,arguments)};var __PyUnicode_ToNumeric=Module["__PyUnicode_ToNumeric"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_ToNumeric"].apply(null,arguments)};var __PyUnicode_IsLinebreak=Module["__PyUnicode_IsLinebreak"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsLinebreak"].apply(null,arguments)};var __PyUnicode_ToTitlecase=Module["__PyUnicode_ToTitlecase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_ToTitlecase"].apply(null,arguments)};var __PyUnicode_IsTitlecase=Module["__PyUnicode_IsTitlecase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsTitlecase"].apply(null,arguments)};var __PyUnicode_IsXidStart=Module["__PyUnicode_IsXidStart"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsXidStart"].apply(null,arguments)};var __PyUnicode_IsXidContinue=Module["__PyUnicode_IsXidContinue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsXidContinue"].apply(null,arguments)};var __PyUnicode_ToDecimalDigit=Module["__PyUnicode_ToDecimalDigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_ToDecimalDigit"].apply(null,arguments)};var __PyUnicode_IsDecimalDigit=Module["__PyUnicode_IsDecimalDigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsDecimalDigit"].apply(null,arguments)};var __PyUnicode_ToDigit=Module["__PyUnicode_ToDigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_ToDigit"].apply(null,arguments)};var __PyUnicode_IsDigit=Module["__PyUnicode_IsDigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsDigit"].apply(null,arguments)};var __PyUnicode_IsNumeric=Module["__PyUnicode_IsNumeric"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsNumeric"].apply(null,arguments)};var __PyUnicode_IsPrintable=Module["__PyUnicode_IsPrintable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsPrintable"].apply(null,arguments)};var __PyUnicode_IsLowercase=Module["__PyUnicode_IsLowercase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsLowercase"].apply(null,arguments)};var __PyUnicode_IsUppercase=Module["__PyUnicode_IsUppercase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsUppercase"].apply(null,arguments)};var __PyUnicode_ToUppercase=Module["__PyUnicode_ToUppercase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_ToUppercase"].apply(null,arguments)};var __PyUnicode_ToLowercase=Module["__PyUnicode_ToLowercase"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_ToLowercase"].apply(null,arguments)};var __PyUnicode_ToLowerFull=Module["__PyUnicode_ToLowerFull"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_ToLowerFull"].apply(null,arguments)};var __PyUnicode_ToTitleFull=Module["__PyUnicode_ToTitleFull"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_ToTitleFull"].apply(null,arguments)};var __PyUnicode_ToUpperFull=Module["__PyUnicode_ToUpperFull"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_ToUpperFull"].apply(null,arguments)};var __PyUnicode_ToFoldedFull=Module["__PyUnicode_ToFoldedFull"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_ToFoldedFull"].apply(null,arguments)};var __PyUnicode_IsCased=Module["__PyUnicode_IsCased"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsCased"].apply(null,arguments)};var __PyUnicode_IsCaseIgnorable=Module["__PyUnicode_IsCaseIgnorable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsCaseIgnorable"].apply(null,arguments)};var __PyUnicode_IsAlpha=Module["__PyUnicode_IsAlpha"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_IsAlpha"].apply(null,arguments)};var __Py_GetErrorHandler=Module["__Py_GetErrorHandler"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_GetErrorHandler"].apply(null,arguments)};var _PyUnicode_GetMax=Module["_PyUnicode_GetMax"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_GetMax"].apply(null,arguments)};var __PyUnicode_FastCopyCharacters=Module["__PyUnicode_FastCopyCharacters"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_FastCopyCharacters"].apply(null,arguments)};var _PyUnicode_CopyCharacters=Module["_PyUnicode_CopyCharacters"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_CopyCharacters"].apply(null,arguments)};var _PyUnicode_Resize=Module["_PyUnicode_Resize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Resize"].apply(null,arguments)};var _PyUnicode_FromUnicode=Module["_PyUnicode_FromUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_FromUnicode"].apply(null,arguments)};var _PyUnicode_DecodeUTF8Stateful=Module["_PyUnicode_DecodeUTF8Stateful"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeUTF8Stateful"].apply(null,arguments)};var __PyUnicode_ClearStaticStrings=Module["__PyUnicode_ClearStaticStrings"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_ClearStaticStrings"].apply(null,arguments)};var _PyUnicode_FromKindAndData=Module["_PyUnicode_FromKindAndData"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_FromKindAndData"].apply(null,arguments)};var __PyUnicode_FindMaxChar=Module["__PyUnicode_FindMaxChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_FindMaxChar"].apply(null,arguments)};var __PyUnicode_AsKind=Module["__PyUnicode_AsKind"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_AsKind"].apply(null,arguments)};var _PyUnicode_AsUCS4=Module["_PyUnicode_AsUCS4"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsUCS4"].apply(null,arguments)};var _PyUnicode_AsUCS4Copy=Module["_PyUnicode_AsUCS4Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsUCS4Copy"].apply(null,arguments)};var _PyUnicode_Fill=Module["_PyUnicode_Fill"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Fill"].apply(null,arguments)};var __PyUnicodeWriter_WriteLatin1String=Module["__PyUnicodeWriter_WriteLatin1String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicodeWriter_WriteLatin1String"].apply(null,arguments)};var _PyUnicode_AsWideChar=Module["_PyUnicode_AsWideChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsWideChar"].apply(null,arguments)};var _PyUnicode_AsWideCharString=Module["_PyUnicode_AsWideCharString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsWideCharString"].apply(null,arguments)};var _PyUnicode_FromOrdinal=Module["_PyUnicode_FromOrdinal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_FromOrdinal"].apply(null,arguments)};var _PyUnicode_FromObject=Module["_PyUnicode_FromObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_FromObject"].apply(null,arguments)};var _PyUnicode_Decode=Module["_PyUnicode_Decode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Decode"].apply(null,arguments)};var _PyUnicode_DecodeUTF16Stateful=Module["_PyUnicode_DecodeUTF16Stateful"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeUTF16Stateful"].apply(null,arguments)};var _PyUnicode_DecodeUTF32Stateful=Module["_PyUnicode_DecodeUTF32Stateful"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeUTF32Stateful"].apply(null,arguments)};var __PyCodec_DecodeText=Module["__PyCodec_DecodeText"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCodec_DecodeText"].apply(null,arguments)};var __Py_normalize_encoding=Module["__Py_normalize_encoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_normalize_encoding"].apply(null,arguments)};var _PyUnicode_DecodeUTF16=Module["_PyUnicode_DecodeUTF16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeUTF16"].apply(null,arguments)};var _PyUnicode_DecodeUTF32=Module["_PyUnicode_DecodeUTF32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeUTF32"].apply(null,arguments)};var _PyUnicode_AsDecodedObject=Module["_PyUnicode_AsDecodedObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsDecodedObject"].apply(null,arguments)};var _PyCodec_Decode=Module["_PyCodec_Decode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_Decode"].apply(null,arguments)};var _PyUnicode_AsDecodedUnicode=Module["_PyUnicode_AsDecodedUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsDecodedUnicode"].apply(null,arguments)};var _PyUnicode_Encode=Module["_PyUnicode_Encode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Encode"].apply(null,arguments)};var __PyUnicode_EncodeUTF16=Module["__PyUnicode_EncodeUTF16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_EncodeUTF16"].apply(null,arguments)};var __PyUnicode_EncodeUTF32=Module["__PyUnicode_EncodeUTF32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_EncodeUTF32"].apply(null,arguments)};var __PyCodec_EncodeText=Module["__PyCodec_EncodeText"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCodec_EncodeText"].apply(null,arguments)};var _PyUnicode_AsEncodedObject=Module["_PyUnicode_AsEncodedObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsEncodedObject"].apply(null,arguments)};var _PyCodec_Encode=Module["_PyCodec_Encode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_Encode"].apply(null,arguments)};var _PyUnicode_EncodeLocale=Module["_PyUnicode_EncodeLocale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_EncodeLocale"].apply(null,arguments)};var __Py_EncodeLocaleEx=Module["__Py_EncodeLocaleEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_EncodeLocaleEx"].apply(null,arguments)};var _PyCodec_StrictErrors=Module["_PyCodec_StrictErrors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_StrictErrors"].apply(null,arguments)};var _wcscmp=Module["_wcscmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcscmp"].apply(null,arguments)};var __PyUnicode_AsLatin1String=Module["__PyUnicode_AsLatin1String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_AsLatin1String"].apply(null,arguments)};var _PyUnicode_AsEncodedUnicode=Module["_PyUnicode_AsEncodedUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsEncodedUnicode"].apply(null,arguments)};var _PyUnicode_DecodeLocaleAndSize=Module["_PyUnicode_DecodeLocaleAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeLocaleAndSize"].apply(null,arguments)};var __Py_DecodeLocaleEx=Module["__Py_DecodeLocaleEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_DecodeLocaleEx"].apply(null,arguments)};var _PyUnicode_DecodeLocale=Module["_PyUnicode_DecodeLocale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeLocale"].apply(null,arguments)};var _PyUnicode_DecodeFSDefaultAndSize=Module["_PyUnicode_DecodeFSDefaultAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeFSDefaultAndSize"].apply(null,arguments)};var _PyUnicode_FSConverter=Module["_PyUnicode_FSConverter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_FSConverter"].apply(null,arguments)};var __PyImport_AcquireLock=Module["__PyImport_AcquireLock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_AcquireLock"].apply(null,arguments)};var __PyImport_ReleaseLock=Module["__PyImport_ReleaseLock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_ReleaseLock"].apply(null,arguments)};var __PyGILState_Reinit=Module["__PyGILState_Reinit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGILState_Reinit"].apply(null,arguments)};var __PyEval_ReInitThreads=Module["__PyEval_ReInitThreads"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_ReInitThreads"].apply(null,arguments)};var __PyImport_ReInitLock=Module["__PyImport_ReInitLock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_ReInitLock"].apply(null,arguments)};var __PyRuntimeState_ReInitThreads=Module["__PyRuntimeState_ReInitThreads"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyRuntimeState_ReInitThreads"].apply(null,arguments)};var __PyInterpreterState_DeleteExceptMain=Module["__PyInterpreterState_DeleteExceptMain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyInterpreterState_DeleteExceptMain"].apply(null,arguments)};var _access=Module["_access"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["access"].apply(null,arguments)};var _ttyname=Module["_ttyname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ttyname"].apply(null,arguments)};var _fchdir=Module["_fchdir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fchdir"].apply(null,arguments)};var _PyErr_SetFromErrnoWithFilenameObject=Module["_PyErr_SetFromErrnoWithFilenameObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SetFromErrnoWithFilenameObject"].apply(null,arguments)};var _chmod=Module["_chmod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["chmod"].apply(null,arguments)};var _ctermid=Module["_ctermid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ctermid"].apply(null,arguments)};var _link=Module["_link"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["link"].apply(null,arguments)};var _PyErr_SetFromErrnoWithFilenameObjects=Module["_PyErr_SetFromErrnoWithFilenameObjects"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SetFromErrnoWithFilenameObjects"].apply(null,arguments)};var _opendir=Module["_opendir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["opendir"].apply(null,arguments)};var _readdir=Module["_readdir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["readdir"].apply(null,arguments)};var _closedir=Module["_closedir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["closedir"].apply(null,arguments)};var _mkdir=Module["_mkdir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["mkdir"].apply(null,arguments)};var _rmdir=Module["_rmdir"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["rmdir"].apply(null,arguments)};var _symlink=Module["_symlink"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["symlink"].apply(null,arguments)};var _umask=Module["_umask"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["umask"].apply(null,arguments)};var _unlink=Module["_unlink"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["unlink"].apply(null,arguments)};var __PyTime_ObjectToTimespec=Module["__PyTime_ObjectToTimespec"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_ObjectToTimespec"].apply(null,arguments)};var _PyInterpreterState_Main=Module["_PyInterpreterState_Main"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInterpreterState_Main"].apply(null,arguments)};var _getegid=Module["_getegid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getegid"].apply(null,arguments)};var _geteuid=Module["_geteuid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["geteuid"].apply(null,arguments)};var _getgid=Module["_getgid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getgid"].apply(null,arguments)};var _getppid=Module["_getppid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getppid"].apply(null,arguments)};var _getuid=Module["_getuid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getuid"].apply(null,arguments)};var _getlogin=Module["_getlogin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getlogin"].apply(null,arguments)};var __PyArg_ParseStack_SizeT=Module["__PyArg_ParseStack_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_ParseStack_SizeT"].apply(null,arguments)};var _setgid=Module["_setgid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["setgid"].apply(null,arguments)};var _setegid=Module["_setegid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["setegid"].apply(null,arguments)};var _setregid=Module["_setregid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["setregid"].apply(null,arguments)};var __PyArg_ParseStackAndKeywords_SizeT=Module["__PyArg_ParseStackAndKeywords_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_ParseStackAndKeywords_SizeT"].apply(null,arguments)};var _tcgetpgrp=Module["_tcgetpgrp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["tcgetpgrp"].apply(null,arguments)};var _tcsetpgrp=Module["_tcsetpgrp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["tcsetpgrp"].apply(null,arguments)};var _open=Module["_open"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["open"].apply(null,arguments)};var __Py_set_inheritable=Module["__Py_set_inheritable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_set_inheritable"].apply(null,arguments)};var _close=Module["_close"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["close"].apply(null,arguments)};var __Py_device_encoding=Module["__Py_device_encoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_device_encoding"].apply(null,arguments)};var __Py_dup=Module["__Py_dup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_dup"].apply(null,arguments)};var _dup2=Module["_dup2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dup2"].apply(null,arguments)};var _lseek=Module["_lseek"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["lseek"].apply(null,arguments)};var __Py_read=Module["__Py_read"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_read"].apply(null,arguments)};var _fstat=Module["_fstat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fstat"].apply(null,arguments)};var _pipe=Module["_pipe"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pipe"].apply(null,arguments)};var _strerror=Module["_strerror"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strerror"].apply(null,arguments)};var _fsync=Module["_fsync"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fsync"].apply(null,arguments)};var _fdatasync=Module["_fdatasync"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fdatasync"].apply(null,arguments)};var __PyOS_URandom=Module["__PyOS_URandom"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyOS_URandom"].apply(null,arguments)};var _setresgid=Module["_setresgid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["setresgid"].apply(null,arguments)};var _ioctl=Module["_ioctl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ioctl"].apply(null,arguments)};var __Py_get_inheritable=Module["__Py_get_inheritable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_get_inheritable"].apply(null,arguments)};var __Py_set_blocking=Module["__Py_set_blocking"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_set_blocking"].apply(null,arguments)};var _stat=Module["_stat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["stat"].apply(null,arguments)};var __PyLong_FromTime_t=Module["__PyLong_FromTime_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_FromTime_t"].apply(null,arguments)};var _getcwd=Module["_getcwd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getcwd"].apply(null,arguments)};var _rename=Module["_rename"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["rename"].apply(null,arguments)};var __PyLong_AsTime_t=Module["__PyLong_AsTime_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyLong_AsTime_t"].apply(null,arguments)};var _writev=Module["_writev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["writev"].apply(null,arguments)};var _qsort=Module["_qsort"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["qsort"].apply(null,arguments)};var _PyErr_ResourceWarning=Module["_PyErr_ResourceWarning"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_ResourceWarning"].apply(null,arguments)};var _lstat=Module["_lstat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["lstat"].apply(null,arguments)};var _PyUnicode_FSDecoder=Module["_PyUnicode_FSDecoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_FSDecoder"].apply(null,arguments)};var _PyUnicode_AsUnicodeAndSize=Module["_PyUnicode_AsUnicodeAndSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsUnicodeAndSize"].apply(null,arguments)};var _PyUnicode_AsUnicode=Module["_PyUnicode_AsUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsUnicode"].apply(null,arguments)};var __PyUnicode_AsUnicode=Module["__PyUnicode_AsUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_AsUnicode"].apply(null,arguments)};var _PyUnicode_GetSize=Module["_PyUnicode_GetSize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_GetSize"].apply(null,arguments)};var _PyUnicode_GetLength=Module["_PyUnicode_GetLength"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_GetLength"].apply(null,arguments)};var _PyUnicode_WriteChar=Module["_PyUnicode_WriteChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_WriteChar"].apply(null,arguments)};var _PyUnicode_DecodeUTF7=Module["_PyUnicode_DecodeUTF7"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeUTF7"].apply(null,arguments)};var _PyUnicode_DecodeUTF7Stateful=Module["_PyUnicode_DecodeUTF7Stateful"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeUTF7Stateful"].apply(null,arguments)};var _PyCodec_LookupError=Module["_PyCodec_LookupError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_LookupError"].apply(null,arguments)};var __PyUnicode_EncodeUTF7=Module["__PyUnicode_EncodeUTF7"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_EncodeUTF7"].apply(null,arguments)};var _PyUnicode_EncodeUTF7=Module["_PyUnicode_EncodeUTF7"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_EncodeUTF7"].apply(null,arguments)};var __Py_DecodeUTF8Ex=Module["__Py_DecodeUTF8Ex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_DecodeUTF8Ex"].apply(null,arguments)};var __Py_DecodeUTF8_surrogateescape=Module["__Py_DecodeUTF8_surrogateescape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_DecodeUTF8_surrogateescape"].apply(null,arguments)};var __Py_EncodeUTF8Ex=Module["__Py_EncodeUTF8Ex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_EncodeUTF8Ex"].apply(null,arguments)};var _PyUnicode_EncodeUTF8=Module["_PyUnicode_EncodeUTF8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_EncodeUTF8"].apply(null,arguments)};var _PyUnicode_AsUTF8String=Module["_PyUnicode_AsUTF8String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsUTF8String"].apply(null,arguments)};var _PyUnicode_EncodeUTF32=Module["_PyUnicode_EncodeUTF32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_EncodeUTF32"].apply(null,arguments)};var _PyUnicode_AsUTF32String=Module["_PyUnicode_AsUTF32String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsUTF32String"].apply(null,arguments)};var _PyUnicode_EncodeUTF16=Module["_PyUnicode_EncodeUTF16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_EncodeUTF16"].apply(null,arguments)};var _PyUnicode_AsUTF16String=Module["_PyUnicode_AsUTF16String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsUTF16String"].apply(null,arguments)};var __PyUnicode_DecodeUnicodeEscape=Module["__PyUnicode_DecodeUnicodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_DecodeUnicodeEscape"].apply(null,arguments)};var _PyUnicode_DecodeUnicodeEscape=Module["_PyUnicode_DecodeUnicodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeUnicodeEscape"].apply(null,arguments)};var _PyUnicode_AsUnicodeEscapeString=Module["_PyUnicode_AsUnicodeEscapeString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsUnicodeEscapeString"].apply(null,arguments)};var _PyUnicode_EncodeUnicodeEscape=Module["_PyUnicode_EncodeUnicodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_EncodeUnicodeEscape"].apply(null,arguments)};var _PyUnicode_DecodeRawUnicodeEscape=Module["_PyUnicode_DecodeRawUnicodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeRawUnicodeEscape"].apply(null,arguments)};var _PyUnicode_AsRawUnicodeEscapeString=Module["_PyUnicode_AsRawUnicodeEscapeString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsRawUnicodeEscapeString"].apply(null,arguments)};var _PyUnicode_EncodeRawUnicodeEscape=Module["_PyUnicode_EncodeRawUnicodeEscape"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_EncodeRawUnicodeEscape"].apply(null,arguments)};var _PyUnicode_EncodeLatin1=Module["_PyUnicode_EncodeLatin1"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_EncodeLatin1"].apply(null,arguments)};var _PyUnicode_AsLatin1String=Module["_PyUnicode_AsLatin1String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsLatin1String"].apply(null,arguments)};var __PyUnicodeWriter_PrepareKindInternal=Module["__PyUnicodeWriter_PrepareKindInternal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicodeWriter_PrepareKindInternal"].apply(null,arguments)};var _PyUnicode_EncodeASCII=Module["_PyUnicode_EncodeASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_EncodeASCII"].apply(null,arguments)};var _PyUnicode_DecodeCharmap=Module["_PyUnicode_DecodeCharmap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_DecodeCharmap"].apply(null,arguments)};var _PyUnicode_BuildEncodingMap=Module["_PyUnicode_BuildEncodingMap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_BuildEncodingMap"].apply(null,arguments)};var __PyUnicode_EncodeCharmap=Module["__PyUnicode_EncodeCharmap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_EncodeCharmap"].apply(null,arguments)};var _PyUnicode_EncodeCharmap=Module["_PyUnicode_EncodeCharmap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_EncodeCharmap"].apply(null,arguments)};var _PyUnicode_AsCharmapString=Module["_PyUnicode_AsCharmapString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsCharmapString"].apply(null,arguments)};var _PyUnicode_TranslateCharmap=Module["_PyUnicode_TranslateCharmap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_TranslateCharmap"].apply(null,arguments)};var _PyUnicode_Translate=Module["_PyUnicode_Translate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Translate"].apply(null,arguments)};var _PyUnicode_TransformDecimalToASCII=Module["_PyUnicode_TransformDecimalToASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_TransformDecimalToASCII"].apply(null,arguments)};var _PyUnicode_EncodeDecimal=Module["_PyUnicode_EncodeDecimal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_EncodeDecimal"].apply(null,arguments)};var __PyUnicode_InsertThousandsGrouping=Module["__PyUnicode_InsertThousandsGrouping"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_InsertThousandsGrouping"].apply(null,arguments)};var _PyUnicode_Count=Module["_PyUnicode_Count"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Count"].apply(null,arguments)};var _PyUnicode_Find=Module["_PyUnicode_Find"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Find"].apply(null,arguments)};var __PyUnicode_JoinArray=Module["__PyUnicode_JoinArray"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_JoinArray"].apply(null,arguments)};var __PyUnicode_FastFill=Module["__PyUnicode_FastFill"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_FastFill"].apply(null,arguments)};var _PyUnicode_Splitlines=Module["_PyUnicode_Splitlines"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Splitlines"].apply(null,arguments)};var _wmemcmp=Module["_wmemcmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wmemcmp"].apply(null,arguments)};var _PyUnicode_CompareWithASCIIString=Module["_PyUnicode_CompareWithASCIIString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_CompareWithASCIIString"].apply(null,arguments)};var _PyUnicode_RichCompare=Module["_PyUnicode_RichCompare"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_RichCompare"].apply(null,arguments)};var _PyUnicode_Contains=Module["_PyUnicode_Contains"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Contains"].apply(null,arguments)};var _PyUnicode_Concat=Module["_PyUnicode_Concat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Concat"].apply(null,arguments)};var _PyUnicode_Append=Module["_PyUnicode_Append"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Append"].apply(null,arguments)};var _PyUnicode_AppendAndDel=Module["_PyUnicode_AppendAndDel"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AppendAndDel"].apply(null,arguments)};var _PyUnicode_Replace=Module["_PyUnicode_Replace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Replace"].apply(null,arguments)};var _PyUnicode_Split=Module["_PyUnicode_Split"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Split"].apply(null,arguments)};var _PyUnicode_Partition=Module["_PyUnicode_Partition"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Partition"].apply(null,arguments)};var _PyUnicode_RPartition=Module["_PyUnicode_RPartition"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_RPartition"].apply(null,arguments)};var _PyUnicode_RSplit=Module["_PyUnicode_RSplit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_RSplit"].apply(null,arguments)};var __PyUnicodeWriter_WriteSubstring=Module["__PyUnicodeWriter_WriteSubstring"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicodeWriter_WriteSubstring"].apply(null,arguments)};var _PyUnicode_Format=Module["_PyUnicode_Format"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_Format"].apply(null,arguments)};var __PyUnicode_Init=Module["__PyUnicode_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_Init"].apply(null,arguments)};var _PyUnicode_InternImmortal=Module["_PyUnicode_InternImmortal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_InternImmortal"].apply(null,arguments)};var _Py_UNICODE_strlen=Module["_Py_UNICODE_strlen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_UNICODE_strlen"].apply(null,arguments)};var _Py_UNICODE_strcpy=Module["_Py_UNICODE_strcpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_UNICODE_strcpy"].apply(null,arguments)};var _Py_UNICODE_strncpy=Module["_Py_UNICODE_strncpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_UNICODE_strncpy"].apply(null,arguments)};var _Py_UNICODE_strcat=Module["_Py_UNICODE_strcat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_UNICODE_strcat"].apply(null,arguments)};var _Py_UNICODE_strcmp=Module["_Py_UNICODE_strcmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_UNICODE_strcmp"].apply(null,arguments)};var _Py_UNICODE_strncmp=Module["_Py_UNICODE_strncmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_UNICODE_strncmp"].apply(null,arguments)};var _Py_UNICODE_strchr=Module["_Py_UNICODE_strchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_UNICODE_strchr"].apply(null,arguments)};var _Py_UNICODE_strrchr=Module["_Py_UNICODE_strrchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_UNICODE_strrchr"].apply(null,arguments)};var _PyUnicode_AsUnicodeCopy=Module["_PyUnicode_AsUnicodeCopy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyUnicode_AsUnicodeCopy"].apply(null,arguments)};var __PyUnicode_InitEncodings=Module["__PyUnicode_InitEncodings"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_InitEncodings"].apply(null,arguments)};var __Py_SetFileSystemEncoding=Module["__Py_SetFileSystemEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_SetFileSystemEncoding"].apply(null,arguments)};var __PyUnicode_Fini=Module["__PyUnicode_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_Fini"].apply(null,arguments)};var _PyInit__string=Module["_PyInit__string"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__string"].apply(null,arguments)};var __PyUnicode_FormatAdvancedWriter=Module["__PyUnicode_FormatAdvancedWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyUnicode_FormatAdvancedWriter"].apply(null,arguments)};var __PyCodec_Lookup=Module["__PyCodec_Lookup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCodec_Lookup"].apply(null,arguments)};var __PyWeakref_GetWeakrefCount=Module["__PyWeakref_GetWeakrefCount"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyWeakref_GetWeakrefCount"].apply(null,arguments)};var _PyWeakref_NewProxy=Module["_PyWeakref_NewProxy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyWeakref_NewProxy"].apply(null,arguments)};var _PyWeakref_GetObject=Module["_PyWeakref_GetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyWeakref_GetObject"].apply(null,arguments)};var _PyGrammar_AddAccelerators=Module["_PyGrammar_AddAccelerators"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyGrammar_AddAccelerators"].apply(null,arguments)};var _PyGrammar_RemoveAccelerators=Module["_PyGrammar_RemoveAccelerators"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyGrammar_RemoveAccelerators"].apply(null,arguments)};var _PyGrammar_FindDFA=Module["_PyGrammar_FindDFA"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyGrammar_FindDFA"].apply(null,arguments)};var _PyGrammar_LabelRepr=Module["_PyGrammar_LabelRepr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyGrammar_LabelRepr"].apply(null,arguments)};var _PyOS_StdioReadline=Module["_PyOS_StdioReadline"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_StdioReadline"].apply(null,arguments)};var _PyOS_Readline=Module["_PyOS_Readline"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_Readline"].apply(null,arguments)};var _PyNode_New=Module["_PyNode_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNode_New"].apply(null,arguments)};var __PyNode_FinalizeEndPos=Module["__PyNode_FinalizeEndPos"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyNode_FinalizeEndPos"].apply(null,arguments)};var _PyNode_AddChild=Module["_PyNode_AddChild"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNode_AddChild"].apply(null,arguments)};var _PyNode_Free=Module["_PyNode_Free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNode_Free"].apply(null,arguments)};var __PyNode_SizeOf=Module["__PyNode_SizeOf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyNode_SizeOf"].apply(null,arguments)};var _PyParser_New=Module["_PyParser_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_New"].apply(null,arguments)};var _PyParser_Delete=Module["_PyParser_Delete"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_Delete"].apply(null,arguments)};var _PyParser_AddToken=Module["_PyParser_AddToken"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_AddToken"].apply(null,arguments)};var _PyParser_ParseString=Module["_PyParser_ParseString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ParseString"].apply(null,arguments)};var _PyParser_ParseStringObject=Module["_PyParser_ParseStringObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ParseStringObject"].apply(null,arguments)};var _PyParser_ParseStringFlagsFilename=Module["_PyParser_ParseStringFlagsFilename"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ParseStringFlagsFilename"].apply(null,arguments)};var _PyParser_ParseStringFlags=Module["_PyParser_ParseStringFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ParseStringFlags"].apply(null,arguments)};var _PyParser_ParseStringFlagsFilenameEx=Module["_PyParser_ParseStringFlagsFilenameEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ParseStringFlagsFilenameEx"].apply(null,arguments)};var _PyParser_ParseFile=Module["_PyParser_ParseFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ParseFile"].apply(null,arguments)};var _PyParser_ParseFileFlags=Module["_PyParser_ParseFileFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ParseFileFlags"].apply(null,arguments)};var _PyParser_ParseFileFlagsEx=Module["_PyParser_ParseFileFlagsEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ParseFileFlagsEx"].apply(null,arguments)};var _PyParser_ParseFileObject=Module["_PyParser_ParseFileObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ParseFileObject"].apply(null,arguments)};var _PyToken_OneChar=Module["_PyToken_OneChar"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyToken_OneChar"].apply(null,arguments)};var _PyToken_TwoChars=Module["_PyToken_TwoChars"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyToken_TwoChars"].apply(null,arguments)};var _PyToken_ThreeChars=Module["_PyToken_ThreeChars"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyToken_ThreeChars"].apply(null,arguments)};var _PyTokenizer_FromString=Module["_PyTokenizer_FromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTokenizer_FromString"].apply(null,arguments)};var _PyTokenizer_Free=Module["_PyTokenizer_Free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTokenizer_Free"].apply(null,arguments)};var _PyTokenizer_FromUTF8=Module["_PyTokenizer_FromUTF8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTokenizer_FromUTF8"].apply(null,arguments)};var _PyTokenizer_FromFile=Module["_PyTokenizer_FromFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTokenizer_FromFile"].apply(null,arguments)};var _PyTokenizer_Get=Module["_PyTokenizer_Get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTokenizer_Get"].apply(null,arguments)};var _PyTokenizer_FindEncodingFilename=Module["_PyTokenizer_FindEncodingFilename"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTokenizer_FindEncodingFilename"].apply(null,arguments)};var _PyTokenizer_FindEncoding=Module["_PyTokenizer_FindEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTokenizer_FindEncoding"].apply(null,arguments)};var __Py_Module=Module["__Py_Module"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Module"].apply(null,arguments)};var __Py_Interactive=Module["__Py_Interactive"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Interactive"].apply(null,arguments)};var __Py_Expression=Module["__Py_Expression"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Expression"].apply(null,arguments)};var __Py_FunctionType=Module["__Py_FunctionType"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_FunctionType"].apply(null,arguments)};var __Py_Suite=Module["__Py_Suite"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Suite"].apply(null,arguments)};var __Py_FunctionDef=Module["__Py_FunctionDef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_FunctionDef"].apply(null,arguments)};var __Py_AsyncFunctionDef=Module["__Py_AsyncFunctionDef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_AsyncFunctionDef"].apply(null,arguments)};var __Py_ClassDef=Module["__Py_ClassDef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_ClassDef"].apply(null,arguments)};var __Py_Return=Module["__Py_Return"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Return"].apply(null,arguments)};var __Py_Delete=Module["__Py_Delete"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Delete"].apply(null,arguments)};var __Py_Assign=Module["__Py_Assign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Assign"].apply(null,arguments)};var __Py_AugAssign=Module["__Py_AugAssign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_AugAssign"].apply(null,arguments)};var __Py_AnnAssign=Module["__Py_AnnAssign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_AnnAssign"].apply(null,arguments)};var __Py_For=Module["__Py_For"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_For"].apply(null,arguments)};var __Py_AsyncFor=Module["__Py_AsyncFor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_AsyncFor"].apply(null,arguments)};var __Py_While=Module["__Py_While"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_While"].apply(null,arguments)};var __Py_If=Module["__Py_If"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_If"].apply(null,arguments)};var __Py_With=Module["__Py_With"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_With"].apply(null,arguments)};var __Py_AsyncWith=Module["__Py_AsyncWith"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_AsyncWith"].apply(null,arguments)};var __Py_Raise=Module["__Py_Raise"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Raise"].apply(null,arguments)};var __Py_Try=Module["__Py_Try"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Try"].apply(null,arguments)};var __Py_Assert=Module["__Py_Assert"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Assert"].apply(null,arguments)};var __Py_Import=Module["__Py_Import"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Import"].apply(null,arguments)};var __Py_ImportFrom=Module["__Py_ImportFrom"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_ImportFrom"].apply(null,arguments)};var __Py_Global=Module["__Py_Global"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Global"].apply(null,arguments)};var __Py_Nonlocal=Module["__Py_Nonlocal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Nonlocal"].apply(null,arguments)};var __Py_Expr=Module["__Py_Expr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Expr"].apply(null,arguments)};var __Py_Pass=Module["__Py_Pass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Pass"].apply(null,arguments)};var __Py_Break=Module["__Py_Break"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Break"].apply(null,arguments)};var __Py_Continue=Module["__Py_Continue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Continue"].apply(null,arguments)};var __Py_BoolOp=Module["__Py_BoolOp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_BoolOp"].apply(null,arguments)};var __Py_NamedExpr=Module["__Py_NamedExpr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_NamedExpr"].apply(null,arguments)};var __Py_BinOp=Module["__Py_BinOp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_BinOp"].apply(null,arguments)};var __Py_UnaryOp=Module["__Py_UnaryOp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_UnaryOp"].apply(null,arguments)};var __Py_Lambda=Module["__Py_Lambda"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Lambda"].apply(null,arguments)};var __Py_IfExp=Module["__Py_IfExp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_IfExp"].apply(null,arguments)};var __Py_Dict=Module["__Py_Dict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Dict"].apply(null,arguments)};var __Py_Set=Module["__Py_Set"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Set"].apply(null,arguments)};var __Py_ListComp=Module["__Py_ListComp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_ListComp"].apply(null,arguments)};var __Py_SetComp=Module["__Py_SetComp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_SetComp"].apply(null,arguments)};var __Py_DictComp=Module["__Py_DictComp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_DictComp"].apply(null,arguments)};var __Py_GeneratorExp=Module["__Py_GeneratorExp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_GeneratorExp"].apply(null,arguments)};var __Py_Await=Module["__Py_Await"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Await"].apply(null,arguments)};var __Py_Yield=Module["__Py_Yield"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Yield"].apply(null,arguments)};var __Py_YieldFrom=Module["__Py_YieldFrom"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_YieldFrom"].apply(null,arguments)};var __Py_Compare=Module["__Py_Compare"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Compare"].apply(null,arguments)};var __Py_Call=Module["__Py_Call"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Call"].apply(null,arguments)};var __Py_FormattedValue=Module["__Py_FormattedValue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_FormattedValue"].apply(null,arguments)};var __Py_JoinedStr=Module["__Py_JoinedStr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_JoinedStr"].apply(null,arguments)};var __Py_Constant=Module["__Py_Constant"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Constant"].apply(null,arguments)};var __Py_Attribute=Module["__Py_Attribute"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Attribute"].apply(null,arguments)};var __Py_Subscript=Module["__Py_Subscript"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Subscript"].apply(null,arguments)};var __Py_Starred=Module["__Py_Starred"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Starred"].apply(null,arguments)};var __Py_Name=Module["__Py_Name"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Name"].apply(null,arguments)};var __Py_List=Module["__Py_List"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_List"].apply(null,arguments)};var __Py_Tuple=Module["__Py_Tuple"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Tuple"].apply(null,arguments)};var __Py_Slice=Module["__Py_Slice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Slice"].apply(null,arguments)};var __Py_ExtSlice=Module["__Py_ExtSlice"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_ExtSlice"].apply(null,arguments)};var __Py_Index=Module["__Py_Index"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_Index"].apply(null,arguments)};var __Py_comprehension=Module["__Py_comprehension"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_comprehension"].apply(null,arguments)};var __Py_ExceptHandler=Module["__Py_ExceptHandler"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_ExceptHandler"].apply(null,arguments)};var __Py_arguments=Module["__Py_arguments"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_arguments"].apply(null,arguments)};var __Py_arg=Module["__Py_arg"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_arg"].apply(null,arguments)};var __Py_keyword=Module["__Py_keyword"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_keyword"].apply(null,arguments)};var __Py_alias=Module["__Py_alias"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_alias"].apply(null,arguments)};var __Py_withitem=Module["__Py_withitem"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_withitem"].apply(null,arguments)};var __Py_TypeIgnore=Module["__Py_TypeIgnore"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_TypeIgnore"].apply(null,arguments)};var _PyInit__ast=Module["_PyInit__ast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__ast"].apply(null,arguments)};var _PyAST_mod2obj=Module["_PyAST_mod2obj"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyAST_mod2obj"].apply(null,arguments)};var _PyAST_obj2mod=Module["_PyAST_obj2mod"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyAST_obj2mod"].apply(null,arguments)};var _PyAST_Check=Module["_PyAST_Check"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyAST_Check"].apply(null,arguments)};var _PyErr_Warn=Module["_PyErr_Warn"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_Warn"].apply(null,arguments)};var _PyErr_WarnExplicitObject=Module["_PyErr_WarnExplicitObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_WarnExplicitObject"].apply(null,arguments)};var __PySys_GetObjectId=Module["__PySys_GetObjectId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySys_GetObjectId"].apply(null,arguments)};var __Py_DisplaySourceLine=Module["__Py_DisplaySourceLine"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_DisplaySourceLine"].apply(null,arguments)};var _PyErr_WarnExplicit=Module["_PyErr_WarnExplicit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_WarnExplicit"].apply(null,arguments)};var __Py_IsFinalizing=Module["__Py_IsFinalizing"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_IsFinalizing"].apply(null,arguments)};var __PyWarnings_Init=Module["__PyWarnings_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyWarnings_Init"].apply(null,arguments)};var __PyWarnings_Fini=Module["__PyWarnings_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyWarnings_Fini"].apply(null,arguments)};var __Py_asdl_seq_new=Module["__Py_asdl_seq_new"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_asdl_seq_new"].apply(null,arguments)};var __Py_asdl_int_seq_new=Module["__Py_asdl_int_seq_new"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_asdl_int_seq_new"].apply(null,arguments)};var _PyAST_Validate=Module["_PyAST_Validate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyAST_Validate"].apply(null,arguments)};var _PyAST_FromNodeObject=Module["_PyAST_FromNodeObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyAST_FromNodeObject"].apply(null,arguments)};var _PyAST_FromNode=Module["_PyAST_FromNode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyAST_FromNode"].apply(null,arguments)};var __PyAST_GetDocString=Module["__PyAST_GetDocString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyAST_GetDocString"].apply(null,arguments)};var __PyAST_Optimize=Module["__PyAST_Optimize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyAST_Optimize"].apply(null,arguments)};var __PyAST_ExprAsUnicode=Module["__PyAST_ExprAsUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyAST_ExprAsUnicode"].apply(null,arguments)};var __PyBuiltin_Init=Module["__PyBuiltin_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyBuiltin_Init"].apply(null,arguments)};var __Py_fstat_noraise=Module["__Py_fstat_noraise"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_fstat_noraise"].apply(null,arguments)};var __Py_open=Module["__Py_open"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_open"].apply(null,arguments)};var __Py_open_noraise=Module["__Py_open_noraise"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_open_noraise"].apply(null,arguments)};var _read=Module["_read"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["read"].apply(null,arguments)};var __PyOS_URandomNonblock=Module["__PyOS_URandomNonblock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyOS_URandomNonblock"].apply(null,arguments)};var __Py_HashRandomization_Init=Module["__Py_HashRandomization_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_HashRandomization_Init"].apply(null,arguments)};var __Py_HashRandomization_Fini=Module["__Py_HashRandomization_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_HashRandomization_Fini"].apply(null,arguments)};var __PyEval_SetSwitchInterval=Module["__PyEval_SetSwitchInterval"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_SetSwitchInterval"].apply(null,arguments)};var __PyEval_GetSwitchInterval=Module["__PyEval_GetSwitchInterval"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_GetSwitchInterval"].apply(null,arguments)};var _PyEval_ThreadsInitialized=Module["_PyEval_ThreadsInitialized"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_ThreadsInitialized"].apply(null,arguments)};var _PyEval_InitThreads=Module["_PyEval_InitThreads"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_InitThreads"].apply(null,arguments)};var __PyEval_FiniThreads=Module["__PyEval_FiniThreads"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_FiniThreads"].apply(null,arguments)};var __PyEval_Fini=Module["__PyEval_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_Fini"].apply(null,arguments)};var _PyEval_AcquireLock=Module["_PyEval_AcquireLock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_AcquireLock"].apply(null,arguments)};var _PyEval_ReleaseLock=Module["_PyEval_ReleaseLock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_ReleaseLock"].apply(null,arguments)};var _PyEval_AcquireThread=Module["_PyEval_AcquireThread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_AcquireThread"].apply(null,arguments)};var _PyEval_ReleaseThread=Module["_PyEval_ReleaseThread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_ReleaseThread"].apply(null,arguments)};var _PyThread_init_thread=Module["_PyThread_init_thread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_init_thread"].apply(null,arguments)};var _pthread_mutex_init=Module["_pthread_mutex_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_mutex_init"].apply(null,arguments)};var __PyThread_cond_init=Module["__PyThread_cond_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyThread_cond_init"].apply(null,arguments)};var _pthread_mutex_lock=Module["_pthread_mutex_lock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_mutex_lock"].apply(null,arguments)};var __PyThread_cond_after=Module["__PyThread_cond_after"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyThread_cond_after"].apply(null,arguments)};var _pthread_mutex_unlock=Module["_pthread_mutex_unlock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_mutex_unlock"].apply(null,arguments)};var _pthread_mutex_destroy=Module["_pthread_mutex_destroy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_mutex_destroy"].apply(null,arguments)};var _PyThread_exit_thread=Module["_PyThread_exit_thread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_exit_thread"].apply(null,arguments)};var __PyThreadState_Swap=Module["__PyThreadState_Swap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyThreadState_Swap"].apply(null,arguments)};var __PyThreadState_DeleteExcept=Module["__PyThreadState_DeleteExcept"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyThreadState_DeleteExcept"].apply(null,arguments)};var __PyEval_SignalAsyncExc=Module["__PyEval_SignalAsyncExc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_SignalAsyncExc"].apply(null,arguments)};var __PyErr_Fetch=Module["__PyErr_Fetch"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_Fetch"].apply(null,arguments)};var __PyErr_SetString=Module["__PyErr_SetString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_SetString"].apply(null,arguments)};var __PyErr_Print=Module["__PyErr_Print"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_Print"].apply(null,arguments)};var __PyErr_Restore=Module["__PyErr_Restore"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_Restore"].apply(null,arguments)};var _Py_AddPendingCall=Module["_Py_AddPendingCall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_AddPendingCall"].apply(null,arguments)};var __Py_FinishPendingCalls=Module["__Py_FinishPendingCalls"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_FinishPendingCalls"].apply(null,arguments)};var _Py_MakePendingCalls=Module["_Py_MakePendingCalls"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_MakePendingCalls"].apply(null,arguments)};var __PyEval_Initialize=Module["__PyEval_Initialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_Initialize"].apply(null,arguments)};var _Py_GetRecursionLimit=Module["_Py_GetRecursionLimit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_GetRecursionLimit"].apply(null,arguments)};var _Py_SetRecursionLimit=Module["_Py_SetRecursionLimit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_SetRecursionLimit"].apply(null,arguments)};var __PyErr_Format=Module["__PyErr_Format"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_Format"].apply(null,arguments)};var _PyEval_EvalCode=Module["_PyEval_EvalCode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_EvalCode"].apply(null,arguments)};var _PyEval_EvalCodeEx=Module["_PyEval_EvalCodeEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_EvalCodeEx"].apply(null,arguments)};var _PyEval_EvalFrame=Module["_PyEval_EvalFrame"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_EvalFrame"].apply(null,arguments)};var __PyEval_EvalFrameDefault=Module["__PyEval_EvalFrameDefault"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_EvalFrameDefault"].apply(null,arguments)};var __PyErr_SetNone=Module["__PyErr_SetNone"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_SetNone"].apply(null,arguments)};var __PyErr_GetTopmostException=Module["__PyErr_GetTopmostException"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_GetTopmostException"].apply(null,arguments)};var __PyErr_SetObject=Module["__PyErr_SetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_SetObject"].apply(null,arguments)};var __PyErr_ExceptionMatches=Module["__PyErr_ExceptionMatches"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_ExceptionMatches"].apply(null,arguments)};var __PyErr_Clear=Module["__PyErr_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_Clear"].apply(null,arguments)};var _PyImport_ImportModuleLevelObject=Module["_PyImport_ImportModuleLevelObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_ImportModuleLevelObject"].apply(null,arguments)};var _PyErr_SetImportError=Module["_PyErr_SetImportError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SetImportError"].apply(null,arguments)};var _PyTraceBack_Here=Module["_PyTraceBack_Here"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTraceBack_Here"].apply(null,arguments)};var __PyErr_NormalizeException=Module["__PyErr_NormalizeException"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_NormalizeException"].apply(null,arguments)};var __PyEval_CallTracing=Module["__PyEval_CallTracing"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_CallTracing"].apply(null,arguments)};var _PyEval_SetProfile=Module["_PyEval_SetProfile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_SetProfile"].apply(null,arguments)};var _PyEval_SetTrace=Module["_PyEval_SetTrace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_SetTrace"].apply(null,arguments)};var __PyEval_SetCoroutineOriginTrackingDepth=Module["__PyEval_SetCoroutineOriginTrackingDepth"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_SetCoroutineOriginTrackingDepth"].apply(null,arguments)};var __PyEval_GetCoroutineOriginTrackingDepth=Module["__PyEval_GetCoroutineOriginTrackingDepth"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_GetCoroutineOriginTrackingDepth"].apply(null,arguments)};var __PyEval_SetAsyncGenFirstiter=Module["__PyEval_SetAsyncGenFirstiter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_SetAsyncGenFirstiter"].apply(null,arguments)};var __PyEval_GetAsyncGenFirstiter=Module["__PyEval_GetAsyncGenFirstiter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_GetAsyncGenFirstiter"].apply(null,arguments)};var __PyEval_SetAsyncGenFinalizer=Module["__PyEval_SetAsyncGenFinalizer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_SetAsyncGenFinalizer"].apply(null,arguments)};var __PyEval_GetAsyncGenFinalizer=Module["__PyEval_GetAsyncGenFinalizer"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_GetAsyncGenFinalizer"].apply(null,arguments)};var _PyEval_GetBuiltins=Module["_PyEval_GetBuiltins"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_GetBuiltins"].apply(null,arguments)};var _PyEval_MergeCompilerFlags=Module["_PyEval_MergeCompilerFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_MergeCompilerFlags"].apply(null,arguments)};var _PyEval_GetFuncName=Module["_PyEval_GetFuncName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_GetFuncName"].apply(null,arguments)};var _PyEval_GetFuncDesc=Module["_PyEval_GetFuncDesc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyEval_GetFuncDesc"].apply(null,arguments)};var __PyEval_RequestCodeExtraIndex=Module["__PyEval_RequestCodeExtraIndex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyEval_RequestCodeExtraIndex"].apply(null,arguments)};var _PyCodec_Register=Module["_PyCodec_Register"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_Register"].apply(null,arguments)};var __PyCodec_Forget=Module["__PyCodec_Forget"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCodec_Forget"].apply(null,arguments)};var _PyCodec_KnownEncoding=Module["_PyCodec_KnownEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_KnownEncoding"].apply(null,arguments)};var __PyCodecInfo_GetIncrementalDecoder=Module["__PyCodecInfo_GetIncrementalDecoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCodecInfo_GetIncrementalDecoder"].apply(null,arguments)};var __PyCodecInfo_GetIncrementalEncoder=Module["__PyCodecInfo_GetIncrementalEncoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCodecInfo_GetIncrementalEncoder"].apply(null,arguments)};var _PyCodec_Encoder=Module["_PyCodec_Encoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_Encoder"].apply(null,arguments)};var _PyCodec_Decoder=Module["_PyCodec_Decoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_Decoder"].apply(null,arguments)};var _PyCodec_IncrementalEncoder=Module["_PyCodec_IncrementalEncoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_IncrementalEncoder"].apply(null,arguments)};var _PyCodec_IncrementalDecoder=Module["_PyCodec_IncrementalDecoder"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_IncrementalDecoder"].apply(null,arguments)};var _PyCodec_StreamReader=Module["_PyCodec_StreamReader"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_StreamReader"].apply(null,arguments)};var _PyCodec_StreamWriter=Module["_PyCodec_StreamWriter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_StreamWriter"].apply(null,arguments)};var __PyCodec_LookupTextEncoding=Module["__PyCodec_LookupTextEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCodec_LookupTextEncoding"].apply(null,arguments)};var _PyCodec_RegisterError=Module["_PyCodec_RegisterError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_RegisterError"].apply(null,arguments)};var _PyCodec_IgnoreErrors=Module["_PyCodec_IgnoreErrors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_IgnoreErrors"].apply(null,arguments)};var _PyCodec_ReplaceErrors=Module["_PyCodec_ReplaceErrors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_ReplaceErrors"].apply(null,arguments)};var _PyCodec_XMLCharRefReplaceErrors=Module["_PyCodec_XMLCharRefReplaceErrors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_XMLCharRefReplaceErrors"].apply(null,arguments)};var _PyCodec_BackslashReplaceErrors=Module["_PyCodec_BackslashReplaceErrors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_BackslashReplaceErrors"].apply(null,arguments)};var _PyCodec_NameReplaceErrors=Module["_PyCodec_NameReplaceErrors"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCodec_NameReplaceErrors"].apply(null,arguments)};var _PyAST_CompileObject=Module["_PyAST_CompileObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyAST_CompileObject"].apply(null,arguments)};var _PyFuture_FromASTObject=Module["_PyFuture_FromASTObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFuture_FromASTObject"].apply(null,arguments)};var _PyArena_Malloc=Module["_PyArena_Malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyArena_Malloc"].apply(null,arguments)};var _PyArena_AddPyObject=Module["_PyArena_AddPyObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyArena_AddPyObject"].apply(null,arguments)};var _PyErr_ProgramTextObject=Module["_PyErr_ProgramTextObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_ProgramTextObject"].apply(null,arguments)};var _PyParser_SimpleParseStringFlagsFilename=Module["_PyParser_SimpleParseStringFlagsFilename"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_SimpleParseStringFlagsFilename"].apply(null,arguments)};var _PyOS_strtoul=Module["_PyOS_strtoul"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_strtoul"].apply(null,arguments)};var _PyOS_strtol=Module["_PyOS_strtol"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_strtol"].apply(null,arguments)};var _PySymtable_BuildObject=Module["_PySymtable_BuildObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySymtable_BuildObject"].apply(null,arguments)};var _PySymtable_Free=Module["_PySymtable_Free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySymtable_Free"].apply(null,arguments)};var _PyAST_CompileEx=Module["_PyAST_CompileEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyAST_CompileEx"].apply(null,arguments)};var _PyNode_Compile=Module["_PyNode_Compile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyNode_Compile"].apply(null,arguments)};var _PyArena_New=Module["_PyArena_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyArena_New"].apply(null,arguments)};var _PyArena_Free=Module["_PyArena_Free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyArena_Free"].apply(null,arguments)};var _PyCompile_OpcodeStackEffectWithJump=Module["_PyCompile_OpcodeStackEffectWithJump"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCompile_OpcodeStackEffectWithJump"].apply(null,arguments)};var _PyCompile_OpcodeStackEffect=Module["_PyCompile_OpcodeStackEffect"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCompile_OpcodeStackEffect"].apply(null,arguments)};var _PyAST_Compile=Module["_PyAST_Compile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyAST_Compile"].apply(null,arguments)};var _PySymtable_Lookup=Module["_PySymtable_Lookup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySymtable_Lookup"].apply(null,arguments)};var _PyST_GetScope=Module["_PyST_GetScope"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyST_GetScope"].apply(null,arguments)};var _PyCode_Optimize=Module["_PyCode_Optimize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCode_Optimize"].apply(null,arguments)};var __PyContext_NewHamtForTests=Module["__PyContext_NewHamtForTests"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyContext_NewHamtForTests"].apply(null,arguments)};var _PyContext_New=Module["_PyContext_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyContext_New"].apply(null,arguments)};var _PyContext_Copy=Module["_PyContext_Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyContext_Copy"].apply(null,arguments)};var _PyContext_CopyCurrent=Module["_PyContext_CopyCurrent"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyContext_CopyCurrent"].apply(null,arguments)};var _PyContext_Enter=Module["_PyContext_Enter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyContext_Enter"].apply(null,arguments)};var _PyContext_Exit=Module["_PyContext_Exit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyContext_Exit"].apply(null,arguments)};var _PyContextVar_New=Module["_PyContextVar_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyContextVar_New"].apply(null,arguments)};var _PyContextVar_Get=Module["_PyContextVar_Get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyContextVar_Get"].apply(null,arguments)};var _PyContextVar_Set=Module["_PyContextVar_Set"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyContextVar_Set"].apply(null,arguments)};var _PyContextVar_Reset=Module["_PyContextVar_Reset"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyContextVar_Reset"].apply(null,arguments)};var __PyHamt_New=Module["__PyHamt_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyHamt_New"].apply(null,arguments)};var __PyHamt_Find=Module["__PyHamt_Find"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyHamt_Find"].apply(null,arguments)};var _PyThreadState_Get=Module["_PyThreadState_Get"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThreadState_Get"].apply(null,arguments)};var __PyHamt_Assoc=Module["__PyHamt_Assoc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyHamt_Assoc"].apply(null,arguments)};var __PyHamt_Without=Module["__PyHamt_Without"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyHamt_Without"].apply(null,arguments)};var __PyHamt_Eq=Module["__PyHamt_Eq"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyHamt_Eq"].apply(null,arguments)};var __PyHamt_NewIterKeys=Module["__PyHamt_NewIterKeys"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyHamt_NewIterKeys"].apply(null,arguments)};var __PyContext_Fini=Module["__PyContext_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyContext_Fini"].apply(null,arguments)};var __PyHamt_Fini=Module["__PyHamt_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyHamt_Fini"].apply(null,arguments)};var __PyContext_Init=Module["__PyContext_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyContext_Init"].apply(null,arguments)};var __PyHamt_Init=Module["__PyHamt_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyHamt_Init"].apply(null,arguments)};var __PyHamt_Len=Module["__PyHamt_Len"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyHamt_Len"].apply(null,arguments)};var __PyHamt_NewIterItems=Module["__PyHamt_NewIterItems"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyHamt_NewIterItems"].apply(null,arguments)};var __PyHamt_NewIterValues=Module["__PyHamt_NewIterValues"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyHamt_NewIterValues"].apply(null,arguments)};var _fcntl=Module["_fcntl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fcntl"].apply(null,arguments)};var __PyImport_FindSharedFuncptr=Module["__PyImport_FindSharedFuncptr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_FindSharedFuncptr"].apply(null,arguments)};var _PyErr_GetExcInfo=Module["_PyErr_GetExcInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_GetExcInfo"].apply(null,arguments)};var _PyErr_SetExcInfo=Module["_PyErr_SetExcInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SetExcInfo"].apply(null,arguments)};var _PyErr_SetFromErrnoWithFilename=Module["_PyErr_SetFromErrnoWithFilename"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SetFromErrnoWithFilename"].apply(null,arguments)};var _PyErr_SetImportErrorSubclass=Module["_PyErr_SetImportErrorSubclass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SetImportErrorSubclass"].apply(null,arguments)};var _PyErr_BadInternalCall=Module["_PyErr_BadInternalCall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_BadInternalCall"].apply(null,arguments)};var _PyErr_FormatV=Module["_PyErr_FormatV"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_FormatV"].apply(null,arguments)};var _PyErr_NewExceptionWithDoc=Module["_PyErr_NewExceptionWithDoc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_NewExceptionWithDoc"].apply(null,arguments)};var __PyErr_Init=Module["__PyErr_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_Init"].apply(null,arguments)};var __PyErr_WriteUnraisableDefaultHook=Module["__PyErr_WriteUnraisableDefaultHook"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_WriteUnraisableDefaultHook"].apply(null,arguments)};var _PyTraceBack_Print=Module["_PyTraceBack_Print"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyTraceBack_Print"].apply(null,arguments)};var __PyTraceBack_FromFrame=Module["__PyTraceBack_FromFrame"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTraceBack_FromFrame"].apply(null,arguments)};var _PyErr_SyntaxLocation=Module["_PyErr_SyntaxLocation"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SyntaxLocation"].apply(null,arguments)};var _PyErr_SyntaxLocationEx=Module["_PyErr_SyntaxLocationEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SyntaxLocationEx"].apply(null,arguments)};var _PyErr_SyntaxLocationObject=Module["_PyErr_SyntaxLocationObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_SyntaxLocationObject"].apply(null,arguments)};var __Py_fopen_obj=Module["__Py_fopen_obj"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_fopen_obj"].apply(null,arguments)};var _PyErr_ProgramText=Module["_PyErr_ProgramText"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_ProgramText"].apply(null,arguments)};var __Py_fopen=Module["__Py_fopen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_fopen"].apply(null,arguments)};var _fclose=Module["_fclose"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fclose"].apply(null,arguments)};var _nl_langinfo=Module["_nl_langinfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["nl_langinfo"].apply(null,arguments)};var __Py_GetForceASCII=Module["__Py_GetForceASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_GetForceASCII"].apply(null,arguments)};var _setlocale=Module["_setlocale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["setlocale"].apply(null,arguments)};var _mbstowcs=Module["_mbstowcs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["mbstowcs"].apply(null,arguments)};var __Py_ResetForceASCII=Module["__Py_ResetForceASCII"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_ResetForceASCII"].apply(null,arguments)};var _mbrtowc=Module["_mbrtowc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["mbrtowc"].apply(null,arguments)};var _Py_DecodeLocale=Module["_Py_DecodeLocale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_DecodeLocale"].apply(null,arguments)};var _Py_EncodeLocale=Module["_Py_EncodeLocale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_EncodeLocale"].apply(null,arguments)};var __Py_EncodeLocaleRaw=Module["__Py_EncodeLocaleRaw"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_EncodeLocaleRaw"].apply(null,arguments)};var __Py_stat=Module["__Py_stat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_stat"].apply(null,arguments)};var __Py_set_inheritable_async_safe=Module["__Py_set_inheritable_async_safe"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_set_inheritable_async_safe"].apply(null,arguments)};var __Py_wfopen=Module["__Py_wfopen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_wfopen"].apply(null,arguments)};var _wcstombs=Module["_wcstombs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcstombs"].apply(null,arguments)};var _write=Module["_write"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["write"].apply(null,arguments)};var __Py_wgetcwd=Module["__Py_wgetcwd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_wgetcwd"].apply(null,arguments)};var _wcsncpy=Module["_wcsncpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcsncpy"].apply(null,arguments)};var __Py_GetLocaleconvNumeric=Module["__Py_GetLocaleconvNumeric"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_GetLocaleconvNumeric"].apply(null,arguments)};var _localeconv=Module["_localeconv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["localeconv"].apply(null,arguments)};var _PyFuture_FromAST=Module["_PyFuture_FromAST"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyFuture_FromAST"].apply(null,arguments)};var _PyArg_Parse=Module["_PyArg_Parse"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyArg_Parse"].apply(null,arguments)};var __PyArg_Parse_SizeT=Module["__PyArg_Parse_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_Parse_SizeT"].apply(null,arguments)};var __PyArg_ParseStack=Module["__PyArg_ParseStack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_ParseStack"].apply(null,arguments)};var _PyArg_VaParse=Module["_PyArg_VaParse"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyArg_VaParse"].apply(null,arguments)};var __PyArg_VaParse_SizeT=Module["__PyArg_VaParse_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_VaParse_SizeT"].apply(null,arguments)};var _PyArg_VaParseTupleAndKeywords=Module["_PyArg_VaParseTupleAndKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyArg_VaParseTupleAndKeywords"].apply(null,arguments)};var __PyArg_VaParseTupleAndKeywords_SizeT=Module["__PyArg_VaParseTupleAndKeywords_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_VaParseTupleAndKeywords_SizeT"].apply(null,arguments)};var __PyArg_ParseTupleAndKeywordsFast=Module["__PyArg_ParseTupleAndKeywordsFast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_ParseTupleAndKeywordsFast"].apply(null,arguments)};var __PyArg_ParseTupleAndKeywordsFast_SizeT=Module["__PyArg_ParseTupleAndKeywordsFast_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_ParseTupleAndKeywordsFast_SizeT"].apply(null,arguments)};var __PyArg_ParseStackAndKeywords=Module["__PyArg_ParseStackAndKeywords"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_ParseStackAndKeywords"].apply(null,arguments)};var __PyArg_VaParseTupleAndKeywordsFast=Module["__PyArg_VaParseTupleAndKeywordsFast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_VaParseTupleAndKeywordsFast"].apply(null,arguments)};var __PyArg_VaParseTupleAndKeywordsFast_SizeT=Module["__PyArg_VaParseTupleAndKeywordsFast_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_VaParseTupleAndKeywordsFast_SizeT"].apply(null,arguments)};var __PyArg_UnpackStack=Module["__PyArg_UnpackStack"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_UnpackStack"].apply(null,arguments)};var __PyArg_NoPositional=Module["__PyArg_NoPositional"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_NoPositional"].apply(null,arguments)};var __PyArg_Fini=Module["__PyArg_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArg_Fini"].apply(null,arguments)};var _Py_GetCompiler=Module["_Py_GetCompiler"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_GetCompiler"].apply(null,arguments)};var _Py_GetCopyright=Module["_Py_GetCopyright"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_GetCopyright"].apply(null,arguments)};var __PyOS_ResetGetOpt=Module["__PyOS_ResetGetOpt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyOS_ResetGetOpt"].apply(null,arguments)};var __PyOS_GetOpt=Module["__PyOS_GetOpt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyOS_GetOpt"].apply(null,arguments)};var _Py_GetPlatform=Module["_Py_GetPlatform"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_GetPlatform"].apply(null,arguments)};var _Py_GetVersion=Module["_Py_GetVersion"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_GetVersion"].apply(null,arguments)};var __PyImport_Init=Module["__PyImport_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_Init"].apply(null,arguments)};var __PyImportHooks_Init=Module["__PyImportHooks_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImportHooks_Init"].apply(null,arguments)};var __PyImportZip_Init=Module["__PyImportZip_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImportZip_Init"].apply(null,arguments)};var _PySys_SetObject=Module["_PySys_SetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_SetObject"].apply(null,arguments)};var _PySys_GetObject=Module["_PySys_GetObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_GetObject"].apply(null,arguments)};var __PyImport_Fini=Module["__PyImport_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_Fini"].apply(null,arguments)};var __PyImport_Fini2=Module["__PyImport_Fini2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_Fini2"].apply(null,arguments)};var _PyImport_GetModuleDict=Module["_PyImport_GetModuleDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_GetModuleDict"].apply(null,arguments)};var __PyImport_GetModuleId=Module["__PyImport_GetModuleId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_GetModuleId"].apply(null,arguments)};var __PyImport_SetModule=Module["__PyImport_SetModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_SetModule"].apply(null,arguments)};var __PyImport_SetModuleString=Module["__PyImport_SetModuleString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_SetModuleString"].apply(null,arguments)};var _PyImport_Cleanup=Module["_PyImport_Cleanup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_Cleanup"].apply(null,arguments)};var __PyState_ClearModules=Module["__PyState_ClearModules"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyState_ClearModules"].apply(null,arguments)};var _PyImport_GetMagicNumber=Module["_PyImport_GetMagicNumber"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_GetMagicNumber"].apply(null,arguments)};var _PyImport_GetMagicTag=Module["_PyImport_GetMagicTag"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_GetMagicTag"].apply(null,arguments)};var __PyImport_FixupExtensionObject=Module["__PyImport_FixupExtensionObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_FixupExtensionObject"].apply(null,arguments)};var __PyState_AddModule=Module["__PyState_AddModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyState_AddModule"].apply(null,arguments)};var __PyImport_FixupBuiltin=Module["__PyImport_FixupBuiltin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_FixupBuiltin"].apply(null,arguments)};var __PyImport_FindExtensionObject=Module["__PyImport_FindExtensionObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_FindExtensionObject"].apply(null,arguments)};var __PyImport_FindExtensionObjectEx=Module["__PyImport_FindExtensionObjectEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_FindExtensionObjectEx"].apply(null,arguments)};var __PyImport_AddModuleObject=Module["__PyImport_AddModuleObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_AddModuleObject"].apply(null,arguments)};var __PyImport_FindBuiltin=Module["__PyImport_FindBuiltin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_FindBuiltin"].apply(null,arguments)};var _PyImport_AddModuleObject=Module["_PyImport_AddModuleObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_AddModuleObject"].apply(null,arguments)};var _PyImport_AddModule=Module["_PyImport_AddModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_AddModule"].apply(null,arguments)};var _PyImport_ExecCodeModule=Module["_PyImport_ExecCodeModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_ExecCodeModule"].apply(null,arguments)};var _PyImport_ExecCodeModuleObject=Module["_PyImport_ExecCodeModuleObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_ExecCodeModuleObject"].apply(null,arguments)};var _PyImport_ExecCodeModuleWithPathnames=Module["_PyImport_ExecCodeModuleWithPathnames"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_ExecCodeModuleWithPathnames"].apply(null,arguments)};var _PyImport_ExecCodeModuleEx=Module["_PyImport_ExecCodeModuleEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_ExecCodeModuleEx"].apply(null,arguments)};var _PyImport_GetImporter=Module["_PyImport_GetImporter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_GetImporter"].apply(null,arguments)};var _PyImport_ImportFrozenModuleObject=Module["_PyImport_ImportFrozenModuleObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_ImportFrozenModuleObject"].apply(null,arguments)};var _PyMarshal_ReadObjectFromString=Module["_PyMarshal_ReadObjectFromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMarshal_ReadObjectFromString"].apply(null,arguments)};var _PyImport_ImportFrozenModule=Module["_PyImport_ImportFrozenModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_ImportFrozenModule"].apply(null,arguments)};var __PyTime_GetPerfCounter=Module["__PyTime_GetPerfCounter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_GetPerfCounter"].apply(null,arguments)};var __PyTime_AsMicroseconds=Module["__PyTime_AsMicroseconds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_AsMicroseconds"].apply(null,arguments)};var _PyImport_ImportModuleLevel=Module["_PyImport_ImportModuleLevel"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_ImportModuleLevel"].apply(null,arguments)};var _PyImport_ReloadModule=Module["_PyImport_ReloadModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_ReloadModule"].apply(null,arguments)};var _PyInit__imp=Module["_PyInit__imp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInit__imp"].apply(null,arguments)};var _PyImport_ExtendInittab=Module["_PyImport_ExtendInittab"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyImport_ExtendInittab"].apply(null,arguments)};var __PyImport_LoadDynamicModuleWithSpec=Module["__PyImport_LoadDynamicModuleWithSpec"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyImport_LoadDynamicModuleWithSpec"].apply(null,arguments)};var __Py_KeyedHash=Module["__Py_KeyedHash"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_KeyedHash"].apply(null,arguments)};var _asinh=Module["_asinh"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["asinh"].apply(null,arguments)};var _log1p=Module["_log1p"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["log1p"].apply(null,arguments)};var _cosh=Module["_cosh"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["cosh"].apply(null,arguments)};var _sinh=Module["_sinh"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["sinh"].apply(null,arguments)};var _tanh=Module["_tanh"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["tanh"].apply(null,arguments)};var _tan=Module["_tan"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["tan"].apply(null,arguments)};var _acos=Module["_acos"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["acos"].apply(null,arguments)};var _acosh=Module["_acosh"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["acosh"].apply(null,arguments)};var _asin=Module["_asin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["asin"].apply(null,arguments)};var _atan=Module["_atan"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["atan"].apply(null,arguments)};var _atanh=Module["_atanh"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["atanh"].apply(null,arguments)};var _copysign=Module["_copysign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["copysign"].apply(null,arguments)};var _erf=Module["_erf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["erf"].apply(null,arguments)};var _erfc=Module["_erfc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["erfc"].apply(null,arguments)};var _expm1=Module["_expm1"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["expm1"].apply(null,arguments)};var _log10=Module["_log10"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["log10"].apply(null,arguments)};var _log2=Module["_log2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["log2"].apply(null,arguments)};var __PyTime_localtime=Module["__PyTime_localtime"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_localtime"].apply(null,arguments)};var __PyTime_GetSystemClock=Module["__PyTime_GetSystemClock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_GetSystemClock"].apply(null,arguments)};var __PyTime_AsNanosecondsObject=Module["__PyTime_AsNanosecondsObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_AsNanosecondsObject"].apply(null,arguments)};var __PyTime_FromTimespec=Module["__PyTime_FromTimespec"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_FromTimespec"].apply(null,arguments)};var __PyTime_AsTimespec=Module["__PyTime_AsTimespec"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_AsTimespec"].apply(null,arguments)};var __PyTime_FromNanosecondsObject=Module["__PyTime_FromNanosecondsObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_FromNanosecondsObject"].apply(null,arguments)};var _select=Module["_select"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["select"].apply(null,arguments)};var __PyTime_ObjectToTime_t=Module["__PyTime_ObjectToTime_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_ObjectToTime_t"].apply(null,arguments)};var __PyTime_gmtime=Module["__PyTime_gmtime"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_gmtime"].apply(null,arguments)};var __PyTime_GetPerfCounterWithInfo=Module["__PyTime_GetPerfCounterWithInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_GetPerfCounterWithInfo"].apply(null,arguments)};var __PyTime_GetSystemClockWithInfo=Module["__PyTime_GetSystemClockWithInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_GetSystemClockWithInfo"].apply(null,arguments)};var __PyTime_GetMonotonicClockWithInfo=Module["__PyTime_GetMonotonicClockWithInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_GetMonotonicClockWithInfo"].apply(null,arguments)};var _getrusage=Module["_getrusage"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getrusage"].apply(null,arguments)};var __PyTime_FromTimeval=Module["__PyTime_FromTimeval"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_FromTimeval"].apply(null,arguments)};var __PyTime_MulDiv=Module["__PyTime_MulDiv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_MulDiv"].apply(null,arguments)};var _getpid=Module["_getpid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getpid"].apply(null,arguments)};var _getsockname=Module["_getsockname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getsockname"].apply(null,arguments)};var _socket=Module["_socket"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["socket"].apply(null,arguments)};var _getsockopt=Module["_getsockopt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getsockopt"].apply(null,arguments)};var __PyTime_FromSeconds=Module["__PyTime_FromSeconds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_FromSeconds"].apply(null,arguments)};var _bind=Module["_bind"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["bind"].apply(null,arguments)};var _listen=Module["_listen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["listen"].apply(null,arguments)};var __PyTime_AsMilliseconds=Module["__PyTime_AsMilliseconds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_AsMilliseconds"].apply(null,arguments)};var _setsockopt=Module["_setsockopt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["setsockopt"].apply(null,arguments)};var _shutdown=Module["_shutdown"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["shutdown"].apply(null,arguments)};var _accept=Module["_accept"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["accept"].apply(null,arguments)};var _inet_ntop=Module["_inet_ntop"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inet_ntop"].apply(null,arguments)};var _ntohs=Module["_ntohs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ntohs"].apply(null,arguments)};var __PyTime_AsTimeval_noraise=Module["__PyTime_AsTimeval_noraise"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_AsTimeval_noraise"].apply(null,arguments)};var _htons=Module["_htons"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["htons"].apply(null,arguments)};var _freeaddrinfo=Module["_freeaddrinfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["freeaddrinfo"].apply(null,arguments)};var _inet_pton=Module["_inet_pton"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inet_pton"].apply(null,arguments)};var _connect=Module["_connect"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["connect"].apply(null,arguments)};var _recv=Module["_recv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["recv"].apply(null,arguments)};var _recvfrom=Module["_recvfrom"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["recvfrom"].apply(null,arguments)};var _send=Module["_send"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["send"].apply(null,arguments)};var _sendto=Module["_sendto"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["sendto"].apply(null,arguments)};var _recvmsg=Module["_recvmsg"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["recvmsg"].apply(null,arguments)};var _sendmsg=Module["_sendmsg"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["sendmsg"].apply(null,arguments)};var _gethostname=Module["_gethostname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["gethostname"].apply(null,arguments)};var _getservbyname=Module["_getservbyname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getservbyname"].apply(null,arguments)};var _getservbyport=Module["_getservbyport"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getservbyport"].apply(null,arguments)};var _socketpair=Module["_socketpair"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["socketpair"].apply(null,arguments)};var _ntohl=Module["_ntohl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ntohl"].apply(null,arguments)};var _htonl=Module["_htonl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["htonl"].apply(null,arguments)};var _inet_aton=Module["_inet_aton"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inet_aton"].apply(null,arguments)};var _inet_ntoa=Module["_inet_ntoa"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inet_ntoa"].apply(null,arguments)};var ___h_errno_location=Module["___h_errno_location"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__h_errno_location"].apply(null,arguments)};var _hstrerror=Module["_hstrerror"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["hstrerror"].apply(null,arguments)};var __Py_strhex_bytes_with_sep=Module["__Py_strhex_bytes_with_sep"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_strhex_bytes_with_sep"].apply(null,arguments)};var __Py_strhex=Module["__Py_strhex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_strhex"].apply(null,arguments)};var _tcgetattr=Module["_tcgetattr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["tcgetattr"].apply(null,arguments)};var _cfgetispeed=Module["_cfgetispeed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["cfgetispeed"].apply(null,arguments)};var _cfgetospeed=Module["_cfgetospeed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["cfgetospeed"].apply(null,arguments)};var _cfsetispeed=Module["_cfsetispeed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["cfsetispeed"].apply(null,arguments)};var _cfsetospeed=Module["_cfsetospeed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["cfsetospeed"].apply(null,arguments)};var _tcsetattr=Module["_tcsetattr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["tcsetattr"].apply(null,arguments)};var _tcsendbreak=Module["_tcsendbreak"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["tcsendbreak"].apply(null,arguments)};var _tcdrain=Module["_tcdrain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["tcdrain"].apply(null,arguments)};var _tcflush=Module["_tcflush"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["tcflush"].apply(null,arguments)};var _tcflow=Module["_tcflow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["tcflow"].apply(null,arguments)};var _PyModule_AddStringConstant=Module["_PyModule_AddStringConstant"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_AddStringConstant"].apply(null,arguments)};var _zlibVersion=Module["_zlibVersion"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["zlibVersion"].apply(null,arguments)};var _deflateEnd=Module["_deflateEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflateEnd"].apply(null,arguments)};var _deflate=Module["_deflate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflate"].apply(null,arguments)};var _inflateEnd=Module["_inflateEnd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateEnd"].apply(null,arguments)};var _inflate=Module["_inflate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflate"].apply(null,arguments)};var _inflateSetDictionary=Module["_inflateSetDictionary"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateSetDictionary"].apply(null,arguments)};var _adler32=Module["_adler32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["adler32"].apply(null,arguments)};var _deflateInit_=Module["_deflateInit_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflateInit_"].apply(null,arguments)};var _deflateInit2_=Module["_deflateInit2_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflateInit2_"].apply(null,arguments)};var _deflateSetDictionary=Module["_deflateSetDictionary"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflateSetDictionary"].apply(null,arguments)};var _crc32=Module["_crc32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["crc32"].apply(null,arguments)};var _inflateInit2_=Module["_inflateInit2_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateInit2_"].apply(null,arguments)};var _isalnum=Module["_isalnum"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["isalnum"].apply(null,arguments)};var _tolower=Module["_tolower"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["tolower"].apply(null,arguments)};var _toupper=Module["_toupper"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["toupper"].apply(null,arguments)};var _PyErr_Display=Module["_PyErr_Display"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_Display"].apply(null,arguments)};var __Py_PyAtExit=Module["__Py_PyAtExit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_PyAtExit"].apply(null,arguments)};var _PyInterpreterState_ThreadHead=Module["_PyInterpreterState_ThreadHead"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInterpreterState_ThreadHead"].apply(null,arguments)};var _PyThreadState_Next=Module["_PyThreadState_Next"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThreadState_Next"].apply(null,arguments)};var _PyThread_acquire_lock_timed=Module["_PyThread_acquire_lock_timed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_acquire_lock_timed"].apply(null,arguments)};var __PyThreadState_Prealloc=Module["__PyThreadState_Prealloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyThreadState_Prealloc"].apply(null,arguments)};var _PyThread_start_new_thread=Module["_PyThread_start_new_thread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_start_new_thread"].apply(null,arguments)};var _PyThreadState_Clear=Module["_PyThreadState_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThreadState_Clear"].apply(null,arguments)};var _PyThread_get_stacksize=Module["_PyThread_get_stacksize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_get_stacksize"].apply(null,arguments)};var _PyThread_set_stacksize=Module["_PyThread_set_stacksize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_set_stacksize"].apply(null,arguments)};var __PyThreadState_Init=Module["__PyThreadState_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyThreadState_Init"].apply(null,arguments)};var _PyThreadState_DeleteCurrent=Module["_PyThreadState_DeleteCurrent"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThreadState_DeleteCurrent"].apply(null,arguments)};var __PyErr_Display=Module["__PyErr_Display"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyErr_Display"].apply(null,arguments)};var _wcscoll=Module["_wcscoll"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcscoll"].apply(null,arguments)};var _wcsxfrm=Module["_wcsxfrm"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcsxfrm"].apply(null,arguments)};var _gettext=Module["_gettext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["gettext"].apply(null,arguments)};var _dgettext=Module["_dgettext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dgettext"].apply(null,arguments)};var _dcgettext=Module["_dcgettext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dcgettext"].apply(null,arguments)};var _textdomain=Module["_textdomain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["textdomain"].apply(null,arguments)};var _bindtextdomain=Module["_bindtextdomain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["bindtextdomain"].apply(null,arguments)};var _bind_textdomain_codeset=Module["_bind_textdomain_codeset"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["bind_textdomain_codeset"].apply(null,arguments)};var _PyState_FindModule=Module["_PyState_FindModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyState_FindModule"].apply(null,arguments)};var __PySys_GetSizeOf=Module["__PySys_GetSizeOf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySys_GetSizeOf"].apply(null,arguments)};var __PyThreadState_UncheckedGet=Module["__PyThreadState_UncheckedGet"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyThreadState_UncheckedGet"].apply(null,arguments)};var __Py_DumpTracebackThreads=Module["__Py_DumpTracebackThreads"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_DumpTracebackThreads"].apply(null,arguments)};var __Py_DumpTraceback=Module["__Py_DumpTraceback"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_DumpTraceback"].apply(null,arguments)};var _getrlimit=Module["_getrlimit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getrlimit"].apply(null,arguments)};var _setrlimit=Module["_setrlimit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["setrlimit"].apply(null,arguments)};var __Py_SourceAsString=Module["__Py_SourceAsString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_SourceAsString"].apply(null,arguments)};var __Py_SymtableStringObjectFlags=Module["__Py_SymtableStringObjectFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_SymtableStringObjectFlags"].apply(null,arguments)};var _PyMarshal_Init=Module["_PyMarshal_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMarshal_Init"].apply(null,arguments)};var _PyStatus_Ok=Module["_PyStatus_Ok"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStatus_Ok"].apply(null,arguments)};var _PyStatus_Error=Module["_PyStatus_Error"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStatus_Error"].apply(null,arguments)};var _PyStatus_NoMemory=Module["_PyStatus_NoMemory"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStatus_NoMemory"].apply(null,arguments)};var _PyStatus_Exit=Module["_PyStatus_Exit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStatus_Exit"].apply(null,arguments)};var _PyStatus_IsError=Module["_PyStatus_IsError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStatus_IsError"].apply(null,arguments)};var _PyStatus_IsExit=Module["_PyStatus_IsExit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStatus_IsExit"].apply(null,arguments)};var _PyStatus_Exception=Module["_PyStatus_Exception"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyStatus_Exception"].apply(null,arguments)};var __PyWideStringList_Clear=Module["__PyWideStringList_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyWideStringList_Clear"].apply(null,arguments)};var __PyWideStringList_Copy=Module["__PyWideStringList_Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyWideStringList_Copy"].apply(null,arguments)};var _PyWideStringList_Insert=Module["_PyWideStringList_Insert"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyWideStringList_Insert"].apply(null,arguments)};var _PyWideStringList_Append=Module["_PyWideStringList_Append"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyWideStringList_Append"].apply(null,arguments)};var __PyWideStringList_Extend=Module["__PyWideStringList_Extend"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyWideStringList_Extend"].apply(null,arguments)};var __PyWideStringList_AsList=Module["__PyWideStringList_AsList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyWideStringList_AsList"].apply(null,arguments)};var _Py_SetStandardStreamEncoding=Module["_Py_SetStandardStreamEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_SetStandardStreamEncoding"].apply(null,arguments)};var __Py_ClearStandardStreamEncoding=Module["__Py_ClearStandardStreamEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_ClearStandardStreamEncoding"].apply(null,arguments)};var __Py_ClearArgcArgv=Module["__Py_ClearArgcArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_ClearArgcArgv"].apply(null,arguments)};var _Py_GetArgcArgv=Module["_Py_GetArgcArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_GetArgcArgv"].apply(null,arguments)};var _PyConfig_Clear=Module["_PyConfig_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyConfig_Clear"].apply(null,arguments)};var __PyConfig_InitCompatConfig=Module["__PyConfig_InitCompatConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyConfig_InitCompatConfig"].apply(null,arguments)};var _PyConfig_InitPythonConfig=Module["_PyConfig_InitPythonConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyConfig_InitPythonConfig"].apply(null,arguments)};var _PyConfig_InitIsolatedConfig=Module["_PyConfig_InitIsolatedConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyConfig_InitIsolatedConfig"].apply(null,arguments)};var _PyConfig_SetString=Module["_PyConfig_SetString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyConfig_SetString"].apply(null,arguments)};var _PyConfig_SetBytesString=Module["_PyConfig_SetBytesString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyConfig_SetBytesString"].apply(null,arguments)};var __PyConfig_Copy=Module["__PyConfig_Copy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyConfig_Copy"].apply(null,arguments)};var __PyConfig_Write=Module["__PyConfig_Write"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyConfig_Write"].apply(null,arguments)};var __PyConfig_SetPyArgv=Module["__PyConfig_SetPyArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyConfig_SetPyArgv"].apply(null,arguments)};var _PyConfig_SetBytesArgv=Module["_PyConfig_SetBytesArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyConfig_SetBytesArgv"].apply(null,arguments)};var _PyConfig_SetArgv=Module["_PyConfig_SetArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyConfig_SetArgv"].apply(null,arguments)};var _PyConfig_SetWideStringList=Module["_PyConfig_SetWideStringList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyConfig_SetWideStringList"].apply(null,arguments)};var _PyConfig_Read=Module["_PyConfig_Read"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyConfig_Read"].apply(null,arguments)};var __Py_GetConfigsAsDict=Module["__Py_GetConfigsAsDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_GetConfigsAsDict"].apply(null,arguments)};var __Py_PreInitializeFromConfig=Module["__Py_PreInitializeFromConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_PreInitializeFromConfig"].apply(null,arguments)};var _setvbuf=Module["_setvbuf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["setvbuf"].apply(null,arguments)};var __PyArgv_AsWstrList=Module["__PyArgv_AsWstrList"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyArgv_AsWstrList"].apply(null,arguments)};var __PyPreConfig_InitFromPreConfig=Module["__PyPreConfig_InitFromPreConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPreConfig_InitFromPreConfig"].apply(null,arguments)};var __PyPreConfig_GetConfig=Module["__PyPreConfig_GetConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPreConfig_GetConfig"].apply(null,arguments)};var __PyPreCmdline_Read=Module["__PyPreCmdline_Read"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPreCmdline_Read"].apply(null,arguments)};var __PyPreCmdline_SetConfig=Module["__PyPreCmdline_SetConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPreCmdline_SetConfig"].apply(null,arguments)};var _wcschr=Module["_wcschr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcschr"].apply(null,arguments)};var _iprintf=Module["_iprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["iprintf"].apply(null,arguments)};var _wcstok=Module["_wcstok"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcstok"].apply(null,arguments)};var __PySys_ReadPreinitWarnOptions=Module["__PySys_ReadPreinitWarnOptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySys_ReadPreinitWarnOptions"].apply(null,arguments)};var __PySys_ReadPreinitXOptions=Module["__PySys_ReadPreinitXOptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySys_ReadPreinitXOptions"].apply(null,arguments)};var __Py_get_env_flag=Module["__Py_get_env_flag"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_get_env_flag"].apply(null,arguments)};var __Py_GetEnv=Module["__Py_GetEnv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_GetEnv"].apply(null,arguments)};var _strtoul=Module["_strtoul"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strtoul"].apply(null,arguments)};var __Py_get_xoption=Module["__Py_get_xoption"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_get_xoption"].apply(null,arguments)};var __Py_str_to_int=Module["__Py_str_to_int"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_str_to_int"].apply(null,arguments)};var _wcstol=Module["_wcstol"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcstol"].apply(null,arguments)};var __PyConfig_InitPathConfig=Module["__PyConfig_InitPathConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyConfig_InitPathConfig"].apply(null,arguments)};var __Py_IsLocaleCoercionTarget=Module["__Py_IsLocaleCoercionTarget"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_IsLocaleCoercionTarget"].apply(null,arguments)};var __PyPreCmdline_Clear=Module["__PyPreCmdline_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPreCmdline_Clear"].apply(null,arguments)};var __PyPreConfig_AsDict=Module["__PyPreConfig_AsDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPreConfig_AsDict"].apply(null,arguments)};var _PyMarshal_WriteLongToFile=Module["_PyMarshal_WriteLongToFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMarshal_WriteLongToFile"].apply(null,arguments)};var _PyMarshal_WriteObjectToFile=Module["_PyMarshal_WriteObjectToFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMarshal_WriteObjectToFile"].apply(null,arguments)};var _PyMarshal_ReadShortFromFile=Module["_PyMarshal_ReadShortFromFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMarshal_ReadShortFromFile"].apply(null,arguments)};var _PyMarshal_ReadLongFromFile=Module["_PyMarshal_ReadLongFromFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMarshal_ReadLongFromFile"].apply(null,arguments)};var _PyMarshal_ReadLastObjectFromFile=Module["_PyMarshal_ReadLastObjectFromFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMarshal_ReadLastObjectFromFile"].apply(null,arguments)};var _fread=Module["_fread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fread"].apply(null,arguments)};var _PyMarshal_ReadObjectFromFile=Module["_PyMarshal_ReadObjectFromFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMarshal_ReadObjectFromFile"].apply(null,arguments)};var _PyMarshal_WriteObjectToString=Module["_PyMarshal_WriteObjectToString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyMarshal_WriteObjectToString"].apply(null,arguments)};var _Py_VaBuildValue=Module["_Py_VaBuildValue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_VaBuildValue"].apply(null,arguments)};var __Py_VaBuildValue_SizeT=Module["__Py_VaBuildValue_SizeT"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_VaBuildValue_SizeT"].apply(null,arguments)};var _vsnprintf=Module["_vsnprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["vsnprintf"].apply(null,arguments)};var _PyOS_vsnprintf=Module["_PyOS_vsnprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_vsnprintf"].apply(null,arguments)};var __PyPathConfig_SetGlobal=Module["__PyPathConfig_SetGlobal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPathConfig_SetGlobal"].apply(null,arguments)};var __PyPathConfig_ClearGlobal=Module["__PyPathConfig_ClearGlobal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPathConfig_ClearGlobal"].apply(null,arguments)};var __PyConfig_SetPathConfig=Module["__PyConfig_SetPathConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyConfig_SetPathConfig"].apply(null,arguments)};var __Py_FindEnvConfigValue=Module["__Py_FindEnvConfigValue"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_FindEnvConfigValue"].apply(null,arguments)};var _wcscat=Module["_wcscat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcscat"].apply(null,arguments)};var _wcscpy=Module["_wcscpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcscpy"].apply(null,arguments)};var _wcsncat=Module["_wcsncat"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcsncat"].apply(null,arguments)};var _Py_SetPath=Module["_Py_SetPath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_SetPath"].apply(null,arguments)};var _Py_GetProgramName=Module["_Py_GetProgramName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_GetProgramName"].apply(null,arguments)};var _Py_SetPythonHome=Module["_Py_SetPythonHome"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_SetPythonHome"].apply(null,arguments)};var _Py_SetProgramName=Module["_Py_SetProgramName"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_SetProgramName"].apply(null,arguments)};var __Py_SetProgramFullPath=Module["__Py_SetProgramFullPath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_SetProgramFullPath"].apply(null,arguments)};var _Py_GetPath=Module["_Py_GetPath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_GetPath"].apply(null,arguments)};var _Py_ExitStatusException=Module["_Py_ExitStatusException"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_ExitStatusException"].apply(null,arguments)};var _Py_GetPrefix=Module["_Py_GetPrefix"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_GetPrefix"].apply(null,arguments)};var _Py_GetExecPrefix=Module["_Py_GetExecPrefix"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_GetExecPrefix"].apply(null,arguments)};var _Py_GetProgramFullPath=Module["_Py_GetProgramFullPath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_GetProgramFullPath"].apply(null,arguments)};var _Py_GetPythonHome=Module["_Py_GetPythonHome"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_GetPythonHome"].apply(null,arguments)};var __PyPathConfig_ComputeSysPath0=Module["__PyPathConfig_ComputeSysPath0"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPathConfig_ComputeSysPath0"].apply(null,arguments)};var _wcsrchr=Module["_wcsrchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcsrchr"].apply(null,arguments)};var _fseek=Module["_fseek"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fseek"].apply(null,arguments)};var _feof=Module["_feof"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["feof"].apply(null,arguments)};var __Py_ClearFileSystemEncoding=Module["__Py_ClearFileSystemEncoding"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_ClearFileSystemEncoding"].apply(null,arguments)};var __PyPreCmdline_SetArgv=Module["__PyPreCmdline_SetArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPreCmdline_SetArgv"].apply(null,arguments)};var _wcsncmp=Module["_wcsncmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcsncmp"].apply(null,arguments)};var __PyPreConfig_InitCompatConfig=Module["__PyPreConfig_InitCompatConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPreConfig_InitCompatConfig"].apply(null,arguments)};var _PyPreConfig_InitPythonConfig=Module["_PyPreConfig_InitPythonConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyPreConfig_InitPythonConfig"].apply(null,arguments)};var _PyPreConfig_InitIsolatedConfig=Module["_PyPreConfig_InitIsolatedConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyPreConfig_InitIsolatedConfig"].apply(null,arguments)};var __PyPreConfig_InitFromConfig=Module["__PyPreConfig_InitFromConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPreConfig_InitFromConfig"].apply(null,arguments)};var __PyPreConfig_Read=Module["__PyPreConfig_Read"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPreConfig_Read"].apply(null,arguments)};var __PyRuntime_Initialize=Module["__PyRuntime_Initialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyRuntime_Initialize"].apply(null,arguments)};var __Py_SetLocaleFromEnv=Module["__Py_SetLocaleFromEnv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_SetLocaleFromEnv"].apply(null,arguments)};var __Py_LegacyLocaleDetected=Module["__Py_LegacyLocaleDetected"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_LegacyLocaleDetected"].apply(null,arguments)};var __Py_CoerceLegacyLocale=Module["__Py_CoerceLegacyLocale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_CoerceLegacyLocale"].apply(null,arguments)};var __PyPreConfig_Write=Module["__PyPreConfig_Write"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyPreConfig_Write"].apply(null,arguments)};var __PyHash_Fini=Module["__PyHash_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyHash_Fini"].apply(null,arguments)};var _PyHash_GetFuncDef=Module["_PyHash_GetFuncDef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyHash_GetFuncDef"].apply(null,arguments)};var __PyRuntimeState_Init=Module["__PyRuntimeState_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyRuntimeState_Init"].apply(null,arguments)};var __PyRuntime_Finalize=Module["__PyRuntime_Finalize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyRuntime_Finalize"].apply(null,arguments)};var __PyRuntimeState_Fini=Module["__PyRuntimeState_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyRuntimeState_Fini"].apply(null,arguments)};var _PyModule_GetWarningsModule=Module["_PyModule_GetWarningsModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyModule_GetWarningsModule"].apply(null,arguments)};var __Py_IsCoreInitialized=Module["__Py_IsCoreInitialized"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_IsCoreInitialized"].apply(null,arguments)};var __Py_PreInitializeFromPyArgv=Module["__Py_PreInitializeFromPyArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_PreInitializeFromPyArgv"].apply(null,arguments)};var _Py_PreInitializeFromBytesArgs=Module["_Py_PreInitializeFromBytesArgs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_PreInitializeFromBytesArgs"].apply(null,arguments)};var _Py_PreInitializeFromArgs=Module["_Py_PreInitializeFromArgs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_PreInitializeFromArgs"].apply(null,arguments)};var _Py_PreInitialize=Module["_Py_PreInitialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_PreInitialize"].apply(null,arguments)};var __Py_InitializeMain=Module["__Py_InitializeMain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_InitializeMain"].apply(null,arguments)};var __PyTime_Init=Module["__PyTime_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_Init"].apply(null,arguments)};var __PySys_InitMain=Module["__PySys_InitMain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySys_InitMain"].apply(null,arguments)};var _Py_InitializeFromConfig=Module["_Py_InitializeFromConfig"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_InitializeFromConfig"].apply(null,arguments)};var __PyInterpreterState_Enable=Module["__PyInterpreterState_Enable"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyInterpreterState_Enable"].apply(null,arguments)};var _PyInterpreterState_New=Module["_PyInterpreterState_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInterpreterState_New"].apply(null,arguments)};var _PyThreadState_New=Module["_PyThreadState_New"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThreadState_New"].apply(null,arguments)};var _PyThreadState_Swap=Module["_PyThreadState_Swap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThreadState_Swap"].apply(null,arguments)};var __PyGILState_Init=Module["__PyGILState_Init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGILState_Init"].apply(null,arguments)};var __PySys_Create=Module["__PySys_Create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySys_Create"].apply(null,arguments)};var _Py_CompileStringObject=Module["_Py_CompileStringObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_CompileStringObject"].apply(null,arguments)};var _PyRun_StringFlags=Module["_PyRun_StringFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_StringFlags"].apply(null,arguments)};var _Py_Initialize=Module["_Py_Initialize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_Initialize"].apply(null,arguments)};var _Py_FinalizeEx=Module["_Py_FinalizeEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_FinalizeEx"].apply(null,arguments)};var __PySys_ClearAuditHooks=Module["__PySys_ClearAuditHooks"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySys_ClearAuditHooks"].apply(null,arguments)};var _PyInterpreterState_Clear=Module["_PyInterpreterState_Clear"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInterpreterState_Clear"].apply(null,arguments)};var __PyGILState_Fini=Module["__PyGILState_Fini"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGILState_Fini"].apply(null,arguments)};var _PyInterpreterState_Delete=Module["_PyInterpreterState_Delete"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInterpreterState_Delete"].apply(null,arguments)};var _Py_Finalize=Module["_Py_Finalize"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_Finalize"].apply(null,arguments)};var _Py_NewInterpreter=Module["_Py_NewInterpreter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_NewInterpreter"].apply(null,arguments)};var __PySys_SetPreliminaryStderr=Module["__PySys_SetPreliminaryStderr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySys_SetPreliminaryStderr"].apply(null,arguments)};var _PyErr_PrintEx=Module["_PyErr_PrintEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyErr_PrintEx"].apply(null,arguments)};var _PyThreadState_Delete=Module["_PyThreadState_Delete"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThreadState_Delete"].apply(null,arguments)};var _Py_EndInterpreter=Module["_Py_EndInterpreter"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_EndInterpreter"].apply(null,arguments)};var _Py_AtExit=Module["_Py_AtExit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_AtExit"].apply(null,arguments)};var _Py_Exit=Module["_Py_Exit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_Exit"].apply(null,arguments)};var __Py_RestoreSignals=Module["__Py_RestoreSignals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_RestoreSignals"].apply(null,arguments)};var _Py_FdIsInteractive=Module["_Py_FdIsInteractive"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_FdIsInteractive"].apply(null,arguments)};var __PySys_SetObjectId=Module["__PySys_SetObjectId"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PySys_SetObjectId"].apply(null,arguments)};var _PyOS_mystrnicmp=Module["_PyOS_mystrnicmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_mystrnicmp"].apply(null,arguments)};var __PyInterpreterState_RequiresIDRef=Module["__PyInterpreterState_RequiresIDRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyInterpreterState_RequiresIDRef"].apply(null,arguments)};var __PyInterpreterState_RequireIDRef=Module["__PyInterpreterState_RequireIDRef"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyInterpreterState_RequireIDRef"].apply(null,arguments)};var __PyInterpreterState_GetMainModule=Module["__PyInterpreterState_GetMainModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyInterpreterState_GetMainModule"].apply(null,arguments)};var _PyInterpreterState_GetDict=Module["_PyInterpreterState_GetDict"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInterpreterState_GetDict"].apply(null,arguments)};var _PyState_AddModule=Module["_PyState_AddModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyState_AddModule"].apply(null,arguments)};var _PyState_RemoveModule=Module["_PyState_RemoveModule"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyState_RemoveModule"].apply(null,arguments)};var _PyThreadState_SetAsyncExc=Module["_PyThreadState_SetAsyncExc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThreadState_SetAsyncExc"].apply(null,arguments)};var _PyInterpreterState_Head=Module["_PyInterpreterState_Head"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInterpreterState_Head"].apply(null,arguments)};var _PyInterpreterState_Next=Module["_PyInterpreterState_Next"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyInterpreterState_Next"].apply(null,arguments)};var __PyThread_CurrentFrames=Module["__PyThread_CurrentFrames"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyThread_CurrentFrames"].apply(null,arguments)};var __PyGILState_GetInterpreterStateUnsafe=Module["__PyGILState_GetInterpreterStateUnsafe"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyGILState_GetInterpreterStateUnsafe"].apply(null,arguments)};var _PyThread_tss_is_created=Module["_PyThread_tss_is_created"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_tss_is_created"].apply(null,arguments)};var __PyObject_CheckCrossInterpreterData=Module["__PyObject_CheckCrossInterpreterData"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_CheckCrossInterpreterData"].apply(null,arguments)};var __PyObject_GetCrossInterpreterData=Module["__PyObject_GetCrossInterpreterData"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyObject_GetCrossInterpreterData"].apply(null,arguments)};var __PyCrossInterpreterData_Release=Module["__PyCrossInterpreterData_Release"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCrossInterpreterData_Release"].apply(null,arguments)};var __PyCrossInterpreterData_NewObject=Module["__PyCrossInterpreterData_NewObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCrossInterpreterData_NewObject"].apply(null,arguments)};var __PyCrossInterpreterData_RegisterClass=Module["__PyCrossInterpreterData_RegisterClass"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCrossInterpreterData_RegisterClass"].apply(null,arguments)};var __PyCrossInterpreterData_Lookup=Module["__PyCrossInterpreterData_Lookup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyCrossInterpreterData_Lookup"].apply(null,arguments)};var _PyOS_mystricmp=Module["_PyOS_mystricmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyOS_mystricmp"].apply(null,arguments)};var __Py_strhex_bytes=Module["__Py_strhex_bytes"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_strhex_bytes"].apply(null,arguments)};var _PyRun_AnyFileExFlags=Module["_PyRun_AnyFileExFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_AnyFileExFlags"].apply(null,arguments)};var _PyRun_InteractiveLoopFlags=Module["_PyRun_InteractiveLoopFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_InteractiveLoopFlags"].apply(null,arguments)};var _PyRun_SimpleFileExFlags=Module["_PyRun_SimpleFileExFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_SimpleFileExFlags"].apply(null,arguments)};var _PyRun_FileExFlags=Module["_PyRun_FileExFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_FileExFlags"].apply(null,arguments)};var _ftell=Module["_ftell"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ftell"].apply(null,arguments)};var _rewind=Module["_rewind"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["rewind"].apply(null,arguments)};var _PyParser_ASTFromFileObject=Module["_PyParser_ASTFromFileObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ASTFromFileObject"].apply(null,arguments)};var _PyRun_InteractiveOneObject=Module["_PyRun_InteractiveOneObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_InteractiveOneObject"].apply(null,arguments)};var _PyParser_ASTFromStringObject=Module["_PyParser_ASTFromStringObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ASTFromStringObject"].apply(null,arguments)};var __Py_HandleSystemExit=Module["__Py_HandleSystemExit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_HandleSystemExit"].apply(null,arguments)};var _isxdigit=Module["_isxdigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["isxdigit"].apply(null,arguments)};var _fdopen=Module["_fdopen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fdopen"].apply(null,arguments)};var _Py_CompileStringExFlags=Module["_Py_CompileStringExFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_CompileStringExFlags"].apply(null,arguments)};var _PyCompileString=Module["_PyCompileString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyCompileString"].apply(null,arguments)};var _Py_SymtableStringObject=Module["_Py_SymtableStringObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_SymtableStringObject"].apply(null,arguments)};var _Py_SymtableString=Module["_Py_SymtableString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_SymtableString"].apply(null,arguments)};var _PyParser_ASTFromString=Module["_PyParser_ASTFromString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ASTFromString"].apply(null,arguments)};var _PyParser_ASTFromFile=Module["_PyParser_ASTFromFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ASTFromFile"].apply(null,arguments)};var _PyParser_SimpleParseFileFlags=Module["_PyParser_SimpleParseFileFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_SimpleParseFileFlags"].apply(null,arguments)};var _PyParser_SimpleParseStringFlags=Module["_PyParser_SimpleParseStringFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_SimpleParseStringFlags"].apply(null,arguments)};var _PyParser_ClearError=Module["_PyParser_ClearError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_ClearError"].apply(null,arguments)};var _PyParser_SetError=Module["_PyParser_SetError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_SetError"].apply(null,arguments)};var _PyParser_SimpleParseFile=Module["_PyParser_SimpleParseFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_SimpleParseFile"].apply(null,arguments)};var _PyParser_SimpleParseString=Module["_PyParser_SimpleParseString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyParser_SimpleParseString"].apply(null,arguments)};var _PyRun_AnyFile=Module["_PyRun_AnyFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_AnyFile"].apply(null,arguments)};var _PyRun_AnyFileEx=Module["_PyRun_AnyFileEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_AnyFileEx"].apply(null,arguments)};var _PyRun_AnyFileFlags=Module["_PyRun_AnyFileFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_AnyFileFlags"].apply(null,arguments)};var _PyRun_File=Module["_PyRun_File"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_File"].apply(null,arguments)};var _PyRun_FileEx=Module["_PyRun_FileEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_FileEx"].apply(null,arguments)};var _PyRun_FileFlags=Module["_PyRun_FileFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_FileFlags"].apply(null,arguments)};var _PyRun_SimpleFile=Module["_PyRun_SimpleFile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_SimpleFile"].apply(null,arguments)};var _PyRun_SimpleFileEx=Module["_PyRun_SimpleFileEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_SimpleFileEx"].apply(null,arguments)};var _PyRun_String=Module["_PyRun_String"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_String"].apply(null,arguments)};var _PyRun_SimpleString=Module["_PyRun_SimpleString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_SimpleString"].apply(null,arguments)};var _Py_CompileString=Module["_Py_CompileString"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_CompileString"].apply(null,arguments)};var _Py_CompileStringFlags=Module["_Py_CompileStringFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["Py_CompileStringFlags"].apply(null,arguments)};var _PyRun_InteractiveOne=Module["_PyRun_InteractiveOne"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_InteractiveOne"].apply(null,arguments)};var _PyRun_InteractiveLoop=Module["_PyRun_InteractiveLoop"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyRun_InteractiveLoop"].apply(null,arguments)};var __PyTime_ObjectToTimeval=Module["__PyTime_ObjectToTimeval"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_ObjectToTimeval"].apply(null,arguments)};var __PyTime_FromNanoseconds=Module["__PyTime_FromNanoseconds"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_FromNanoseconds"].apply(null,arguments)};var __PyTime_FromMillisecondsObject=Module["__PyTime_FromMillisecondsObject"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_FromMillisecondsObject"].apply(null,arguments)};var __PyTime_AsTimevalTime_t=Module["__PyTime_AsTimevalTime_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTime_AsTimevalTime_t"].apply(null,arguments)};var _PySymtable_Build=Module["_PySymtable_Build"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySymtable_Build"].apply(null,arguments)};var _PySys_AddAuditHook=Module["_PySys_AddAuditHook"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_AddAuditHook"].apply(null,arguments)};var _PySys_ResetWarnOptions=Module["_PySys_ResetWarnOptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_ResetWarnOptions"].apply(null,arguments)};var _PySys_AddWarnOptionUnicode=Module["_PySys_AddWarnOptionUnicode"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_AddWarnOptionUnicode"].apply(null,arguments)};var _PySys_AddWarnOption=Module["_PySys_AddWarnOption"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_AddWarnOption"].apply(null,arguments)};var _PySys_HasWarnOptions=Module["_PySys_HasWarnOptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_HasWarnOptions"].apply(null,arguments)};var _PySys_AddXOption=Module["_PySys_AddXOption"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_AddXOption"].apply(null,arguments)};var _PySys_GetXOptions=Module["_PySys_GetXOptions"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_GetXOptions"].apply(null,arguments)};var _PyThread_GetInfo=Module["_PyThread_GetInfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_GetInfo"].apply(null,arguments)};var _PySys_SetPath=Module["_PySys_SetPath"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_SetPath"].apply(null,arguments)};var _PySys_SetArgvEx=Module["_PySys_SetArgvEx"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_SetArgvEx"].apply(null,arguments)};var _PySys_SetArgv=Module["_PySys_SetArgv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_SetArgv"].apply(null,arguments)};var _PySys_WriteStdout=Module["_PySys_WriteStdout"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_WriteStdout"].apply(null,arguments)};var _PySys_FormatStdout=Module["_PySys_FormatStdout"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PySys_FormatStdout"].apply(null,arguments)};var _pthread_self=Module["_pthread_self"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_self"].apply(null,arguments)};var _pthread_mutex_trylock=Module["_pthread_mutex_trylock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_mutex_trylock"].apply(null,arguments)};var _PyThread_create_key=Module["_PyThread_create_key"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_create_key"].apply(null,arguments)};var _pthread_key_create=Module["_pthread_key_create"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_key_create"].apply(null,arguments)};var _pthread_key_delete=Module["_pthread_key_delete"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_key_delete"].apply(null,arguments)};var _PyThread_delete_key=Module["_PyThread_delete_key"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_delete_key"].apply(null,arguments)};var _PyThread_delete_key_value=Module["_PyThread_delete_key_value"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_delete_key_value"].apply(null,arguments)};var _pthread_setspecific=Module["_pthread_setspecific"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_setspecific"].apply(null,arguments)};var _PyThread_set_key_value=Module["_PyThread_set_key_value"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_set_key_value"].apply(null,arguments)};var _PyThread_get_key_value=Module["_PyThread_get_key_value"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_get_key_value"].apply(null,arguments)};var _pthread_getspecific=Module["_pthread_getspecific"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_getspecific"].apply(null,arguments)};var _PyThread_ReInitTLS=Module["_PyThread_ReInitTLS"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_ReInitTLS"].apply(null,arguments)};var _PyThread_tss_alloc=Module["_PyThread_tss_alloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_tss_alloc"].apply(null,arguments)};var _PyThread_tss_free=Module["_PyThread_tss_free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["PyThread_tss_free"].apply(null,arguments)};var __PyTraceback_Add=Module["__PyTraceback_Add"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_PyTraceback_Add"].apply(null,arguments)};var __Py_DumpHexadecimal=Module["__Py_DumpHexadecimal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Py_DumpHexadecimal"].apply(null,arguments)};var _adler32_combine=Module["_adler32_combine"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["adler32_combine"].apply(null,arguments)};var _adler32_combine64=Module["_adler32_combine64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["adler32_combine64"].apply(null,arguments)};var _get_crc_table=Module["_get_crc_table"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["get_crc_table"].apply(null,arguments)};var _crc32_combine=Module["_crc32_combine"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["crc32_combine"].apply(null,arguments)};var _crc32_combine64=Module["_crc32_combine64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["crc32_combine64"].apply(null,arguments)};var _zcalloc=Module["_zcalloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["zcalloc"].apply(null,arguments)};var _zcfree=Module["_zcfree"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["zcfree"].apply(null,arguments)};var _deflateResetKeep=Module["_deflateResetKeep"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflateResetKeep"].apply(null,arguments)};var _deflateReset=Module["_deflateReset"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflateReset"].apply(null,arguments)};var __tr_init=Module["__tr_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_tr_init"].apply(null,arguments)};var _deflateSetHeader=Module["_deflateSetHeader"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflateSetHeader"].apply(null,arguments)};var _deflatePending=Module["_deflatePending"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflatePending"].apply(null,arguments)};var _deflatePrime=Module["_deflatePrime"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflatePrime"].apply(null,arguments)};var __tr_flush_bits=Module["__tr_flush_bits"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_tr_flush_bits"].apply(null,arguments)};var _deflateParams=Module["_deflateParams"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflateParams"].apply(null,arguments)};var __tr_flush_block=Module["__tr_flush_block"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_tr_flush_block"].apply(null,arguments)};var __tr_align=Module["__tr_align"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_tr_align"].apply(null,arguments)};var __tr_stored_block=Module["__tr_stored_block"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_tr_stored_block"].apply(null,arguments)};var _deflateTune=Module["_deflateTune"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflateTune"].apply(null,arguments)};var _deflateBound=Module["_deflateBound"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflateBound"].apply(null,arguments)};var _deflateCopy=Module["_deflateCopy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["deflateCopy"].apply(null,arguments)};var _inflate_fast=Module["_inflate_fast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflate_fast"].apply(null,arguments)};var _inflateResetKeep=Module["_inflateResetKeep"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateResetKeep"].apply(null,arguments)};var _inflateReset=Module["_inflateReset"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateReset"].apply(null,arguments)};var _inflateReset2=Module["_inflateReset2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateReset2"].apply(null,arguments)};var _inflateInit_=Module["_inflateInit_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateInit_"].apply(null,arguments)};var _inflatePrime=Module["_inflatePrime"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflatePrime"].apply(null,arguments)};var _inflate_table=Module["_inflate_table"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflate_table"].apply(null,arguments)};var _inflateGetDictionary=Module["_inflateGetDictionary"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateGetDictionary"].apply(null,arguments)};var _inflateGetHeader=Module["_inflateGetHeader"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateGetHeader"].apply(null,arguments)};var _inflateSync=Module["_inflateSync"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateSync"].apply(null,arguments)};var _inflateSyncPoint=Module["_inflateSyncPoint"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateSyncPoint"].apply(null,arguments)};var _inflateCopy=Module["_inflateCopy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateCopy"].apply(null,arguments)};var _inflateUndermine=Module["_inflateUndermine"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateUndermine"].apply(null,arguments)};var _inflateMark=Module["_inflateMark"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["inflateMark"].apply(null,arguments)};var __tr_tally=Module["__tr_tally"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_tr_tally"].apply(null,arguments)};var _zlibCompileFlags=Module["_zlibCompileFlags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["zlibCompileFlags"].apply(null,arguments)};var _zError=Module["_zError"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["zError"].apply(null,arguments)};var ___synccall=Module["___synccall"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__synccall"].apply(null,arguments)};var ___syscall_ret=Module["___syscall_ret"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__syscall_ret"].apply(null,arguments)};var ___procfdname=Module["___procfdname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__procfdname"].apply(null,arguments)};var _fstat64=Module["_fstat64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fstat64"].apply(null,arguments)};var _stat64=Module["_stat64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["stat64"].apply(null,arguments)};var _lstat64=Module["_lstat64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["lstat64"].apply(null,arguments)};var ___cos=Module["___cos"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__cos"].apply(null,arguments)};var _scalbn=Module["_scalbn"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["scalbn"].apply(null,arguments)};var ___rem_pio2_large=Module["___rem_pio2_large"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__rem_pio2_large"].apply(null,arguments)};var ___rem_pio2=Module["___rem_pio2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__rem_pio2"].apply(null,arguments)};var ___expo2=Module["___expo2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__expo2"].apply(null,arguments)};var _sqrt=Module["_sqrt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["sqrt"].apply(null,arguments)};var _fabs=Module["_fabs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fabs"].apply(null,arguments)};var ___tan=Module["___tan"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__tan"].apply(null,arguments)};var _floor=Module["_floor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["floor"].apply(null,arguments)};var ___sin=Module["___sin"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__sin"].apply(null,arguments)};var ___strerror_l=Module["___strerror_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__strerror_l"].apply(null,arguments)};var ___lctrans=Module["___lctrans"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__lctrans"].apply(null,arguments)};var _strerror_l=Module["_strerror_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strerror_l"].apply(null,arguments)};var _wcsrtombs=Module["_wcsrtombs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcsrtombs"].apply(null,arguments)};var _mbsrtowcs=Module["_mbsrtowcs"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["mbsrtowcs"].apply(null,arguments)};var _wctomb=Module["_wctomb"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wctomb"].apply(null,arguments)};var _wcrtomb=Module["_wcrtomb"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcrtomb"].apply(null,arguments)};var ___mo_lookup=Module["___mo_lookup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__mo_lookup"].apply(null,arguments)};var _isalnum_l=Module["_isalnum_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["isalnum_l"].apply(null,arguments)};var ___lctrans_impl=Module["___lctrans_impl"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__lctrans_impl"].apply(null,arguments)};var ___lctrans_cur=Module["___lctrans_cur"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__lctrans_cur"].apply(null,arguments)};var _iswspace_l=Module["_iswspace_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["iswspace_l"].apply(null,arguments)};var _isspace_l=Module["_isspace_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["isspace_l"].apply(null,arguments)};var ___gettextdomain=Module["___gettextdomain"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__gettextdomain"].apply(null,arguments)};var _ngettext=Module["_ngettext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ngettext"].apply(null,arguments)};var _dngettext=Module["_dngettext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dngettext"].apply(null,arguments)};var _strcasecmp=Module["_strcasecmp"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strcasecmp"].apply(null,arguments)};var ___strchrnul=Module["___strchrnul"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__strchrnul"].apply(null,arguments)};var ___get_locale=Module["___get_locale"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__get_locale"].apply(null,arguments)};var _strcasecmp_l=Module["_strcasecmp_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strcasecmp_l"].apply(null,arguments)};var ___nl_langinfo_l=Module["___nl_langinfo_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__nl_langinfo_l"].apply(null,arguments)};var ___nl_langinfo=Module["___nl_langinfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__nl_langinfo"].apply(null,arguments)};var _nl_langinfo_l=Module["_nl_langinfo_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["nl_langinfo_l"].apply(null,arguments)};var _dcngettext=Module["_dcngettext"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dcngettext"].apply(null,arguments)};var ___munmap=Module["___munmap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__munmap"].apply(null,arguments)};var _isspace=Module["_isspace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["isspace"].apply(null,arguments)};var ___pleval=Module["___pleval"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__pleval"].apply(null,arguments)};var _strnlen=Module["_strnlen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strnlen"].apply(null,arguments)};var _islower_l=Module["_islower_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["islower_l"].apply(null,arguments)};var _isxdigit_l=Module["_isxdigit_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["isxdigit_l"].apply(null,arguments)};var ___wcsxfrm_l=Module["___wcsxfrm_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__wcsxfrm_l"].apply(null,arguments)};var _wmemcpy=Module["_wmemcpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wmemcpy"].apply(null,arguments)};var _wcsxfrm_l=Module["_wcsxfrm_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcsxfrm_l"].apply(null,arguments)};var _isdigit=Module["_isdigit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["isdigit"].apply(null,arguments)};var _toupper_l=Module["_toupper_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["toupper_l"].apply(null,arguments)};var ___wcscoll_l=Module["___wcscoll_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__wcscoll_l"].apply(null,arguments)};var _wcscoll_l=Module["_wcscoll_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcscoll_l"].apply(null,arguments)};var _tolower_l=Module["_tolower_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["tolower_l"].apply(null,arguments)};var _isupper_l=Module["_isupper_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["isupper_l"].apply(null,arguments)};var _isalpha_l=Module["_isalpha_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["isalpha_l"].apply(null,arguments)};var _isdigit_l=Module["_isdigit_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["isdigit_l"].apply(null,arguments)};var _readdir64=Module["_readdir64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["readdir64"].apply(null,arguments)};var _open64=Module["_open64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["open64"].apply(null,arguments)};var _cfsetspeed=Module["_cfsetspeed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["cfsetspeed"].apply(null,arguments)};var ___intscan=Module["___intscan"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__intscan"].apply(null,arguments)};var ___shlim=Module["___shlim"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__shlim"].apply(null,arguments)};var ___shgetc=Module["___shgetc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__shgetc"].apply(null,arguments)};var _readlink=Module["_readlink"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["readlink"].apply(null,arguments)};var _ttyname_r=Module["_ttyname_r"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ttyname_r"].apply(null,arguments)};var ___setxid=Module["___setxid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__setxid"].apply(null,arguments)};var ___aio_close=Module["___aio_close"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__aio_close"].apply(null,arguments)};var _lseek64=Module["_lseek64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["lseek64"].apply(null,arguments)};var _uname=Module["_uname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["uname"].apply(null,arguments)};var _strdup=Module["_strdup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strdup"].apply(null,arguments)};var ___vm_wait=Module["___vm_wait"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__vm_wait"].apply(null,arguments)};var _munmap=Module["_munmap"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["munmap"].apply(null,arguments)};var _strtoull=Module["_strtoull"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strtoull"].apply(null,arguments)};var _strtoll=Module["_strtoll"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strtoll"].apply(null,arguments)};var ___uflow=Module["___uflow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__uflow"].apply(null,arguments)};var ___multi3=Module["___multi3"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__multi3"].apply(null,arguments)};var _strtoimax=Module["_strtoimax"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strtoimax"].apply(null,arguments)};var _strtoumax=Module["_strtoumax"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strtoumax"].apply(null,arguments)};var ___strtol_internal=Module["___strtol_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__strtol_internal"].apply(null,arguments)};var ___strtoul_internal=Module["___strtoul_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__strtoul_internal"].apply(null,arguments)};var ___strtoll_internal=Module["___strtoll_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__strtoll_internal"].apply(null,arguments)};var ___strtoull_internal=Module["___strtoull_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__strtoull_internal"].apply(null,arguments)};var ___strtoimax_internal=Module["___strtoimax_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__strtoimax_internal"].apply(null,arguments)};var ___strtoumax_internal=Module["___strtoumax_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__strtoumax_internal"].apply(null,arguments)};var _wcstoull=Module["_wcstoull"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcstoull"].apply(null,arguments)};var _wcstoll=Module["_wcstoll"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcstoll"].apply(null,arguments)};var _wcstoul=Module["_wcstoul"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcstoul"].apply(null,arguments)};var _iswspace=Module["_iswspace"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["iswspace"].apply(null,arguments)};var _wcstoimax=Module["_wcstoimax"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcstoimax"].apply(null,arguments)};var _wcstoumax=Module["_wcstoumax"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcstoumax"].apply(null,arguments)};var _getservbyport_r=Module["_getservbyport_r"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getservbyport_r"].apply(null,arguments)};var _getservbyname_r=Module["_getservbyname_r"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getservbyname_r"].apply(null,arguments)};var _strspn=Module["_strspn"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strspn"].apply(null,arguments)};var ___lookup_serv=Module["___lookup_serv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__lookup_serv"].apply(null,arguments)};var ___fopen_rb_ca=Module["___fopen_rb_ca"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__fopen_rb_ca"].apply(null,arguments)};var ___fclose_ca=Module["___fclose_ca"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__fclose_ca"].apply(null,arguments)};var ___inet_aton=Module["___inet_aton"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__inet_aton"].apply(null,arguments)};var ___setrlimit=Module["___setrlimit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__setrlimit"].apply(null,arguments)};var _setrlimit64=Module["_setrlimit64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["setrlimit64"].apply(null,arguments)};var ___emscripten_pthread_data_constructor=Module["___emscripten_pthread_data_constructor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__emscripten_pthread_data_constructor"].apply(null,arguments)};var _getrlimit64=Module["_getrlimit64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["getrlimit64"].apply(null,arguments)};var ___stdio_close=Module["___stdio_close"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__stdio_close"].apply(null,arguments)};var _fprintf=Module["_fprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fprintf"].apply(null,arguments)};var _vfprintf=Module["_vfprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["vfprintf"].apply(null,arguments)};var _vfiprintf=Module["_vfiprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["vfiprintf"].apply(null,arguments)};var ___small_fprintf=Module["___small_fprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__small_fprintf"].apply(null,arguments)};var ___small_vfprintf=Module["___small_vfprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__small_vfprintf"].apply(null,arguments)};var ___lockfile=Module["___lockfile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__lockfile"].apply(null,arguments)};var ___overflow=Module["___overflow"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__overflow"].apply(null,arguments)};var ___unlockfile=Module["___unlockfile"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__unlockfile"].apply(null,arguments)};var ___fseeko_unlocked=Module["___fseeko_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__fseeko_unlocked"].apply(null,arguments)};var ___stdio_write=Module["___stdio_write"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__stdio_write"].apply(null,arguments)};var ___towrite=Module["___towrite"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__towrite"].apply(null,arguments)};var ___fseeko=Module["___fseeko"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__fseeko"].apply(null,arguments)};var _fseeko=Module["_fseeko"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fseeko"].apply(null,arguments)};var _fseeko64=Module["_fseeko64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fseeko64"].apply(null,arguments)};var ___stdio_exit=Module["___stdio_exit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__stdio_exit"].apply(null,arguments)};var ___stdio_exit_needed=Module["___stdio_exit_needed"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__stdio_exit_needed"].apply(null,arguments)};var ___towrite_needs_stdio_exit=Module["___towrite_needs_stdio_exit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__towrite_needs_stdio_exit"].apply(null,arguments)};var ___ofl_lock=Module["___ofl_lock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__ofl_lock"].apply(null,arguments)};var ___toread=Module["___toread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__toread"].apply(null,arguments)};var ___fwritex=Module["___fwritex"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__fwritex"].apply(null,arguments)};var _fwrite_unlocked=Module["_fwrite_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fwrite_unlocked"].apply(null,arguments)};var ___fdopen=Module["___fdopen"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__fdopen"].apply(null,arguments)};var ___stdio_seek=Module["___stdio_seek"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__stdio_seek"].apply(null,arguments)};var ___stdio_read=Module["___stdio_read"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__stdio_read"].apply(null,arguments)};var ___ofl_add=Module["___ofl_add"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__ofl_add"].apply(null,arguments)};var _fread_unlocked=Module["_fread_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fread_unlocked"].apply(null,arguments)};var _sprintf=Module["_sprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["sprintf"].apply(null,arguments)};var _vsprintf=Module["_vsprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["vsprintf"].apply(null,arguments)};var _vsiprintf=Module["_vsiprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["vsiprintf"].apply(null,arguments)};var ___small_sprintf=Module["___small_sprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__small_sprintf"].apply(null,arguments)};var ___small_vsprintf=Module["___small_vsprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__small_vsprintf"].apply(null,arguments)};var _fileno_unlocked=Module["_fileno_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fileno_unlocked"].apply(null,arguments)};var ___unlist_locked_file=Module["___unlist_locked_file"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__unlist_locked_file"].apply(null,arguments)};var ___ofl_unlock=Module["___ofl_unlock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__ofl_unlock"].apply(null,arguments)};var ___toread_needs_stdio_exit=Module["___toread_needs_stdio_exit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__toread_needs_stdio_exit"].apply(null,arguments)};var ___ftello_unlocked=Module["___ftello_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__ftello_unlocked"].apply(null,arguments)};var ___ftello=Module["___ftello"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__ftello"].apply(null,arguments)};var _ftello=Module["_ftello"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ftello"].apply(null,arguments)};var _ftello64=Module["_ftello64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ftello64"].apply(null,arguments)};var _vsniprintf=Module["_vsniprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["vsniprintf"].apply(null,arguments)};var ___small_vsnprintf=Module["___small_vsnprintf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__small_vsnprintf"].apply(null,arguments)};var ___vfprintf_internal=Module["___vfprintf_internal"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__vfprintf_internal"].apply(null,arguments)};var ___trunctfdf2=Module["___trunctfdf2"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__trunctfdf2"].apply(null,arguments)};var _ferror_unlocked=Module["_ferror_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["ferror_unlocked"].apply(null,arguments)};var __IO_ferror_unlocked=Module["__IO_ferror_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_IO_ferror_unlocked"].apply(null,arguments)};var _fgets_unlocked=Module["_fgets_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fgets_unlocked"].apply(null,arguments)};var _clearerr_unlocked=Module["_clearerr_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["clearerr_unlocked"].apply(null,arguments)};var _feof_unlocked=Module["_feof_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["feof_unlocked"].apply(null,arguments)};var __IO_feof_unlocked=Module["__IO_feof_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_IO_feof_unlocked"].apply(null,arguments)};var _printf=Module["_printf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["printf"].apply(null,arguments)};var ___small_printf=Module["___small_printf"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__small_printf"].apply(null,arguments)};var ___fmodeflags=Module["___fmodeflags"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__fmodeflags"].apply(null,arguments)};var _fopen64=Module["_fopen64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fopen64"].apply(null,arguments)};var _fflush_unlocked=Module["_fflush_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fflush_unlocked"].apply(null,arguments)};var _fputs_unlocked=Module["_fputs_unlocked"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["fputs_unlocked"].apply(null,arguments)};var __IO_getc=Module["__IO_getc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_IO_getc"].apply(null,arguments)};var _wmemset=Module["_wmemset"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wmemset"].apply(null,arguments)};var ___memrchr=Module["___memrchr"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__memrchr"].apply(null,arguments)};var ___strcasecmp_l=Module["___strcasecmp_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__strcasecmp_l"].apply(null,arguments)};var _wcscspn=Module["_wcscspn"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcscspn"].apply(null,arguments)};var ___stpncpy=Module["___stpncpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__stpncpy"].apply(null,arguments)};var ___strdup=Module["___strdup"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__strdup"].apply(null,arguments)};var ___stpcpy=Module["___stpcpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__stpcpy"].apply(null,arguments)};var _stpcpy=Module["_stpcpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["stpcpy"].apply(null,arguments)};var _wcsspn=Module["_wcsspn"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["wcsspn"].apply(null,arguments)};var _stpncpy=Module["_stpncpy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["stpncpy"].apply(null,arguments)};var _strchrnul=Module["_strchrnul"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["strchrnul"].apply(null,arguments)};var _isupper=Module["_isupper"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["isupper"].apply(null,arguments)};var ___isupper_l=Module["___isupper_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__isupper_l"].apply(null,arguments)};var _islower=Module["_islower"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["islower"].apply(null,arguments)};var ___toupper_l=Module["___toupper_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__toupper_l"].apply(null,arguments)};var ___iswspace_l=Module["___iswspace_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__iswspace_l"].apply(null,arguments)};var ___isxdigit_l=Module["___isxdigit_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__isxdigit_l"].apply(null,arguments)};var ___tolower_l=Module["___tolower_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__tolower_l"].apply(null,arguments)};var _isalpha=Module["_isalpha"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["isalpha"].apply(null,arguments)};var ___isalpha_l=Module["___isalpha_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__isalpha_l"].apply(null,arguments)};var ___islower_l=Module["___islower_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__islower_l"].apply(null,arguments)};var ___isalnum_l=Module["___isalnum_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__isalnum_l"].apply(null,arguments)};var ___isspace_l=Module["___isspace_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__isspace_l"].apply(null,arguments)};var ___isdigit_l=Module["___isdigit_l"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__isdigit_l"].apply(null,arguments)};var _abort_message=Module["_abort_message"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["abort_message"].apply(null,arguments)};var ___cxa_bad_cast=Module["___cxa_bad_cast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__cxa_bad_cast"].apply(null,arguments)};var __ZNSt8bad_castC1Ev=Module["__ZNSt8bad_castC1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt8bad_castC1Ev"].apply(null,arguments)};var __ZNSt8bad_castD1Ev=Module["__ZNSt8bad_castD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt8bad_castD1Ev"].apply(null,arguments)};var ___cxa_bad_typeid=Module["___cxa_bad_typeid"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__cxa_bad_typeid"].apply(null,arguments)};var __ZNSt10bad_typeidC1Ev=Module["__ZNSt10bad_typeidC1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt10bad_typeidC1Ev"].apply(null,arguments)};var __ZNSt10bad_typeidD1Ev=Module["__ZNSt10bad_typeidD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt10bad_typeidD1Ev"].apply(null,arguments)};var ___cxa_throw_bad_array_new_length=Module["___cxa_throw_bad_array_new_length"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__cxa_throw_bad_array_new_length"].apply(null,arguments)};var __ZNSt20bad_array_new_lengthC1Ev=Module["__ZNSt20bad_array_new_lengthC1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt20bad_array_new_lengthC1Ev"].apply(null,arguments)};var __ZNSt20bad_array_new_lengthD1Ev=Module["__ZNSt20bad_array_new_lengthD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt20bad_array_new_lengthD1Ev"].apply(null,arguments)};var __ZSt14set_unexpectedPFvvE=Module["__ZSt14set_unexpectedPFvvE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZSt14set_unexpectedPFvvE"].apply(null,arguments)};var __ZSt13set_terminatePFvvE=Module["__ZSt13set_terminatePFvvE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZSt13set_terminatePFvvE"].apply(null,arguments)};var ___cxa_get_globals_fast=Module["___cxa_get_globals_fast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__cxa_get_globals_fast"].apply(null,arguments)};var __ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception=Module["__ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception"].apply(null,arguments)};var __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception=Module["__ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception"].apply(null,arguments)};var __ZNKSt9type_info4nameEv=Module["__ZNKSt9type_info4nameEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNKSt9type_info4nameEv"].apply(null,arguments)};var ___cxa_demangle=Module["___cxa_demangle"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__cxa_demangle"].apply(null,arguments)};var __ZSt9terminatev=Module["__ZSt9terminatev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZSt9terminatev"].apply(null,arguments)};var __ZNSt3__214numeric_limitsIjE3maxEv=Module["__ZNSt3__214numeric_limitsIjE3maxEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__214numeric_limitsIjE3maxEv"].apply(null,arguments)};var __ZNSt3__223__libcpp_numeric_limitsIjLb1EE3maxEv=Module["__ZNSt3__223__libcpp_numeric_limitsIjLb1EE3maxEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsIjLb1EE3maxEv"].apply(null,arguments)};var __ZNSt3__27forwardIRA34_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA34_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA34_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__25equalIPKcS2_EEbT_S3_T0_=Module["__ZNSt3__25equalIPKcS2_EEbT_S3_T0_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__25equalIPKcS2_EEbT_S3_T0_"].apply(null,arguments)};var __ZNSt3__25equalIPKcS2_NS_10__equal_toIccEEEEbT_S5_T0_T1_=Module["__ZNSt3__25equalIPKcS2_NS_10__equal_toIccEEEEbT_S5_T0_T1_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__25equalIPKcS2_NS_10__equal_toIccEEEEbT_S5_T0_T1_"].apply(null,arguments)};var __ZNKSt3__210__equal_toIccEclERKcS3_=Module["__ZNKSt3__210__equal_toIccEclERKcS3_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNKSt3__210__equal_toIccEclERKcS3_"].apply(null,arguments)};var __ZNSt3__27forwardIRA12_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA12_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA12_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA9_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA9_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA9_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA14_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA14_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA14_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA19_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA19_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA19_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA27_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA27_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA27_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA41_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA41_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA41_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA18_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA18_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA18_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA22_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA22_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA22_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA20_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA20_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA20_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA25_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA25_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA25_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZdlPv=Module["__ZdlPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZdlPv"].apply(null,arguments)};var __ZNSt3__27forwardIRA4_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA4_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA4_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA5_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA5_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA5_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRmEEOT_RNS_16remove_referenceIS2_E4typeE=Module["__ZNSt3__27forwardIRmEEOT_RNS_16remove_referenceIS2_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRmEEOT_RNS_16remove_referenceIS2_E4typeE"].apply(null,arguments)};var __ZNSt3__24moveIRbEEONS_16remove_referenceIT_E4typeEOS3_=Module["__ZNSt3__24moveIRbEEONS_16remove_referenceIT_E4typeEOS3_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__24moveIRbEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null,arguments)};var __ZNSt3__27forwardIRA10_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA10_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA10_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA2_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA2_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA2_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA11_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA11_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA11_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRbEEOT_RNS_16remove_referenceIS2_E4typeE=Module["__ZNSt3__27forwardIRbEEOT_RNS_16remove_referenceIS2_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRbEEOT_RNS_16remove_referenceIS2_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIbEEOT_RNS_16remove_referenceIS1_E4typeE=Module["__ZNSt3__27forwardIbEEOT_RNS_16remove_referenceIS1_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIbEEOT_RNS_16remove_referenceIS1_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA13_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA13_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA13_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA3_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA3_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA3_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIDnEEOT_RNS_16remove_referenceIS1_E4typeE=Module["__ZNSt3__27forwardIDnEEOT_RNS_16remove_referenceIS1_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIDnEEOT_RNS_16remove_referenceIS1_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA17_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA17_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA17_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA6_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA6_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA6_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIiEEOT_RNS_16remove_referenceIS1_E4typeE=Module["__ZNSt3__27forwardIiEEOT_RNS_16remove_referenceIS1_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIiEEOT_RNS_16remove_referenceIS1_E4typeE"].apply(null,arguments)};var __ZNSt3__27reverseIPcEEvT_S2_=Module["__ZNSt3__27reverseIPcEEvT_S2_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27reverseIPcEEvT_S2_"].apply(null,arguments)};var __ZNSt3__29__reverseIPcEEvT_S2_NS_26random_access_iterator_tagE=Module["__ZNSt3__29__reverseIPcEEvT_S2_NS_26random_access_iterator_tagE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__29__reverseIPcEEvT_S2_NS_26random_access_iterator_tagE"].apply(null,arguments)};var __ZNSt3__29iter_swapIPcS1_EEvT_T0_=Module["__ZNSt3__29iter_swapIPcS1_EEvT_T0_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__29iter_swapIPcS1_EEvT_T0_"].apply(null,arguments)};var __ZNSt3__24swapIcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_=Module["__ZNSt3__24swapIcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__24swapIcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null,arguments)};var __ZNSt3__24moveIRcEEONS_16remove_referenceIT_E4typeEOS3_=Module["__ZNSt3__24moveIRcEEONS_16remove_referenceIT_E4typeEOS3_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__24moveIRcEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null,arguments)};var __ZNSt3__24moveIRjEEONS_16remove_referenceIT_E4typeEOS3_=Module["__ZNSt3__24moveIRjEEONS_16remove_referenceIT_E4typeEOS3_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__24moveIRjEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null,arguments)};var __ZNSt3__27forwardIRA16_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA16_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA16_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA15_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA15_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA15_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRiEEOT_RNS_16remove_referenceIS2_E4typeE=Module["__ZNSt3__27forwardIRiEEOT_RNS_16remove_referenceIS2_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRiEEOT_RNS_16remove_referenceIS2_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA8_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA8_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA8_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__27forwardIRA7_KcEEOT_RNS_16remove_referenceIS4_E4typeE=Module["__ZNSt3__27forwardIRA7_KcEEOT_RNS_16remove_referenceIS4_E4typeE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__27forwardIRA7_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null,arguments)};var __ZNSt3__24moveIRPKcEEONS_16remove_referenceIT_E4typeEOS5_=Module["__ZNSt3__24moveIRPKcEEONS_16remove_referenceIT_E4typeEOS5_"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__24moveIRPKcEEONS_16remove_referenceIT_E4typeEOS5_"].apply(null,arguments)};var ___cxa_get_globals=Module["___cxa_get_globals"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__cxa_get_globals"].apply(null,arguments)};var ___cxa_guard_acquire=Module["___cxa_guard_acquire"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__cxa_guard_acquire"].apply(null,arguments)};var ___cxa_guard_release=Module["___cxa_guard_release"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__cxa_guard_release"].apply(null,arguments)};var ___cxa_guard_abort=Module["___cxa_guard_abort"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__cxa_guard_abort"].apply(null,arguments)};var __ZSt14get_unexpectedv=Module["__ZSt14get_unexpectedv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZSt14get_unexpectedv"].apply(null,arguments)};var ___clang_call_terminate=Module["___clang_call_terminate"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__clang_call_terminate"].apply(null,arguments)};var __ZSt11__terminatePFvvE=Module["__ZSt11__terminatePFvvE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZSt11__terminatePFvvE"].apply(null,arguments)};var __ZSt13get_terminatev=Module["__ZSt13get_terminatev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZSt13get_terminatev"].apply(null,arguments)};var __ZSt12__unexpectedPFvvE=Module["__ZSt12__unexpectedPFvvE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZSt12__unexpectedPFvvE"].apply(null,arguments)};var __ZSt10unexpectedv=Module["__ZSt10unexpectedv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZSt10unexpectedv"].apply(null,arguments)};var __ZSt15set_new_handlerPFvvE=Module["__ZSt15set_new_handlerPFvvE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZSt15set_new_handlerPFvvE"].apply(null,arguments)};var __ZSt15get_new_handlerv=Module["__ZSt15get_new_handlerv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZSt15get_new_handlerv"].apply(null,arguments)};var __ZN10__cxxabiv130__aligned_malloc_with_fallbackEm=Module["__ZN10__cxxabiv130__aligned_malloc_with_fallbackEm"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv130__aligned_malloc_with_fallbackEm"].apply(null,arguments)};var _posix_memalign=Module["_posix_memalign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["posix_memalign"].apply(null,arguments)};var __ZN10__cxxabiv122__calloc_with_fallbackEmm=Module["__ZN10__cxxabiv122__calloc_with_fallbackEmm"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv122__calloc_with_fallbackEmm"].apply(null,arguments)};var __ZN10__cxxabiv128__aligned_free_with_fallbackEPv=Module["__ZN10__cxxabiv128__aligned_free_with_fallbackEPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv128__aligned_free_with_fallbackEPv"].apply(null,arguments)};var __ZN10__cxxabiv120__free_with_fallbackEPv=Module["__ZN10__cxxabiv120__free_with_fallbackEPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv120__free_with_fallbackEPv"].apply(null,arguments)};var __Znwm=Module["__Znwm"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Znwm"].apply(null,arguments)};var __ZNSt9bad_allocC1Ev=Module["__ZNSt9bad_allocC1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt9bad_allocC1Ev"].apply(null,arguments)};var __ZNSt9bad_allocD1Ev=Module["__ZNSt9bad_allocD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt9bad_allocD1Ev"].apply(null,arguments)};var __ZnwmRKSt9nothrow_t=Module["__ZnwmRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZnwmRKSt9nothrow_t"].apply(null,arguments)};var __Znam=Module["__Znam"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_Znam"].apply(null,arguments)};var __ZnamRKSt9nothrow_t=Module["__ZnamRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZnamRKSt9nothrow_t"].apply(null,arguments)};var __ZdlPvRKSt9nothrow_t=Module["__ZdlPvRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZdlPvRKSt9nothrow_t"].apply(null,arguments)};var __ZdlPvm=Module["__ZdlPvm"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZdlPvm"].apply(null,arguments)};var __ZdaPv=Module["__ZdaPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZdaPv"].apply(null,arguments)};var __ZdaPvRKSt9nothrow_t=Module["__ZdaPvRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZdaPvRKSt9nothrow_t"].apply(null,arguments)};var __ZdaPvm=Module["__ZdaPvm"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZdaPvm"].apply(null,arguments)};var __ZnwmSt11align_val_t=Module["__ZnwmSt11align_val_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZnwmSt11align_val_t"].apply(null,arguments)};var __ZnwmSt11align_val_tRKSt9nothrow_t=Module["__ZnwmSt11align_val_tRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZnwmSt11align_val_tRKSt9nothrow_t"].apply(null,arguments)};var __ZnamSt11align_val_t=Module["__ZnamSt11align_val_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZnamSt11align_val_t"].apply(null,arguments)};var __ZnamSt11align_val_tRKSt9nothrow_t=Module["__ZnamSt11align_val_tRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZnamSt11align_val_tRKSt9nothrow_t"].apply(null,arguments)};var __ZdlPvSt11align_val_t=Module["__ZdlPvSt11align_val_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZdlPvSt11align_val_t"].apply(null,arguments)};var __ZdlPvSt11align_val_tRKSt9nothrow_t=Module["__ZdlPvSt11align_val_tRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZdlPvSt11align_val_tRKSt9nothrow_t"].apply(null,arguments)};var __ZdlPvmSt11align_val_t=Module["__ZdlPvmSt11align_val_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZdlPvmSt11align_val_t"].apply(null,arguments)};var __ZdaPvSt11align_val_t=Module["__ZdaPvSt11align_val_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZdaPvSt11align_val_t"].apply(null,arguments)};var __ZdaPvSt11align_val_tRKSt9nothrow_t=Module["__ZdaPvSt11align_val_tRKSt9nothrow_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZdaPvSt11align_val_tRKSt9nothrow_t"].apply(null,arguments)};var __ZdaPvmSt11align_val_t=Module["__ZdaPvmSt11align_val_t"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZdaPvmSt11align_val_t"].apply(null,arguments)};var __ZNSt9exceptionD2Ev=Module["__ZNSt9exceptionD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt9exceptionD2Ev"].apply(null,arguments)};var __ZNSt9exceptionD0Ev=Module["__ZNSt9exceptionD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt9exceptionD0Ev"].apply(null,arguments)};var __ZNKSt9exception4whatEv=Module["__ZNKSt9exception4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNKSt9exception4whatEv"].apply(null,arguments)};var __ZNSt13bad_exceptionD0Ev=Module["__ZNSt13bad_exceptionD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt13bad_exceptionD0Ev"].apply(null,arguments)};var __ZNKSt13bad_exception4whatEv=Module["__ZNKSt13bad_exception4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNKSt13bad_exception4whatEv"].apply(null,arguments)};var __ZNSt9bad_allocC2Ev=Module["__ZNSt9bad_allocC2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt9bad_allocC2Ev"].apply(null,arguments)};var __ZNSt9exceptionC2Ev=Module["__ZNSt9exceptionC2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt9exceptionC2Ev"].apply(null,arguments)};var __ZNSt9bad_allocD0Ev=Module["__ZNSt9bad_allocD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt9bad_allocD0Ev"].apply(null,arguments)};var __ZNKSt9bad_alloc4whatEv=Module["__ZNKSt9bad_alloc4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNKSt9bad_alloc4whatEv"].apply(null,arguments)};var __ZNSt20bad_array_new_lengthC2Ev=Module["__ZNSt20bad_array_new_lengthC2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt20bad_array_new_lengthC2Ev"].apply(null,arguments)};var __ZNSt20bad_array_new_lengthD0Ev=Module["__ZNSt20bad_array_new_lengthD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt20bad_array_new_lengthD0Ev"].apply(null,arguments)};var __ZNKSt20bad_array_new_length4whatEv=Module["__ZNKSt20bad_array_new_length4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNKSt20bad_array_new_length4whatEv"].apply(null,arguments)};var __ZNSt9exceptionD1Ev=Module["__ZNSt9exceptionD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt9exceptionD1Ev"].apply(null,arguments)};var __ZNSt13bad_exceptionD2Ev=Module["__ZNSt13bad_exceptionD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt13bad_exceptionD2Ev"].apply(null,arguments)};var __ZNSt13bad_exceptionD1Ev=Module["__ZNSt13bad_exceptionD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt13bad_exceptionD1Ev"].apply(null,arguments)};var __ZNSt9bad_allocD2Ev=Module["__ZNSt9bad_allocD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt9bad_allocD2Ev"].apply(null,arguments)};var __ZNSt20bad_array_new_lengthD2Ev=Module["__ZNSt20bad_array_new_lengthD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt20bad_array_new_lengthD2Ev"].apply(null,arguments)};var __ZNSt11logic_errorD2Ev=Module["__ZNSt11logic_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt11logic_errorD2Ev"].apply(null,arguments)};var __ZNSt3__218__libcpp_refstringD2Ev=Module["__ZNSt3__218__libcpp_refstringD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt3__218__libcpp_refstringD2Ev"].apply(null,arguments)};var __ZNKSt3__218__libcpp_refstring15__uses_refcountEv=Module["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNKSt3__218__libcpp_refstring15__uses_refcountEv"].apply(null,arguments)};var __ZNSt11logic_errorD0Ev=Module["__ZNSt11logic_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt11logic_errorD0Ev"].apply(null,arguments)};var __ZNKSt11logic_error4whatEv=Module["__ZNKSt11logic_error4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNKSt11logic_error4whatEv"].apply(null,arguments)};var __ZNKSt3__218__libcpp_refstring5c_strEv=Module["__ZNKSt3__218__libcpp_refstring5c_strEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNKSt3__218__libcpp_refstring5c_strEv"].apply(null,arguments)};var __ZNSt13runtime_errorD2Ev=Module["__ZNSt13runtime_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt13runtime_errorD2Ev"].apply(null,arguments)};var __ZNSt13runtime_errorD0Ev=Module["__ZNSt13runtime_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt13runtime_errorD0Ev"].apply(null,arguments)};var __ZNKSt13runtime_error4whatEv=Module["__ZNKSt13runtime_error4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNKSt13runtime_error4whatEv"].apply(null,arguments)};var __ZNSt12domain_errorD0Ev=Module["__ZNSt12domain_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt12domain_errorD0Ev"].apply(null,arguments)};var __ZNSt16invalid_argumentD0Ev=Module["__ZNSt16invalid_argumentD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt16invalid_argumentD0Ev"].apply(null,arguments)};var __ZNSt12length_errorD0Ev=Module["__ZNSt12length_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt12length_errorD0Ev"].apply(null,arguments)};var __ZNSt12out_of_rangeD0Ev=Module["__ZNSt12out_of_rangeD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt12out_of_rangeD0Ev"].apply(null,arguments)};var __ZNSt11range_errorD0Ev=Module["__ZNSt11range_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt11range_errorD0Ev"].apply(null,arguments)};var __ZNSt14overflow_errorD0Ev=Module["__ZNSt14overflow_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt14overflow_errorD0Ev"].apply(null,arguments)};var __ZNSt15underflow_errorD0Ev=Module["__ZNSt15underflow_errorD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt15underflow_errorD0Ev"].apply(null,arguments)};var __ZNSt11logic_errorD1Ev=Module["__ZNSt11logic_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt11logic_errorD1Ev"].apply(null,arguments)};var __ZNSt13runtime_errorD1Ev=Module["__ZNSt13runtime_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt13runtime_errorD1Ev"].apply(null,arguments)};var __ZNSt12domain_errorD2Ev=Module["__ZNSt12domain_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt12domain_errorD2Ev"].apply(null,arguments)};var __ZNSt12domain_errorD1Ev=Module["__ZNSt12domain_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt12domain_errorD1Ev"].apply(null,arguments)};var __ZNSt16invalid_argumentD2Ev=Module["__ZNSt16invalid_argumentD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt16invalid_argumentD2Ev"].apply(null,arguments)};var __ZNSt16invalid_argumentD1Ev=Module["__ZNSt16invalid_argumentD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt16invalid_argumentD1Ev"].apply(null,arguments)};var __ZNSt12length_errorD2Ev=Module["__ZNSt12length_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt12length_errorD2Ev"].apply(null,arguments)};var __ZNSt12length_errorD1Ev=Module["__ZNSt12length_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt12length_errorD1Ev"].apply(null,arguments)};var __ZNSt12out_of_rangeD2Ev=Module["__ZNSt12out_of_rangeD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt12out_of_rangeD2Ev"].apply(null,arguments)};var __ZNSt12out_of_rangeD1Ev=Module["__ZNSt12out_of_rangeD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt12out_of_rangeD1Ev"].apply(null,arguments)};var __ZNSt11range_errorD2Ev=Module["__ZNSt11range_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt11range_errorD2Ev"].apply(null,arguments)};var __ZNSt11range_errorD1Ev=Module["__ZNSt11range_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt11range_errorD1Ev"].apply(null,arguments)};var __ZNSt14overflow_errorD2Ev=Module["__ZNSt14overflow_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt14overflow_errorD2Ev"].apply(null,arguments)};var __ZNSt14overflow_errorD1Ev=Module["__ZNSt14overflow_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt14overflow_errorD1Ev"].apply(null,arguments)};var __ZNSt15underflow_errorD2Ev=Module["__ZNSt15underflow_errorD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt15underflow_errorD2Ev"].apply(null,arguments)};var __ZNSt15underflow_errorD1Ev=Module["__ZNSt15underflow_errorD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt15underflow_errorD1Ev"].apply(null,arguments)};var __ZNSt9type_infoD2Ev=Module["__ZNSt9type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt9type_infoD2Ev"].apply(null,arguments)};var __ZNSt9type_infoD0Ev=Module["__ZNSt9type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt9type_infoD0Ev"].apply(null,arguments)};var __ZNSt8bad_castC2Ev=Module["__ZNSt8bad_castC2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt8bad_castC2Ev"].apply(null,arguments)};var __ZNSt8bad_castD2Ev=Module["__ZNSt8bad_castD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt8bad_castD2Ev"].apply(null,arguments)};var __ZNSt8bad_castD0Ev=Module["__ZNSt8bad_castD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt8bad_castD0Ev"].apply(null,arguments)};var __ZNKSt8bad_cast4whatEv=Module["__ZNKSt8bad_cast4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNKSt8bad_cast4whatEv"].apply(null,arguments)};var __ZNSt10bad_typeidC2Ev=Module["__ZNSt10bad_typeidC2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt10bad_typeidC2Ev"].apply(null,arguments)};var __ZNSt10bad_typeidD2Ev=Module["__ZNSt10bad_typeidD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt10bad_typeidD2Ev"].apply(null,arguments)};var __ZNSt10bad_typeidD0Ev=Module["__ZNSt10bad_typeidD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt10bad_typeidD0Ev"].apply(null,arguments)};var __ZNKSt10bad_typeid4whatEv=Module["__ZNKSt10bad_typeid4whatEv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNKSt10bad_typeid4whatEv"].apply(null,arguments)};var __ZNSt9type_infoD1Ev=Module["__ZNSt9type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNSt9type_infoD1Ev"].apply(null,arguments)};var __ZN10__cxxabiv116__shim_type_infoD2Ev=Module["__ZN10__cxxabiv116__shim_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv116__shim_type_infoD2Ev"].apply(null,arguments)};var __ZN10__cxxabiv116__shim_type_infoD0Ev=Module["__ZN10__cxxabiv116__shim_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv116__shim_type_infoD0Ev"].apply(null,arguments)};var __ZNK10__cxxabiv116__shim_type_info5noop1Ev=Module["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv116__shim_type_info5noop1Ev"].apply(null,arguments)};var __ZNK10__cxxabiv116__shim_type_info5noop2Ev=Module["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv116__shim_type_info5noop2Ev"].apply(null,arguments)};var __ZN10__cxxabiv123__fundamental_type_infoD0Ev=Module["__ZN10__cxxabiv123__fundamental_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv123__fundamental_type_infoD0Ev"].apply(null,arguments)};var __ZN10__cxxabiv117__array_type_infoD0Ev=Module["__ZN10__cxxabiv117__array_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv117__array_type_infoD0Ev"].apply(null,arguments)};var __ZN10__cxxabiv120__function_type_infoD0Ev=Module["__ZN10__cxxabiv120__function_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv120__function_type_infoD0Ev"].apply(null,arguments)};var __ZN10__cxxabiv116__enum_type_infoD0Ev=Module["__ZN10__cxxabiv116__enum_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv116__enum_type_infoD0Ev"].apply(null,arguments)};var __ZN10__cxxabiv117__class_type_infoD0Ev=Module["__ZN10__cxxabiv117__class_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv117__class_type_infoD0Ev"].apply(null,arguments)};var __ZN10__cxxabiv120__si_class_type_infoD0Ev=Module["__ZN10__cxxabiv120__si_class_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv120__si_class_type_infoD0Ev"].apply(null,arguments)};var __ZN10__cxxabiv121__vmi_class_type_infoD0Ev=Module["__ZN10__cxxabiv121__vmi_class_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv121__vmi_class_type_infoD0Ev"].apply(null,arguments)};var __ZN10__cxxabiv117__pbase_type_infoD0Ev=Module["__ZN10__cxxabiv117__pbase_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv117__pbase_type_infoD0Ev"].apply(null,arguments)};var __ZN10__cxxabiv119__pointer_type_infoD0Ev=Module["__ZN10__cxxabiv119__pointer_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv119__pointer_type_infoD0Ev"].apply(null,arguments)};var __ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev=Module["__ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev"].apply(null,arguments)};var __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv=Module["__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null,arguments)};var __ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv=Module["__ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null,arguments)};var __ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv=Module["__ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null,arguments)};var __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv=Module["__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null,arguments)};var __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv=Module["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null,arguments)};var ___dynamic_cast=Module["___dynamic_cast"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__dynamic_cast"].apply(null,arguments)};var __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi=Module["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"].apply(null,arguments)};var __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi=Module["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null,arguments)};var __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi=Module["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null,arguments)};var __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi=Module["__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null,arguments)};var __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi=Module["__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null,arguments)};var __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv=Module["__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null,arguments)};var __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv=Module["__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null,arguments)};var __ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE=Module["__ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE"].apply(null,arguments)};var __ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE=Module["__ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE"].apply(null,arguments)};var __ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv=Module["__ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null,arguments)};var __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i=Module["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"].apply(null,arguments)};var __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi=Module["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"].apply(null,arguments)};var __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib=Module["__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null,arguments)};var __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib=Module["__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null,arguments)};var __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib=Module["__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null,arguments)};var __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib=Module["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null,arguments)};var __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib=Module["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null,arguments)};var __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib=Module["__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null,arguments)};var __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib=Module["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null,arguments)};var __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib=Module["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null,arguments)};var ___cxa_can_catch=Module["___cxa_can_catch"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__cxa_can_catch"].apply(null,arguments)};var ___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__cxa_is_pointer_type"].apply(null,arguments)};var __ZN10__cxxabiv116__shim_type_infoD1Ev=Module["__ZN10__cxxabiv116__shim_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv116__shim_type_infoD1Ev"].apply(null,arguments)};var __ZN10__cxxabiv123__fundamental_type_infoD2Ev=Module["__ZN10__cxxabiv123__fundamental_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv123__fundamental_type_infoD2Ev"].apply(null,arguments)};var __ZN10__cxxabiv123__fundamental_type_infoD1Ev=Module["__ZN10__cxxabiv123__fundamental_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv123__fundamental_type_infoD1Ev"].apply(null,arguments)};var __ZN10__cxxabiv117__array_type_infoD2Ev=Module["__ZN10__cxxabiv117__array_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv117__array_type_infoD2Ev"].apply(null,arguments)};var __ZN10__cxxabiv117__array_type_infoD1Ev=Module["__ZN10__cxxabiv117__array_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv117__array_type_infoD1Ev"].apply(null,arguments)};var __ZN10__cxxabiv120__function_type_infoD2Ev=Module["__ZN10__cxxabiv120__function_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv120__function_type_infoD2Ev"].apply(null,arguments)};var __ZN10__cxxabiv120__function_type_infoD1Ev=Module["__ZN10__cxxabiv120__function_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv120__function_type_infoD1Ev"].apply(null,arguments)};var __ZN10__cxxabiv116__enum_type_infoD2Ev=Module["__ZN10__cxxabiv116__enum_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv116__enum_type_infoD2Ev"].apply(null,arguments)};var __ZN10__cxxabiv116__enum_type_infoD1Ev=Module["__ZN10__cxxabiv116__enum_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv116__enum_type_infoD1Ev"].apply(null,arguments)};var __ZN10__cxxabiv117__class_type_infoD2Ev=Module["__ZN10__cxxabiv117__class_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv117__class_type_infoD2Ev"].apply(null,arguments)};var __ZN10__cxxabiv117__class_type_infoD1Ev=Module["__ZN10__cxxabiv117__class_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv117__class_type_infoD1Ev"].apply(null,arguments)};var __ZN10__cxxabiv120__si_class_type_infoD2Ev=Module["__ZN10__cxxabiv120__si_class_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv120__si_class_type_infoD2Ev"].apply(null,arguments)};var __ZN10__cxxabiv120__si_class_type_infoD1Ev=Module["__ZN10__cxxabiv120__si_class_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv120__si_class_type_infoD1Ev"].apply(null,arguments)};var __ZN10__cxxabiv121__vmi_class_type_infoD2Ev=Module["__ZN10__cxxabiv121__vmi_class_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv121__vmi_class_type_infoD2Ev"].apply(null,arguments)};var __ZN10__cxxabiv121__vmi_class_type_infoD1Ev=Module["__ZN10__cxxabiv121__vmi_class_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv121__vmi_class_type_infoD1Ev"].apply(null,arguments)};var __ZN10__cxxabiv117__pbase_type_infoD2Ev=Module["__ZN10__cxxabiv117__pbase_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv117__pbase_type_infoD2Ev"].apply(null,arguments)};var __ZN10__cxxabiv117__pbase_type_infoD1Ev=Module["__ZN10__cxxabiv117__pbase_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv117__pbase_type_infoD1Ev"].apply(null,arguments)};var __ZN10__cxxabiv119__pointer_type_infoD2Ev=Module["__ZN10__cxxabiv119__pointer_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv119__pointer_type_infoD2Ev"].apply(null,arguments)};var __ZN10__cxxabiv119__pointer_type_infoD1Ev=Module["__ZN10__cxxabiv119__pointer_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv119__pointer_type_infoD1Ev"].apply(null,arguments)};var __ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev=Module["__ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev"].apply(null,arguments)};var __ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev=Module["__ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev"].apply(null,arguments)};var __get_tzname=Module["__get_tzname"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_get_tzname"].apply(null,arguments)};var __get_daylight=Module["__get_daylight"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_get_daylight"].apply(null,arguments)};var __get_timezone=Module["__get_timezone"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_get_timezone"].apply(null,arguments)};var __get_environ=Module["__get_environ"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_get_environ"].apply(null,arguments)};var ___emscripten_environ_constructor=Module["___emscripten_environ_constructor"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__emscripten_environ_constructor"].apply(null,arguments)};var _realloc_in_place=Module["_realloc_in_place"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["realloc_in_place"].apply(null,arguments)};var _memalign=Module["_memalign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["memalign"].apply(null,arguments)};var _valloc=Module["_valloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["valloc"].apply(null,arguments)};var _pvalloc=Module["_pvalloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pvalloc"].apply(null,arguments)};var _mallinfo=Module["_mallinfo"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["mallinfo"].apply(null,arguments)};var _mallopt=Module["_mallopt"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["mallopt"].apply(null,arguments)};var _malloc_trim=Module["_malloc_trim"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["malloc_trim"].apply(null,arguments)};var _malloc_stats=Module["_malloc_stats"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["malloc_stats"].apply(null,arguments)};var _malloc_usable_size=Module["_malloc_usable_size"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["malloc_usable_size"].apply(null,arguments)};var _malloc_footprint=Module["_malloc_footprint"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["malloc_footprint"].apply(null,arguments)};var _malloc_max_footprint=Module["_malloc_max_footprint"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["malloc_max_footprint"].apply(null,arguments)};var _malloc_footprint_limit=Module["_malloc_footprint_limit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["malloc_footprint_limit"].apply(null,arguments)};var _malloc_set_footprint_limit=Module["_malloc_set_footprint_limit"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["malloc_set_footprint_limit"].apply(null,arguments)};var _independent_calloc=Module["_independent_calloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["independent_calloc"].apply(null,arguments)};var _independent_comalloc=Module["_independent_comalloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["independent_comalloc"].apply(null,arguments)};var _bulk_free=Module["_bulk_free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["bulk_free"].apply(null,arguments)};var _emscripten_builtin_malloc=Module["_emscripten_builtin_malloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_builtin_malloc"].apply(null,arguments)};var _emscripten_builtin_free=Module["_emscripten_builtin_free"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_builtin_free"].apply(null,arguments)};var _emscripten_builtin_memalign=Module["_emscripten_builtin_memalign"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_builtin_memalign"].apply(null,arguments)};var _emscripten_has_threading_support=Module["_emscripten_has_threading_support"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_has_threading_support"].apply(null,arguments)};var _emscripten_num_logical_cores=Module["_emscripten_num_logical_cores"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_num_logical_cores"].apply(null,arguments)};var _emscripten_force_num_logical_cores=Module["_emscripten_force_num_logical_cores"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_force_num_logical_cores"].apply(null,arguments)};var _emscripten_atomic_exchange_u8=Module["_emscripten_atomic_exchange_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_exchange_u8"].apply(null,arguments)};var _emscripten_atomic_exchange_u16=Module["_emscripten_atomic_exchange_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_exchange_u16"].apply(null,arguments)};var _emscripten_atomic_exchange_u32=Module["_emscripten_atomic_exchange_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_exchange_u32"].apply(null,arguments)};var _emscripten_atomic_exchange_u64=Module["_emscripten_atomic_exchange_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_exchange_u64"].apply(null,arguments)};var _emscripten_atomic_cas_u8=Module["_emscripten_atomic_cas_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_cas_u8"].apply(null,arguments)};var _emscripten_atomic_cas_u16=Module["_emscripten_atomic_cas_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_cas_u16"].apply(null,arguments)};var _emscripten_atomic_cas_u32=Module["_emscripten_atomic_cas_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_cas_u32"].apply(null,arguments)};var _emscripten_atomic_cas_u64=Module["_emscripten_atomic_cas_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_cas_u64"].apply(null,arguments)};var _emscripten_atomic_load_u8=Module["_emscripten_atomic_load_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_load_u8"].apply(null,arguments)};var _emscripten_atomic_load_u16=Module["_emscripten_atomic_load_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_load_u16"].apply(null,arguments)};var _emscripten_atomic_load_u32=Module["_emscripten_atomic_load_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_load_u32"].apply(null,arguments)};var _emscripten_atomic_load_f32=Module["_emscripten_atomic_load_f32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_load_f32"].apply(null,arguments)};var _emscripten_atomic_load_u64=Module["_emscripten_atomic_load_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_load_u64"].apply(null,arguments)};var _emscripten_atomic_load_f64=Module["_emscripten_atomic_load_f64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_load_f64"].apply(null,arguments)};var _emscripten_atomic_store_u8=Module["_emscripten_atomic_store_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_store_u8"].apply(null,arguments)};var _emscripten_atomic_store_u16=Module["_emscripten_atomic_store_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_store_u16"].apply(null,arguments)};var _emscripten_atomic_store_u32=Module["_emscripten_atomic_store_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_store_u32"].apply(null,arguments)};var _emscripten_atomic_store_f32=Module["_emscripten_atomic_store_f32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_store_f32"].apply(null,arguments)};var _emscripten_atomic_store_u64=Module["_emscripten_atomic_store_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_store_u64"].apply(null,arguments)};var _emscripten_atomic_store_f64=Module["_emscripten_atomic_store_f64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_store_f64"].apply(null,arguments)};var _emscripten_atomic_fence=Module["_emscripten_atomic_fence"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_fence"].apply(null,arguments)};var _emscripten_atomic_add_u8=Module["_emscripten_atomic_add_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_add_u8"].apply(null,arguments)};var _emscripten_atomic_add_u16=Module["_emscripten_atomic_add_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_add_u16"].apply(null,arguments)};var _emscripten_atomic_add_u32=Module["_emscripten_atomic_add_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_add_u32"].apply(null,arguments)};var _emscripten_atomic_add_u64=Module["_emscripten_atomic_add_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_add_u64"].apply(null,arguments)};var _emscripten_atomic_sub_u8=Module["_emscripten_atomic_sub_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_sub_u8"].apply(null,arguments)};var _emscripten_atomic_sub_u16=Module["_emscripten_atomic_sub_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_sub_u16"].apply(null,arguments)};var _emscripten_atomic_sub_u32=Module["_emscripten_atomic_sub_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_sub_u32"].apply(null,arguments)};var _emscripten_atomic_sub_u64=Module["_emscripten_atomic_sub_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_sub_u64"].apply(null,arguments)};var _emscripten_atomic_and_u8=Module["_emscripten_atomic_and_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_and_u8"].apply(null,arguments)};var _emscripten_atomic_and_u16=Module["_emscripten_atomic_and_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_and_u16"].apply(null,arguments)};var _emscripten_atomic_and_u32=Module["_emscripten_atomic_and_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_and_u32"].apply(null,arguments)};var _emscripten_atomic_and_u64=Module["_emscripten_atomic_and_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_and_u64"].apply(null,arguments)};var _emscripten_atomic_or_u8=Module["_emscripten_atomic_or_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_or_u8"].apply(null,arguments)};var _emscripten_atomic_or_u16=Module["_emscripten_atomic_or_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_or_u16"].apply(null,arguments)};var _emscripten_atomic_or_u32=Module["_emscripten_atomic_or_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_or_u32"].apply(null,arguments)};var _emscripten_atomic_or_u64=Module["_emscripten_atomic_or_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_or_u64"].apply(null,arguments)};var _emscripten_atomic_xor_u8=Module["_emscripten_atomic_xor_u8"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_xor_u8"].apply(null,arguments)};var _emscripten_atomic_xor_u16=Module["_emscripten_atomic_xor_u16"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_xor_u16"].apply(null,arguments)};var _emscripten_atomic_xor_u32=Module["_emscripten_atomic_xor_u32"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_xor_u32"].apply(null,arguments)};var _emscripten_atomic_xor_u64=Module["_emscripten_atomic_xor_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_atomic_xor_u64"].apply(null,arguments)};var __emscripten_atomic_fetch_and_add_u64=Module["__emscripten_atomic_fetch_and_add_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_emscripten_atomic_fetch_and_add_u64"].apply(null,arguments)};var __emscripten_atomic_fetch_and_sub_u64=Module["__emscripten_atomic_fetch_and_sub_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_emscripten_atomic_fetch_and_sub_u64"].apply(null,arguments)};var __emscripten_atomic_fetch_and_and_u64=Module["__emscripten_atomic_fetch_and_and_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_emscripten_atomic_fetch_and_and_u64"].apply(null,arguments)};var __emscripten_atomic_fetch_and_or_u64=Module["__emscripten_atomic_fetch_and_or_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_emscripten_atomic_fetch_and_or_u64"].apply(null,arguments)};var __emscripten_atomic_fetch_and_xor_u64=Module["__emscripten_atomic_fetch_and_xor_u64"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["_emscripten_atomic_fetch_and_xor_u64"].apply(null,arguments)};var _emscripten_futex_wait=Module["_emscripten_futex_wait"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_futex_wait"].apply(null,arguments)};var _emscripten_futex_wake=Module["_emscripten_futex_wake"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_futex_wake"].apply(null,arguments)};var _emscripten_is_main_runtime_thread=Module["_emscripten_is_main_runtime_thread"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_is_main_runtime_thread"].apply(null,arguments)};var _emscripten_main_thread_process_queued_calls=Module["_emscripten_main_thread_process_queued_calls"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_main_thread_process_queued_calls"].apply(null,arguments)};var _emscripten_current_thread_process_queued_calls=Module["_emscripten_current_thread_process_queued_calls"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["emscripten_current_thread_process_queued_calls"].apply(null,arguments)};var _pthread_mutex_timedlock=Module["_pthread_mutex_timedlock"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_mutex_timedlock"].apply(null,arguments)};var _pthread_mutex_consistent=Module["_pthread_mutex_consistent"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_mutex_consistent"].apply(null,arguments)};var _pthread_barrier_init=Module["_pthread_barrier_init"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_barrier_init"].apply(null,arguments)};var _pthread_barrier_destroy=Module["_pthread_barrier_destroy"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_barrier_destroy"].apply(null,arguments)};var _pthread_barrier_wait=Module["_pthread_barrier_wait"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_barrier_wait"].apply(null,arguments)};var _pthread_once=Module["_pthread_once"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["pthread_once"].apply(null,arguments)};var ___ashlti3=Module["___ashlti3"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__ashlti3"].apply(null,arguments)};var ___lshrti3=Module["___lshrti3"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__lshrti3"].apply(null,arguments)};var _setThrew=Module["_setThrew"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["setThrew"].apply(null,arguments)};var stackSave=Module["stackSave"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["stackSave"].apply(null,arguments)};var stackAlloc=Module["stackAlloc"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["stackAlloc"].apply(null,arguments)};var stackRestore=Module["stackRestore"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["stackRestore"].apply(null,arguments)};var __growWasmMemory=Module["__growWasmMemory"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["__growWasmMemory"].apply(null,arguments)};var dynCall_i=Module["dynCall_i"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_i"].apply(null,arguments)};var dynCall_v=Module["dynCall_v"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_v"].apply(null,arguments)};var dynCall_iii=Module["dynCall_iii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iii"].apply(null,arguments)};var dynCall_ii=Module["dynCall_ii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_ii"].apply(null,arguments)};var dynCall_vi=Module["dynCall_vi"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_vi"].apply(null,arguments)};var dynCall_iiii=Module["dynCall_iiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iiii"].apply(null,arguments)};var dynCall_vii=Module["dynCall_vii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_vii"].apply(null,arguments)};var dynCall_iiiii=Module["dynCall_iiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iiiii"].apply(null,arguments)};var dynCall_viii=Module["dynCall_viii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_viii"].apply(null,arguments)};var dynCall_iiiiii=Module["dynCall_iiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iiiiii"].apply(null,arguments)};var dynCall_ddd=Module["dynCall_ddd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_ddd"].apply(null,arguments)};var dynCall_dd=Module["dynCall_dd"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_dd"].apply(null,arguments)};var dynCall_jiji=Module["dynCall_jiji"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_jiji"].apply(null,arguments)};var dynCall_iidiiii=Module["dynCall_iidiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_iidiiii"].apply(null,arguments)};var dynCall_viiiiii=Module["dynCall_viiiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_viiiiii"].apply(null,arguments)};var dynCall_viiiii=Module["dynCall_viiiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_viiiii"].apply(null,arguments)};var dynCall_viiii=Module["dynCall_viiii"]=function(){assert(runtimeInitialized,"you need to wait for the runtime to be ready (e.g. wait for main() to be called)");assert(!runtimeExited,"the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");return Module["asm"]["dynCall_viiii"].apply(null,arguments)};Module["asm"]=asm;if(!Object.getOwnPropertyDescriptor(Module,"intArrayFromString"))Module["intArrayFromString"]=function(){abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"intArrayToString"))Module["intArrayToString"]=function(){abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["ccall"]=ccall;Module["cwrap"]=cwrap;if(!Object.getOwnPropertyDescriptor(Module,"setValue"))Module["setValue"]=function(){abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["getValue"]=getValue;if(!Object.getOwnPropertyDescriptor(Module,"allocate"))Module["allocate"]=function(){abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["getMemory"]=getMemory;if(!Object.getOwnPropertyDescriptor(Module,"AsciiToString"))Module["AsciiToString"]=function(){abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stringToAscii"))Module["stringToAscii"]=function(){abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"UTF8ArrayToString"))Module["UTF8ArrayToString"]=function(){abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"UTF8ToString"))Module["UTF8ToString"]=function(){abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stringToUTF8Array"))Module["stringToUTF8Array"]=function(){abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["stringToUTF8"]=stringToUTF8;if(!Object.getOwnPropertyDescriptor(Module,"lengthBytesUTF8"))Module["lengthBytesUTF8"]=function(){abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"UTF16ToString"))Module["UTF16ToString"]=function(){abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stringToUTF16"))Module["stringToUTF16"]=function(){abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"lengthBytesUTF16"))Module["lengthBytesUTF16"]=function(){abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"UTF32ToString"))Module["UTF32ToString"]=function(){abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stringToUTF32"))Module["stringToUTF32"]=function(){abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"lengthBytesUTF32"))Module["lengthBytesUTF32"]=function(){abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"allocateUTF8"))Module["allocateUTF8"]=function(){abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stackTrace"))Module["stackTrace"]=function(){abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"addOnPreRun"))Module["addOnPreRun"]=function(){abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"addOnInit"))Module["addOnInit"]=function(){abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"addOnPreMain"))Module["addOnPreMain"]=function(){abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"addOnExit"))Module["addOnExit"]=function(){abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"addOnPostRun"))Module["addOnPostRun"]=function(){abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"writeStringToMemory"))Module["writeStringToMemory"]=function(){abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"writeArrayToMemory"))Module["writeArrayToMemory"]=function(){abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"writeAsciiToMemory"))Module["writeAsciiToMemory"]=function(){abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["addRunDependency"]=addRunDependency;Module["removeRunDependency"]=removeRunDependency;if(!Object.getOwnPropertyDescriptor(Module,"ENV"))Module["ENV"]=function(){abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"FS"))Module["FS"]=function(){abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};Module["FS_createFolder"]=FS.createFolder;Module["FS_createPath"]=FS.createPath;Module["FS_createDataFile"]=FS.createDataFile;Module["FS_createPreloadedFile"]=FS.createPreloadedFile;Module["FS_createLazyFile"]=FS.createLazyFile;Module["FS_createLink"]=FS.createLink;Module["FS_createDevice"]=FS.createDevice;Module["FS_unlink"]=FS.unlink;if(!Object.getOwnPropertyDescriptor(Module,"GL"))Module["GL"]=function(){abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"dynamicAlloc"))Module["dynamicAlloc"]=function(){abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"loadDynamicLibrary"))Module["loadDynamicLibrary"]=function(){abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"loadWebAssemblyModule"))Module["loadWebAssemblyModule"]=function(){abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"getLEB"))Module["getLEB"]=function(){abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"getFunctionTables"))Module["getFunctionTables"]=function(){abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"alignFunctionTables"))Module["alignFunctionTables"]=function(){abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"registerFunctions"))Module["registerFunctions"]=function(){abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"addFunction"))Module["addFunction"]=function(){abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"removeFunction"))Module["removeFunction"]=function(){abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"getFuncWrapper"))Module["getFuncWrapper"]=function(){abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"prettyPrint"))Module["prettyPrint"]=function(){abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"makeBigInt"))Module["makeBigInt"]=function(){abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"dynCall"))Module["dynCall"]=function(){abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"getCompilerSetting"))Module["getCompilerSetting"]=function(){abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stackSave"))Module["stackSave"]=function(){abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stackRestore"))Module["stackRestore"]=function(){abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"stackAlloc"))Module["stackAlloc"]=function(){abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"establishStackSpace"))Module["establishStackSpace"]=function(){abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"print"))Module["print"]=function(){abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"printErr"))Module["printErr"]=function(){abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"getTempRet0"))Module["getTempRet0"]=function(){abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"setTempRet0"))Module["setTempRet0"]=function(){abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"callMain"))Module["callMain"]=function(){abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"Pointer_stringify"))Module["Pointer_stringify"]=function(){abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"warnOnce"))Module["warnOnce"]=function(){abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")};if(!Object.getOwnPropertyDescriptor(Module,"ALLOC_NORMAL"))Object.defineProperty(Module,"ALLOC_NORMAL",{get:function(){abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});if(!Object.getOwnPropertyDescriptor(Module,"ALLOC_STACK"))Object.defineProperty(Module,"ALLOC_STACK",{get:function(){abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});if(!Object.getOwnPropertyDescriptor(Module,"ALLOC_DYNAMIC"))Object.defineProperty(Module,"ALLOC_DYNAMIC",{get:function(){abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});if(!Object.getOwnPropertyDescriptor(Module,"ALLOC_NONE"))Object.defineProperty(Module,"ALLOC_NONE",{get:function(){abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});Module["calledRun"]=calledRun;var calledRun;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}var calledMain=false;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function callMain(args){assert(runDependencies==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');assert(__ATPRERUN__.length==0,"cannot call main when preRun functions remain to be called");args=args||[];var argc=args.length+1;var argv=stackAlloc((argc+1)*4);HEAP32[argv>>2]=allocateUTF8OnStack(thisProgram);for(var i=1;i<argc;i++){HEAP32[(argv>>2)+i]=allocateUTF8OnStack(args[i-1])}HEAP32[(argv>>2)+argc]=0;try{var ret=Module["_main"](argc,argv);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e=="SimulateInfiniteLoop"){noExitRuntime=true;return}else{var toLog=e;if(e&&typeof e==="object"&&e.stack){toLog=[e,e.stack]}err("exception thrown: "+toLog);quit_(1,e)}}finally{calledMain=true}}function run(args){args=args||arguments_;if(runDependencies>0){return}writeStackCookie();preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();if(shouldRunNow)callMain(args);postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("")},1);doRun()},1)}else{doRun()}checkStackCookie()}Module["run"]=run;function checkUnflushedContent(){var print=out;var printErr=err;var has=false;out=err=function(x){has=true};try{var flush=Module["_fflush"];if(flush)flush(0);["stdout","stderr"].forEach(function(name){var info=FS.analyzePath("/dev/"+name);if(!info)return;var stream=info.object;var rdev=stream.rdev;var tty=TTY.ttys[rdev];if(tty&&tty.output&&tty.output.length){has=true}})}catch(e){}out=print;err=printErr;if(has){warnOnce("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.")}}function exit(status,implicit){checkUnflushedContent();if(implicit&&noExitRuntime&&status===0){return}if(noExitRuntime){if(!implicit){err("exit("+status+") called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)")}}else{ABORT=true;EXITSTATUS=status;exitRuntime();if(Module["onExit"])Module["onExit"](status)}quit_(status,new ExitStatus(status))}var abortDecorators=[];function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}what+="";out(what);err(what);ABORT=true;EXITSTATUS=1;var extra="";var output="abort("+what+") at "+stackTrace()+extra;if(abortDecorators){abortDecorators.forEach(function(decorator){output=decorator(output,what)})}throw output}Module["abort"]=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=true;if(Module["noInitialRun"])shouldRunNow=false;noExitRuntime=true;run();
